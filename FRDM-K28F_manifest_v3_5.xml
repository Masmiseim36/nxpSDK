<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_FRDM-K28F" name="FRDM-K28F" brief="This is SDK version 2.6.0 manifest file. It describes the content of the FRDM-K28F and additional settings for tools that support SDK version 2.6.0" format_version="3.5" api_version="2.0.0" configuration="3ddf499d52cb8da049478bfcc88c9d15" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.5.xsd">
  <!--Timestamp (UTC): 2019-12-03 20:51:29.090510-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <ksdk id="MCUXpresso260" name="MCUXpresso260" version="2.6.0" revision="228 2019-06-14"/>
  <compilers>
    <compiler id="compiler_armcc" name="armcc" type="armcc"/>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
    <compiler id="compiler_iar" name="iar" type="iar"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.0.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="8.2.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mdk" name="Keil_MDK" version="5.27" full_name="Keil MDK" compiler="compiler_armcc" type="mdk" vendor="ARM" vendor_url="http://www.arm.com"/>
    <toolchain id="iar" name="IAR_Embedded_Workbench_for_ARM" version="8.32.3" full_name="IAR Embedded Workbench for ARM" compiler="compiler_iar" type="iar" vendor="IAR Systems" vendor_url="http://www.iar.com"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.0.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmk28f" name="FRDM-K28F" href="http://www.nxp.com/freedom" version="1.0.0" package="MK28FN2M0VMI15">
      <description>The NXP FRDM-K28F is a development board for the Kinetis K28F MCU.</description>
      <image path="docs/images" type="image">
        <files mask="FRDM-K28F.gif"/>
      </image>
      <metadataSet>
        <metadata key="html"/>
      </metadataSet>
      <examples>
        <example id="frdmk28f_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/adc16" path="boards/frdmk28f/driver_examples/adc16/continuous_edma">
          <external path="boards/frdmk28f/driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma.xml"/>
          </external>
        </example>
        <example id="frdmk28f_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/adc16" path="boards/frdmk28f/driver_examples/adc16/interrupt">
          <external path="boards/frdmk28f/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/adc16_low_power">
          <external path="boards/frdmk28f/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power.xml"/>
          </external>
        </example>
        <example id="frdmk28f_adc16_low_power_async_edma" name="adc16_low_power_async_edma" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/adc16_low_power_async_edma">
          <external path="boards/frdmk28f/demo_apps/adc16_low_power_async_edma" type="xml">
            <files mask="adc16_low_power_async_edma.xml"/>
          </external>
        </example>
        <example id="frdmk28f_adc16_low_power_peripheral" name="adc16_low_power_peripheral" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/adc16_low_power_peripheral">
          <external path="boards/frdmk28f/demo_apps/adc16_low_power_peripheral" type="xml">
            <files mask="adc16_low_power_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk28f_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/adc16" path="boards/frdmk28f/driver_examples/adc16/polling">
          <external path="boards/frdmk28f/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling.xml"/>
          </external>
        </example>
        <example id="frdmk28f_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/bubble">
          <external path="boards/frdmk28f/demo_apps/bubble" type="xml">
            <files mask="bubble.xml"/>
          </external>
        </example>
        <example id="frdmk28f_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/bubble_peripheral">
          <external path="boards/frdmk28f/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/cmp" path="boards/frdmk28f/driver_examples/cmp/interrupt">
          <external path="boards/frdmk28f/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/cmp" path="boards/frdmk28f/driver_examples/cmp/polling">
          <external path="boards/frdmk28f/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_dspi_edma_b2b_transfer_master" name="cmsis_dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/dspi" path="boards/frdmk28f/cmsis_driver_examples/dspi/edma_b2b_transfer/master">
          <external path="boards/frdmk28f/cmsis_driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_dspi_edma_b2b_transfer_slave" name="cmsis_dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/dspi" path="boards/frdmk28f/cmsis_driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="boards/frdmk28f/cmsis_driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_dspi_int_b2b_transfer_master" name="cmsis_dspi_int_b2b_transfer_master" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/dspi" path="boards/frdmk28f/cmsis_driver_examples/dspi/int_b2b_transfer/master">
          <external path="boards/frdmk28f/cmsis_driver_examples/dspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_dspi_int_b2b_transfer_slave" name="cmsis_dspi_int_b2b_transfer_slave" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/dspi" path="boards/frdmk28f/cmsis_driver_examples/dspi/int_b2b_transfer/slave">
          <external path="boards/frdmk28f/cmsis_driver_examples/dspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_i2c_edma_b2b_transfer_master" name="cmsis_i2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmk28f/cmsis_driver_examples/i2c/edma_b2b_transfer/master">
          <external path="boards/frdmk28f/cmsis_driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_i2c_edma_b2b_transfer_slave" name="cmsis_i2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmk28f/cmsis_driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="boards/frdmk28f/cmsis_driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_i2c_int_b2b_transfer_master" name="cmsis_i2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmk28f/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/frdmk28f/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_i2c_int_b2b_transfer_slave" name="cmsis_i2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmk28f/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/frdmk28f/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_i2c_read_accel_value_transfer" name="cmsis_i2c_read_accel_value_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_read_accel_value example shows how to use CMSIS I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmk28f/cmsis_driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmk28f/cmsis_driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="cmsis_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/lpuart" path="boards/frdmk28f/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/frdmk28f/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="cmsis_driver_examples/lpuart" path="boards/frdmk28f/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmk28f/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/crc">
          <external path="boards/frdmk28f/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/dac_adc">
          <external path="boards/frdmk28f/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dac_adc_peripheral" name="dac_adc_peripheral" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/dac_adc_peripheral">
          <external path="boards/frdmk28f/demo_apps/dac_adc_peripheral" type="xml">
            <files mask="dac_adc_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dac" path="boards/frdmk28f/driver_examples/dac/basic">
          <external path="boards/frdmk28f/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dac" path="boards/frdmk28f/driver_examples/dac/buffer_interrupt">
          <external path="boards/frdmk28f/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dac_continuous_pdb_edma" name="dac_continuous_pdb_edma" brief="The demo shows how to use the PDB to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PDB is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.while read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dac" path="boards/frdmk28f/driver_examples/dac/continuous_pdb_edma">
          <external path="boards/frdmk28f/driver_examples/dac/continuous_pdb_edma" type="xml">
            <files mask="dac_continuous_pdb_edma.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_audio_generator_bm" name="dev_audio_generator_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_audio_generator/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_audio_generator/bm" type="xml">
            <files mask="dev_audio_generator_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_audio_generator_lite_bm" name="dev_audio_generator_lite_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_audio_generator_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_audio_generator_lite/bm" type="xml">
            <files mask="dev_audio_generator_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_cdc_vcom_bm" name="dev_cdc_vcom_bm" brief="The Virtual COM project is enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_cdc_vcom/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_cdc_vcom/bm" type="xml">
            <files mask="dev_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_cdc_vcom_lite_bm" name="dev_cdc_vcom_lite_bm" brief="The Virtual COM project enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_cdc_vcom_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_cdc_msc_bm" name="dev_composite_cdc_msc_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted.." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_msc/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_msc/bm" type="xml">
            <files mask="dev_composite_cdc_msc_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_cdc_msc_lite_bm" name="dev_composite_cdc_msc_lite_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_msc_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_msc_lite/bm" type="xml">
            <files mask="dev_composite_cdc_msc_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_cdc_vcom_cdc_vcom_bm" name="dev_composite_cdc_vcom_cdc_vcom_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_cdc_vcom_cdc_vcom_lite_bm" name="dev_composite_cdc_vcom_cdc_vcom_lite_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_hid_audio_bm" name="dev_composite_hid_audio_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_hid_audio/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_hid_audio/bm" type="xml">
            <files mask="dev_composite_hid_audio_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_hid_audio_lite_bm" name="dev_composite_hid_audio_lite_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_hid_audio_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_hid_audio_lite/bm" type="xml">
            <files mask="dev_composite_hid_audio_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_hid_mouse_hid_keyboard_bm" name="dev_composite_hid_mouse_hid_keyboard_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_composite_hid_mouse_hid_keyboard_lite_bm" name="dev_composite_hid_mouse_hid_keyboard_lite_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_hid_generic_bm" name="dev_hid_generic_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_hid_generic/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_hid_generic/bm" type="xml">
            <files mask="dev_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_hid_generic_lite_bm" name="dev_hid_generic_lite_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_hid_generic_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_hid_generic_lite/bm" type="xml">
            <files mask="dev_hid_generic_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_hid_mouse_bm" name="dev_hid_mouse_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_hid_mouse/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_hid_mouse/bm" type="xml">
            <files mask="dev_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_hid_mouse_lite_bm" name="dev_hid_mouse_lite_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_hid_mouse_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_msc_ramdisk_bm" name="dev_msc_ramdisk_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_msc_ramdisk/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_msc_ramdisk/bm" type="xml">
            <files mask="dev_msc_ramdisk_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_msc_ramdisk_lite_bm" name="dev_msc_ramdisk_lite_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_msc_ramdisk_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_msc_ramdisk_lite/bm" type="xml">
            <files mask="dev_msc_ramdisk_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_phdc_weighscale_bm" name="dev_phdc_weighscale_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_phdc_weighscale/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_phdc_weighscale/bm" type="xml">
            <files mask="dev_phdc_weighscale_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_phdc_weighscale_lite_bm" name="dev_phdc_weighscale_lite_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_phdc_weighscale_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_phdc_weighscale_lite/bm" type="xml">
            <files mask="dev_phdc_weighscale_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_printer_virtual_plain_text_bm" name="dev_printer_virtual_plain_text_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_printer_virtual_plain_text/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_printer_virtual_plain_text/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_printer_virtual_plain_text_lite_bm" name="dev_printer_virtual_plain_text_lite_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_printer_virtual_plain_text_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_printer_virtual_plain_text_lite/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_suspend_resume_hid_mouse_bm" name="dev_suspend_resume_hid_mouse_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_suspend_resume_device_hid_mouse/bm">
          <external path="boards/frdmk28f/usb_examples/usb_suspend_resume_device_hid_mouse/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_suspend_resume_hid_mouse_lite_bm" name="dev_suspend_resume_hid_mouse_lite_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_video_virtual_camera_bm" name="dev_video_virtual_camera_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_video_virtual_camera/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_video_virtual_camera/bm" type="xml">
            <files mask="dev_video_virtual_camera_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dev_video_virtual_camera_lite_bm" name="dev_video_virtual_camera_lite_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_device_video_virtual_camera_lite/bm">
          <external path="boards/frdmk28f/usb_examples/usb_device_video_virtual_camera_lite/bm" type="xml">
            <files mask="dev_video_virtual_camera_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_edma_b2b_transfer_master" name="dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/edma_b2b_transfer/master">
          <external path="boards/frdmk28f/driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="dspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_edma_b2b_transfer_slave" name="dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="dspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_half_duplex_edma_master" name="dspi_half_duplex_edma_master" brief="The dspi_half_duplex_edma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sendsa piece of data to slave, and receive a piece of data from slave. This example checks if the data received fromslave is correct.Besides, master will transfer in EDMA way. " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/edma/master">
          <external path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/edma/master" type="xml">
            <files mask="dspi_half_duplex_edma_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_half_duplex_edma_slave" name="dspi_half_duplex_edma_slave" brief="The dspi_half_duplex_edma_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses edma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/edma/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/edma/slave" type="xml">
            <files mask="dspi_half_duplex_edma_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_half_duplex_int_master" name="dspi_half_duplex_int_master" brief="The dspi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer in interrupt way. " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/int/master">
          <external path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/int/master" type="xml">
            <files mask="dspi_half_duplex_int_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_half_duplex_int_slave" name="dspi_half_duplex_int_slave" brief="The dspi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/int/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/int/slave" type="xml">
            <files mask="dspi_half_duplex_int_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_half_duplex_polling_master" name="dspi_half_duplex_polling_master" brief="The dspi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends apiece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. Besides, master will transfer in polling way. " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/polling/master">
          <external path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/polling/master" type="xml">
            <files mask="dspi_half_duplex_polling_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_half_duplex_polling_slave" name="dspi_half_duplex_polling_slave" brief="The dspi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/polling/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/half_duplex_transfer/polling/slave" type="xml">
            <files mask="dspi_half_duplex_polling_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_interrupt" name="dspi_interrupt" brief="The dspi_interrupt example shows how to use DSPI driver in interrupt way:In this example , one dspi instance used as DSPI master and another dspi instance used as DSPI slave in the same board.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/interrupt">
          <external path="boards/frdmk28f/driver_examples/dspi/interrupt" type="xml">
            <files mask="dspi_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_interrupt_b2b_master" name="dspi_interrupt_b2b_master" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_master.c' includes the DSPI master code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b/master">
          <external path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b/master" type="xml">
            <files mask="dspi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_interrupt_b2b_slave" name="dspi_interrupt_b2b_slave" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the DSPI slave code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b/slave" type="xml">
            <files mask="dspi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_interrupt_b2b_transfer_master" name="dspi_interrupt_b2b_transfer_master" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b_transfer/master">
          <external path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_interrupt_b2b_transfer_slave" name="dspi_interrupt_b2b_transfer_slave" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_polling_b2b_transfer_master" name="dspi_polling_b2b_transfer_master" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/polling_b2b_transfer/master">
          <external path="boards/frdmk28f/driver_examples/dspi/polling_b2b_transfer/master" type="xml">
            <files mask="dspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_dspi_polling_b2b_transfer_slave" name="dspi_polling_b2b_transfer_slave" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/dspi" path="boards/frdmk28f/driver_examples/dspi/polling_b2b_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/dspi/polling_b2b_transfer/slave" type="xml">
            <files mask="dspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/ecompass">
          <external path="boards/frdmk28f/demo_apps/ecompass" type="xml">
            <files mask="ecompass.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/ecompass_peripheral">
          <external path="boards/frdmk28f/demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk28f_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/edma" path="boards/frdmk28f/driver_examples/edma/memory_to_memory">
          <external path="boards/frdmk28f/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="frdmk28f_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/edma" path="boards/frdmk28f/driver_examples/edma/scatter_gather">
          <external path="boards/frdmk28f/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/ewm">
          <external path="boards/frdmk28f/driver_examples/ewm" type="xml">
            <files mask="ewm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_i2c_interrupt_i2c_transfer" name="flexio_i2c_interrupt_i2c_transfer" brief="The flexio_i2c_interrupt example shows how to use flexio i2c master driver in interrupt way:In this example, a flexio simulated i2c master connect to an I2C slave." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/i2c/interrupt_i2c_transfer">
          <external path="boards/frdmk28f/driver_examples/flexio/i2c/interrupt_i2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_i2c_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_mcu_lcd" name="flexio_mcu_lcd" brief="The FlexIO MCU LCD demo application demonstrates how to use SDK FlexIO to driveMCU interface LCD.The example displays one picture and an arrow at the right bottom of the screen.When press the arrow, a new picture is shown.The project has provide the source code of the pictures (pictures.c), you canmodify and re-generate the pictures.bin. For example, the pictures.bin could begenerated using armgcc commands:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~arm-none-eabi-gcc -c pictures.c -DBUILD_PIC_BINarm-none-eabi-objdump -O binary pictures.o pictures.bin~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/flexio_mcu_lcd">
          <external path="boards/frdmk28f/demo_apps/flexio_mcu_lcd" type="xml">
            <files mask="flexio_mcu_lcd.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/pwm">
          <external path="boards/frdmk28f/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_spi_edma_dspi_transfer_master" name="flexio_spi_edma_dspi_transfer_master" brief="The flexio_spi_master_edma_dspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a dspi slave ." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/spi/edma_dspi_transfer/master">
          <external path="boards/frdmk28f/driver_examples/flexio/spi/edma_dspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_dspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_spi_edma_dspi_transfer_slave" name="flexio_spi_edma_dspi_transfer_slave" brief="The flexio_spi_slave_edma_dspi_master example shows how to use flexio spi slave driver in dma way:In this example, a flexio simulated slave connect to a dspi master." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/spi/edma_dspi_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/flexio/spi/edma_dspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_dspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_spi_int_dspi_transfer_master" name="flexio_spi_int_dspi_transfer_master" brief="The flexio_spi_master_interrupt_dspi_slave example shows how to use flexio spi master driver in interrupt way:In this example, a flexio simulated master connect to a dspi slave ." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/spi/int_dspi_transfer/master">
          <external path="boards/frdmk28f/driver_examples/flexio/spi/int_dspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_dspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_spi_int_dspi_transfer_slave" name="flexio_spi_int_dspi_transfer_slave" brief="The flexio_spi_slave_interrupt_dspi_master example shows how to use flexio spi slave driver in interrupt way:In this example, a flexio simulated slave connect to a dspi master." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/spi/int_dspi_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/flexio/spi/int_dspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_dspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/uart/edma_transfer">
          <external path="boards/frdmk28f/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/uart/int_rb_transfer">
          <external path="boards/frdmk28f/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/uart/interrupt_transfer">
          <external path="boards/frdmk28f/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flexio" path="boards/frdmk28f/driver_examples/flexio/uart/polling_transfer">
          <external path="boards/frdmk28f/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/combine_pwm">
          <external path="boards/frdmk28f/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/dual_edge_capture">
          <external path="boards/frdmk28f/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/input_capture">
          <external path="boards/frdmk28f/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/output_compare">
          <external path="boards/frdmk28f/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/pwm_twochannel">
          <external path="boards/frdmk28f/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_quad_decoder" name="ftm_quad_decoder" brief="This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/ftm_quad_decoder">
          <external path="boards/frdmk28f/demo_apps/ftm_quad_decoder" type="xml">
            <files mask="ftm_quad_decoder.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/simple_pwm">
          <external path="boards/frdmk28f/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/ftm" path="boards/frdmk28f/driver_examples/ftm/timer">
          <external path="boards/frdmk28f/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/gpio" path="boards/frdmk28f/driver_examples/gpio/input_interrupt">
          <external path="boards/frdmk28f/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/gpio" path="boards/frdmk28f/driver_examples/gpio/led_output">
          <external path="boards/frdmk28f/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="frdmk28f_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/hello_world">
          <external path="boards/frdmk28f/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="frdmk28f_hello_world_qspi" name="hello_world_qspi" brief="The Hello World QSPI demo application provides a sanity check for new SDK build environments and board bring up. Itprints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is to show how tocompile SDK applications to run and boot from QSPI flash or a QSPI alias region.This example can generate two different demos using a different linker file and a startup file:Program boot from QSPI region.Program boot from QSPI alias region (if the chip supports QSPI alias region)." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/hello_world_qspi">
          <external path="boards/frdmk28f/demo_apps/hello_world_qspi" type="xml">
            <files mask="hello_world_qspi.xml"/>
          </external>
        </example>
        <example id="frdmk28f_hello_world_qspi_alias" name="hello_world_qspi_alias" brief="The Hello World QSPI demo application provides a sanity check for new SDK build environments and board bring up. Itprints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is to show how tocompile SDK applications to run and boot from QSPI flash or a QSPI alias region.This example can generate two different demos using a different linker file and a startup file:Program boot from QSPI region.Program boot from QSPI alias region (if the chip supports QSPI alias region)." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/hello_world_qspi_alias">
          <external path="boards/frdmk28f/demo_apps/hello_world_qspi_alias" type="xml">
            <files mask="hello_world_qspi_alias.xml"/>
          </external>
        </example>
        <example id="frdmk28f_hello_world_virtual_com" name="hello_world_virtual_com" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/hello_world_virtual_com">
          <external path="boards/frdmk28f/demo_apps/hello_world_virtual_com" type="xml">
            <files mask="hello_world_virtual_com.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_audio_speaker_bm" name="host_audio_speaker_bm" brief="The Host Audio example supports the audio speaker device. @n The application prints the audio speaker information when the USB speaker device is attached." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_audio_speaker/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_audio_speaker/bm" type="xml">
            <files mask="host_audio_speaker_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_cdc_bm" name="host_cdc_bm" brief="The host CDC project is a simple demonstration program based on the MCUXpresso SDK. It enumerates a COM port and echoes back the data from the UART." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_cdc/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_cdc/bm" type="xml">
            <files mask="host_cdc_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_hid_generic_bm" name="host_hid_generic_bm" brief="This application implements a simple HID interrupt in-and-out endpoint bi-directional communication.The application sends one test string to the device. The device receives and sends back the string. The application receives the string and prints it." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_hid_generic/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_hid_generic/bm" type="xml">
            <files mask="host_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_hid_mouse_bm" name="host_hid_mouse_bm" brief="The application supports the mouse device. It prints the mouse operation when the mouse device is attached." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_hid_mouse/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_hid_mouse/bm" type="xml">
            <files mask="host_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_hid_mouse_keyboard_bm" name="host_hid_mouse_keyboard_bm" brief="This example supports the mouse device and the keyboard device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_hid_mouse_keyboard/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_hid_mouse_keyboard/bm" type="xml">
            <files mask="host_hid_mouse_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_msd_command_bm" name="host_msd_command_bm" brief="This Host MSD example supports the UFI and SCSI U-disk device. The application prints the attached device information when the U-disk device is attached.The application executes UFI commands to test the attached device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_msd_command/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_msd_command/bm" type="xml">
            <files mask="host_msd_command_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_msd_fatfs_bm" name="host_msd_fatfs_bm" brief="This Host FatFs example supports UFI and SCSI U-disk device. The application prints the attached device information when U-disk device is attached.The application executes some FatFs APIs to test the attached device." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_msd_fatfs/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_msd_fatfs/bm" type="xml">
            <files mask="host_msd_fatfs_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_phdc_manager_bm" name="host_phdc_manager_bm" brief="The Host PHDC Manager Example is a simple demonstration program based on the MCUXpresso SDK.The application supports the USB weight scale device. It prints out the body mass and body mass index information when the USB weight scale device is attached." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_phdc_manager/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_phdc_manager/bm" type="xml">
            <files mask="host_phdc_manager_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_printer_plain_text_bm" name="host_printer_plain_text_bm" brief="The host printer example demonstrates how to get the status of the printer deviceand how to print a certain test string." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_host_printer_plain_text/bm">
          <external path="boards/frdmk28f/usb_examples/usb_host_printer_plain_text/bm" type="xml">
            <files mask="host_printer_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_host_suspend_resume_hid_mouse_bm" name="host_suspend_resume_hid_mouse_bm" brief="This is one example support suspend/resume." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_suspend_resume_host_hid_mouse/bm">
          <external path="boards/frdmk28f/usb_examples/usb_suspend_resume_host_hid_mouse/bm" type="xml">
            <files mask="host_suspend_resume_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_edma_b2b_transfer_master" name="i2c_edma_b2b_transfer_master" brief="The i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/edma_b2b_transfer/master">
          <external path="boards/frdmk28f/driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="i2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_edma_b2b_transfer_slave" name="i2c_edma_b2b_transfer_slave" brief="The i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="i2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_interrupt" name="i2c_interrupt" brief="The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/interrupt">
          <external path="boards/frdmk28f/driver_examples/i2c/interrupt" type="xml">
            <files mask="i2c_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/frdmk28f/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/frdmk28f/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/frdmk28f/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk28f_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/i2c" path="boards/frdmk28f/driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmk28f/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/led_blinky">
          <external path="boards/frdmk28f/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/lptmr">
          <external path="boards/frdmk28f/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_edma_rb_transfer" name="lpuart_edma_rb_transfer" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/edma_rb_transfer">
          <external path="boards/frdmk28f/driver_examples/lpuart/edma_rb_transfer" type="xml">
            <files mask="lpuart_edma_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/edma_transfer">
          <external path="boards/frdmk28f/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_hardware_flow_control" name="lpuart_hardware_flow_control" brief="The lpuart_hardware_flow_control Example project is to demonstrate usage of the hardware flow control function.This example will send data to itself(loopback), and hardware flow control will be enabled in the example.The CTS(clear-to-send) pin is for transmiter to check if receiver is ready, if the CTS pin is assert, transmiter startto send data. The RTS(request-to-send) is a pin for receiver to inform the transmiter if receiver is ready to receivedata. So, please connect RTS to CTS pin directly." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/hardware_flow_control">
          <external path="boards/frdmk28f/driver_examples/lpuart/hardware_flow_control" type="xml">
            <files mask="lpuart_hardware_flow_control.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/interrupt">
          <external path="boards/frdmk28f/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/frdmk28f/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmk28f/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/lpuart" path="boards/frdmk28f/driver_examples/lpuart/polling">
          <external path="boards/frdmk28f/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="frdmk28f_mcg_fei_blpi" name="mcg_fei_blpi" brief="The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/mcg" path="boards/frdmk28f/driver_examples/mcg/fei_blpi">
          <external path="boards/frdmk28f/driver_examples/mcg/fei_blpi" type="xml">
            <files mask="mcg_fei_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk28f_mcg_pee_blpe" name="mcg_pee_blpe" brief="The pee_bple example shows how to use MCG driver to change from PEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt; BLPE    Change back BLPE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/mcg" path="boards/frdmk28f/driver_examples/mcg/pee_blpe">
          <external path="boards/frdmk28f/driver_examples/mcg/pee_blpe" type="xml">
            <files mask="mcg_pee_blpe.xml"/>
          </external>
        </example>
        <example id="frdmk28f_mcg_pee_blpi" name="mcg_pee_blpi" brief="The pee_bpli example shows how to use MCG driver to change from PEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt;FBE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FBE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/mcg" path="boards/frdmk28f/driver_examples/mcg/pee_blpi">
          <external path="boards/frdmk28f/driver_examples/mcg/pee_blpi" type="xml">
            <files mask="mcg_pee_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pdb_adc16_trigger" name="pdb_adc16_trigger" brief="The pdb_adc16_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would begenerated and sent to the ADC module.In this example, the ADC16 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/pdb" path="boards/frdmk28f/driver_examples/pdb/adc16_trigger">
          <external path="boards/frdmk28f/driver_examples/pdb/adc16_trigger" type="xml">
            <files mask="pdb_adc16_trigger.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pdb_dac_trigger" name="pdb_dac_trigger" brief="The pdb_dac_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's &quot;milestone&quot; and set the user-defined value for it.The DAC's &quot;milestone&quot; is called as &quot;interval&quot;. Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB, the buffer read pointer increases." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/pdb" path="boards/frdmk28f/driver_examples/pdb/dac_trigger">
          <external path="boards/frdmk28f/driver_examples/pdb/dac_trigger" type="xml">
            <files mask="pdb_dac_trigger.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/pdb" path="boards/frdmk28f/driver_examples/pdb/delay_interrupt">
          <external path="boards/frdmk28f/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/flash" path="boards/frdmk28f/driver_examples/flash/pflash">
          <external path="boards/frdmk28f/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pin_detect_hid_mouse_bm" name="pin_detect_hid_mouse_bm" brief="This pin detect HID example supports the mouse device. The application prints the operation information when the mouse device is attached or plugged in to the PC host." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_pin_detect_hid_mouse/bm">
          <external path="boards/frdmk28f/usb_examples/usb_pin_detect_hid_mouse/bm" type="xml">
            <files mask="pin_detect_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pin_detect_hid_msd_bm" name="pin_detect_hid_msd_bm" brief="This pin detect HID MSD example can become a HID mouse device or a MSD host that supports U-disk. The application prints the operation information when the U-disk is attached or is plugged into the PC host." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="usb_examples" path="boards/frdmk28f/usb_examples/usb_pin_detect_hid_msd/bm">
          <external path="boards/frdmk28f/usb_examples/usb_pin_detect_hid_msd/bm" type="xml">
            <files mask="pin_detect_hid_msd_bm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_pit" name="pit" brief="The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/pit">
          <external path="boards/frdmk28f/driver_examples/pit" type="xml">
            <files mask="pit.xml"/>
          </external>
        </example>
        <example id="frdmk28f_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/power_manager">
          <external path="boards/frdmk28f/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="frdmk28f_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/power_mode_switch">
          <external path="boards/frdmk28f/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="frdmk28f_qspi_edma_transfer" name="qspi_edma_transfer" brief="The qspi_edma example shows how to use qspi driver with EDMA:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/qspi" path="boards/frdmk28f/driver_examples/qspi/edma_transfer">
          <external path="boards/frdmk28f/driver_examples/qspi/edma_transfer" type="xml">
            <files mask="qspi_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_qspi_polling_transfer" name="qspi_polling_transfer" brief="The qspi_polling example shows how to use qspi driver with polling:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct.Notice: While do program, it is not suggested to make the flash write frequency bigger than the core clock frequency.In some tool chain's Debug version, this may cause core do not have enough speed to send data to flash.The flash write frequency equals to QSPI working frequency plus data line number. For example, if QSPI working in 48MHz,program command uses quad mode, the write frequency is 48MHz * 4 = 192MHz." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/qspi" path="boards/frdmk28f/driver_examples/qspi/polling_transfer">
          <external path="boards/frdmk28f/driver_examples/qspi/polling_transfer" type="xml">
            <files mask="qspi_polling_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/rtc">
          <external path="boards/frdmk28f/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="frdmk28f_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/rtc_func">
          <external path="boards/frdmk28f/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="frdmk28f_sdramc" name="sdramc" brief="The sdramc example shows how to use SDRAM controller driver to initialize the external SDRAM chip.After the SDRAM initialization, SDRAM address access is very simple." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/sdramc">
          <external path="boards/frdmk28f/driver_examples/sdramc" type="xml">
            <files mask="sdramc.xml"/>
          </external>
        </example>
        <example id="frdmk28f_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="demo_apps" path="boards/frdmk28f/demo_apps/shell">
          <external path="boards/frdmk28f/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="frdmk28f_sysmpu" name="sysmpu" brief="The SYSMPU example defines protected/unprotected memory region for the core access.First, the SYSMPU will capture the hardware information and show it on theterminal. Then, a memory region is configured as the non-writable region. Thebus fault interrupt is enabled to report the memory protection interrupt eventfor this non-writable region. If an operation writes to this region, the busfault interrupt happens. Then the bus fault interrupt handler provides aprevention alert by outputting a message on terminal, then the write rightswill be given to this region for core access. After the write access enabled,the writing to the region becomes successful. When the bus fault happen, thedetails of the error information will be captured and printed on the terminal.This example provides the terminal input control to give the example show for several regions access test. Just press any key to the terminal when theterminal show &quot;Press any key to continue&quot;." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/sysmpu">
          <external path="boards/frdmk28f/driver_examples/sysmpu" type="xml">
            <files mask="sysmpu.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/combine_pwm">
          <external path="boards/frdmk28f/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/dual_edge_capture">
          <external path="boards/frdmk28f/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/input_capture">
          <external path="boards/frdmk28f/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/output_compare">
          <external path="boards/frdmk28f/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/pwm_twochannel">
          <external path="boards/frdmk28f/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/simple_pwm">
          <external path="boards/frdmk28f/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk28f_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/tpm" path="boards/frdmk28f/driver_examples/tpm/timer">
          <external path="boards/frdmk28f/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer.xml"/>
          </external>
        </example>
        <example id="frdmk28f_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/trng" path="boards/frdmk28f/driver_examples/trng/random">
          <external path="boards/frdmk28f/driver_examples/trng/random" type="xml">
            <files mask="trng_random.xml"/>
          </external>
        </example>
        <example id="frdmk28f_vref_example" name="vref_example" brief="In this example, the adc16 module is initiealized and used to measure the VREF output voltage. So, it cannot use interal VREF as the reference voltage. Then, user should configure the VREF output pin as the ADC16's sample input. When running the project, it will firstly measure the VREF output voltage within the default (factory) trim value. Then, it will measure the VREF output voltage under different trim value." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples/vref" path="boards/frdmk28f/driver_examples/vref">
          <external path="boards/frdmk28f/driver_examples/vref" type="xml">
            <files mask="vref_example.xml"/>
          </external>
        </example>
        <example id="frdmk28f_wdog" name="wdog" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode." toolchain="armgcc iar mcuxpresso mdk" compiler="compiler_armcc compiler_gcc compiler_iar" category="driver_examples" path="boards/frdmk28f/driver_examples/wdog">
          <external path="boards/frdmk28f/driver_examples/wdog" type="xml">
            <files mask="wdog.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MK28FN2M0xxx15" name="MK28F15" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MK28FN2M0xxx15" family="K2x" platform="Kinetis">
      <description>K28F: Kinetis® K28F 150 MHz, 1 MB SRAM Microcontrollers (MCUs) based on ARM® Cortex®-M4 Core</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="html">
          <specific>
            <content>The Kinetis K28F is a high performance 150 MHz ARM® Cortex®-M4 with FPU Microcontroller (MCU) which integrates 2 MB of embedded Flash, 1 MB of SRAM, dual.USB controllers (High-Speed and Full-Speed), an SDRAM controller, a QuadSPI interface and Power Management Unit with Core Voltage Bypass.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MK28FN2M0xxx15" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MK28FN2M0xxx15" name="PROGRAM_FLASH" addr="00000000" size="00200000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MK28FN2M0xxx15" name="SRAM_UPPER" addr="20000000" size="00040000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MK28FN2M0xxx15" name="SRAM_LOWER" addr="1ffc0000" size="00040000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="2048" ram_size_kb="512"/>
      <package id="MK28FN2M0VMI15" name="MK28FN2M0VMI15"/>
      <package id="MK28FN2M0CAU15R" name="MK28FN2M0CAU15R"/>
      <evaluation_boards>
        <evaluation_board name="frdmk28f"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MK28FN2M0xxx15" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MK28FN2M0xxx15" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MK28FN2M0xxx15" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MK28FN2M0xxx15">
              <driverBinary path="devices/MK28F15/mcuxpresso" type="binary">
                <files mask="FTFE_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk28f.MK28F15" name="frdmk28f" version="1.0.0" devices="MK28FN2M0xxx15" dependency="component.lists.MK28F15 component.lpuart_adapter.MK28F15 component.serial_manager.MK28F15 component.serial_manager_uart.MK28F15 device.MK28F15_CMSIS.MK28F15 device.MK28F15_startup.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.adc16.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.gpio.MK28F15 platform.drivers.i2c.MK28F15 platform.drivers.lpuart.MK28F15 platform.drivers.port.MK28F15 platform.drivers.rtc.MK28F15 platform.drivers.smc.MK28F15 utility.debug_console.MK28F15" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/frdmk28f/project_template" target_path="board/boards" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/frdmk28f/project_template" target_path="board/boards" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MK28F15" name="CMSIS" version="5.1.1" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USART_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USB_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK28F15 platform.Include_common.MK28F15" user_visible="true" type="CMSIS">
      <source path="CMSIS/Include" target_path="src" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="src" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" version="5.1.1" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="src" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK28F15" name="CAN" version="1.2.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" name="Common" version="5.1.1" devices="MK28FN2M0xxx15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK28F15" name="Ethernet" version="2.1.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK28F15" name="Ethernet_MAC" version="2.1.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK28F15" name="Ethernet_PHY" version="2.1.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK28F15" name="Flash" version="2.1.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK28F15" name="I2C" version="2.3.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK28F15" name="MCI" version="2.3.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK28F15" name="NAND" version="2.3.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK28F15" name="SAI" version="1.1.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK28F15" name="SPI" version="2.2.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK28F15" name="USART" version="2.3.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK28F15" name="USB" version="2.2.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK28F15" name="USB_Device" version="2.2.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USB_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK28F15" name="USB_Host" version="2.2.0" devices="MK28FN2M0xxx15" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USB_CMSISInclude.MK28F15" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MK28F15" name="CMSIS_Include_common" version="5.1.1" devices="MK28FN2M0xxx15" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MK28F15" name="CMSIS_Include_core_cm4" version="5.1.1" devices="MK28FN2M0xxx15" dependency="platform.Include_common.MK28F15" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
      </source>
    </component>
    <component id="project_template.MK28F15.MK28F15" name="MK28F15" version="1.0.0" devices="MK28FN2M0xxx15" dependency="component.lists.MK28F15 component.lpuart_adapter.MK28F15 component.serial_manager.MK28F15 component.serial_manager_uart.MK28F15 device.MK28F15_CMSIS.MK28F15 device.MK28F15_startup.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.adc16.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.gpio.MK28F15 platform.drivers.i2c.MK28F15 platform.drivers.lpuart.MK28F15 platform.drivers.port.MK28F15 platform.drivers.rtc.MK28F15 platform.drivers.smc.MK28F15 utility.debug_console.MK28F15" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MK28F15/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MK28F15/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MK28F15" name="RTE_Device" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MK28F15/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MK28F15" name="cmake_toolchain" version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="src" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.lists.MK28F15" name="lists" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="software_component">
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MK28F15" name="lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.lpuart.MK28F15" user_visible="true" type="utilities">
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager.MK28F15" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MK28FN2M0xxx15" dependency="component.lists.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MK28F15" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.lpuart.MK28F15" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc.MK28F15" name="serial_manager_usb_cdc" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 middleware.usb.device.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="abstraction_layer">
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb.h"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter" target_path="component/serial_manager/usb_cdc_adapter" type="src">
        <files mask="usb_device_descriptor.c"/>
        <files mask="usb_device_cdc_acm.c"/>
        <files mask="usb_device_class.c"/>
        <files mask="usb_device_ch9.c"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_descriptor.h"/>
        <files mask="usb_device_cdc_acm.h"/>
        <files mask="usb_device_class.h"/>
        <files mask="usb_device_ch9.h"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter/inf" target_path="src" type="other">
        <files mask="cdc.cat"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter/inf" target_path="src" type="configuration">
        <files mask="fsl_ucwxp.inf"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.frdmk28f.MK28F15" name="frdmk28f" version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="abstraction_layer">
      <source path="boards/frdmk28f/component_examples/config" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="device.MK28F15_CMSIS.MK28F15" name="MK28F15_CMSIS" version="1.0.0" devices="MK28FN2M0xxx15" dependency="platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15" user_visible="true" type="CMSIS_Include">
      <source path="devices/MK28F15" target_path="device" type="c_include">
        <files mask="MK28F15.h"/>
        <files mask="MK28F15_features.h"/>
        <files mask="fsl_device_registers.h"/>
        <files mask="system_MK28F15.h"/>
      </source>
      <source path="devices/MK28F15" target_path="device" type="src">
        <files mask="system_MK28F15.c"/>
      </source>
    </component>
    <component id="device.MK28F15_debugger.MK28F15" name="MK28F15_debugger" version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="debugger">
      <source path="devices/MK28F15" target_path="src" type="xml">
        <files mask="MK28F15.xml"/>
      </source>
    </component>
    <component id="platform.devices.MK28F15_linker.MK28F15" name="MK28F15_linker" version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="linker">
      <source toolchain="mdk" path="devices/MK28F15/arm" target_path="src" type="linker">
        <files mask="MK28FN2M0xxx15_flash.scf"/>
        <files mask="MK28FN2M0xxx15_ram.scf"/>
      </source>
      <source toolchain="armgcc" path="devices/MK28F15/gcc" target_path="src" type="linker">
        <files mask="MK28FN2M0xxx15_flash.ld"/>
        <files mask="MK28FN2M0xxx15_ram.ld"/>
      </source>
      <source toolchain="iar" path="devices/MK28F15/iar" target_path="src" type="linker">
        <files mask="MK28FN2M0xxx15_flash.icf"/>
        <files mask="MK28FN2M0xxx15_ram.icf"/>
      </source>
    </component>
    <component id="device.MK28F15_startup.MK28F15" name="MK28F15_startup" version="1.0.0" devices="MK28FN2M0xxx15" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="mdk" path="devices/MK28F15/arm" target_path="startup" type="asm_include">
        <files mask="startup_MK28F15.s"/>
      </source>
      <source toolchain="armgcc" path="devices/MK28F15/gcc" target_path="startup" type="asm_include">
        <files mask="startup_MK28F15.S"/>
      </source>
      <source toolchain="iar" path="devices/MK28F15/iar" target_path="startup" type="asm_include">
        <files mask="startup_MK28F15.s"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MK28F15/mcuxpresso" target_path="startup" type="src_c">
        <files mask="startup_mk28f15.c"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MK28F15/mcuxpresso" target_path="startup" type="src_cpp">
        <files mask="startup_mk28f15.cpp"/>
      </source>
    </component>
    <component id="docs.MK28F15.MK28F15" name="MK28F15" version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="documentation">
      <source path="docs" target_path="src" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes_MK28F15.pdf"/>
      </source>
    </component>
    <component id="docs.images.MK28F15" name="images" version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="documentation">
      <source path="docs/images" target_path="src" type="image">
        <files mask="FRDM-K28F.gif"/>
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="driver.IS42SM16800H.MK28F15" name="IS42SM16800H" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.sdramc.MK28F15" user_visible="true" type="board_component">
      <source path="components/IS42SM16800H" target_path="drivers" type="src">
        <files mask="fsl_sdram.c"/>
      </source>
      <source path="components/IS42SM16800H" target_path="drivers" type="c_include">
        <files mask="fsl_sdram.h"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MK28F15" name="adc" brief="ADC16 Driver" version="2.0.2" full_name="ADC16 Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
    </component>
    <component id="platform.drivers.cache_lmem.MK28F15" name="cache" brief="CACHE Driver" version="2.0.1" full_name="CACHE Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MK28F15" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp.MK28F15" name="cmp" brief="CMP Driver" version="2.0.1" full_name="CMP Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi_cmsis.MK28F15" name="dspi_cmsis" brief="DSPI CMSIS Driver" version="2.0.0" devices="MK28FN2M0xxx15" dependency="RTE_Device.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.dspi.MK28F15 platform.drivers.dspi_edma.MK28F15 platform.drivers.edma.MK28F15" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK28F15/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi_cmsis.c"/>
      </source>
      <source path="devices/MK28F15/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_cmsis_edma.MK28F15" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.2" devices="MK28FN2M0xxx15" dependency="RTE_Device.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.i2c.MK28F15 platform.drivers.i2c_edma.MK28F15" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK28F15/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/MK28F15/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_edma.MK28F15" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" devices="MK28FN2M0xxx15" dependency="RTE_Device.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK28F15 platform.CMSIS_Driver_Include.USART_CMSISInclude.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.lpuart.MK28F15 platform.drivers.lpuart_edma.MK28F15" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK28F15/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MK28F15/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmt.MK28F15" name="cmt" brief="CMT Driver" version="2.0.2" full_name="CMT Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmt.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmt.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MK28F15" name="common" brief="COMMON Driver" version="2.1.0" full_name="COMMON Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.crc.MK28F15" name="crc" brief="CRC Driver" version="2.0.1" full_name="CRC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac.MK28F15" name="dac" brief="DAC Driver" version="2.0.1" full_name="DAC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
    </component>
    <component id="driver.dbi.MK28F15" name="dbi" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="abstraction_layer">
      <source path="components/video/display/dbi" target_path="video" type="c_include">
        <files mask="fsl_dbi.h"/>
      </source>
    </component>
    <component id="driver.dbi_flexio.MK28F15" name="dbi_flexio" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 driver.dbi.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15 platform.drivers.flexio_mculcd.MK28F15" user_visible="true" type="abstraction_layer">
      <source path="components/video/display/dbi/flexio" target_path="video" type="src">
        <files mask="fsl_dbi_flexio.c"/>
      </source>
      <source path="components/video/display/dbi/flexio" target_path="video" type="c_include">
        <files mask="fsl_dbi_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MK28F15" name="dmamux" brief="DMAMUX Driver" version="2.0.2" full_name="DMAMUX Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi.MK28F15" name="dspi" brief="DSPI Driver" version="2.2.1" full_name="DSPI Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi_edma.MK28F15" name="dspi_edma" brief="DSPI Driver" version="2.2.1" full_name="DSPI_EDMA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.dspi.MK28F15 platform.drivers.edma.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.edma.MK28F15" name="edma" brief="EDMA Driver" version="2.1.8" full_name="EDMA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ewm.MK28F15" name="ewm" brief="EWM Driver" version="2.0.1" full_name="EWM Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MK28F15" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexbus.MK28F15" name="flexbus" brief="FLEXBUS Driver" version="2.1.0" full_name="FLEXBUS Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexbus.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexbus.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MK28F15" name="flexio" brief="FLEXIO Driver" version="2.0.2" full_name="FLEXIO Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_camera.MK28F15" name="flexio_camera" brief="FLEXIO Driver" version="2.1.2" full_name="FLEXIO CAMERA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_camera.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_camera.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_camera_edma.MK28F15" name="flexio_camera_edma" brief="FLEXIO CAMERA EDMA Driver" version="2.1.2" full_name="FLEXIO Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.flexio.MK28F15 platform.drivers.flexio_camera.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_camera_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_camera_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MK28F15" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.1.8" full_name="FLEXIO I2C Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s.MK28F15" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.1.5" full_name="FLEXIO I2S Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s_edma.MK28F15" name="flexio_i2s_edma" brief="FLEXIO I2S EDMA Driver" version="2.1.5" full_name="FLEXIO I2S EDMA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.flexio.MK28F15 platform.drivers.flexio_i2s.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_mculcd.MK28F15" name="flexio_mculcd" brief="FLEXIO MCULCD Driver" version="2.0.2" full_name="FLEXIO MCULCD Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_mculcd.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_mculcd.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_mculcd_edma.MK28F15" name="flexio_mculcd_edma" brief="FLEXIO MCULCD EDMA Driver" version="2.0.2" full_name="FLEXIO MCULCD EDMA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.flexio.MK28F15 platform.drivers.flexio_mculcd.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_mculcd_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_mculcd_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi.MK28F15" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.1.3" full_name="FLEXIO SPI Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MK28F15" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.1.3" full_name="FLEXIO SPI EDMA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.flexio.MK28F15 platform.drivers.flexio_spi.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MK28F15" name="flexio_uart" brief="FLEXIO UART Driver" version="2.1.5" full_name="FLEXIO UART Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.flexio.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MK28F15" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.1.5" full_name="FLEXIO UART EDMA Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.flexio.MK28F15 platform.drivers.flexio_uart.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
    </component>
    <component id="driver.ft5406.MK28F15" name="ft5406" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="false" type="board_component">
      <source path="components/ft5406" target_path="touchpanel" type="src">
        <files mask="fsl_ft5406.c"/>
      </source>
      <source path="components/ft5406" target_path="touchpanel" type="c_include">
        <files mask="fsl_ft5406.h"/>
      </source>
    </component>
    <component id="platform.drivers.ftm.MK28F15" name="ftm" brief="FTM Driver" version="2.1.1" full_name="FTM Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
    </component>
    <component id="driver.fxos8700cq.MK28F15" name="fxos8700cq" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="board_component">
      <source path="components/fxos8700cq" target_path="accel" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source path="components/fxos8700cq" target_path="accel" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MK28F15" name="gpio" brief="GPIO Driver" version="2.3.2" full_name="GPIO Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c.MK28F15" name="i2c" brief="I2C Driver" version="2.0.7" full_name="I2C Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_edma.MK28F15" name="i2c_edma" brief="I2C Driver" version="2.0.7" full_name="I2C Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.i2c.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.llwu.MK28F15" name="llwu" brief="LLWU Driver" version="2.0.2" full_name="LLWU Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
    </component>
    <component id="platform.drivers.lmem.MK28F15" name="lmem" brief="LMEM Driver" version="2.1.0" full_name="LMEM Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_lmem_cache.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lmem_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MK28F15" name="lptmr" brief="LPTMR Driver" version="2.0.2" full_name="LPTMR Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MK28F15" name="lpuart" brief="LPUART Driver" version="2.2.7" full_name="LPUART Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_edma.MK28F15" name="lpuart_edma" brief="LPUART Driver" version="2.2.7" full_name="LPUART Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.lpuart.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdb.MK28F15" name="pdb" brief="PDB Driver" version="2.0.2" full_name="PDB Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
    </component>
    <component id="platform.drivers.pit.MK28F15" name="pit" brief="PIT Driver" version="2.0.2" full_name="PIT Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MK28F15" name="pmc" brief="PMC Driver" version="2.0.1" full_name="PMC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MK28F15" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.qspi.MK28F15" name="qspi" brief="QSPI Driver" version="2.2.0" full_name="QSPI Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_qspi.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_qspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.qspi_edma.MK28F15" name="qspi_edma" brief="QSPI Driver" version="2.0.2" full_name="QSPI Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.qspi.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_qspi_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_qspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MK28F15" name="rcm" brief="RCM Driver" version="2.0.2" full_name="RCM Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MK28F15" name="rtc" brief="RTC Driver" version="2.2.0" full_name="RTC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MK28F15" name="sai" brief="SAI Driver" version="2.2.1" full_name="SAI Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_edma.MK28F15" name="sai_edma" brief="SAI Driver" version="2.2.0" full_name="SAI Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 platform.drivers.dmamux.MK28F15 platform.drivers.edma.MK28F15 platform.drivers.sai.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.sdhc.MK28F15" name="sdhc" brief="SDHC Driver" version="2.1.9" full_name="SDHC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_sdhc.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sdhc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sdramc.MK28F15" name="sdramc" brief="SDRAMC Driver" version="2.1.0" full_name="SDRAMC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_sdramc.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sdramc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MK28F15" name="sim" brief="SIM Driver" version="2.1.0" full_name="SIM Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MK28F15" name="smc" brief="SMC Driver" version="2.0.5" full_name="SMC Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="driver.ssd1963.MK28F15" name="ssd1963" version="1.1.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 driver.dbi.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="board_component">
      <source path="components/ssd1963" target_path="lcdc" type="src">
        <files mask="fsl_ssd1963.c"/>
      </source>
      <source path="components/ssd1963" target_path="lcdc" type="c_include">
        <files mask="fsl_ssd1963.h"/>
      </source>
    </component>
    <component id="platform.drivers.sysmpu.MK28F15" name="sysmpu" brief="SYSMPU Driver" version="2.2.1" full_name="SYSMPU Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_sysmpu.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sysmpu.h"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MK28F15" name="tpm" brief="TPM Driver" version="2.0.4" full_name="TPM Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
    </component>
    <component id="platform.drivers.trng.MK28F15" name="trng" brief="TRNG Driver" version="2.0.4" full_name="TRNG Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
    </component>
    <component id="platform.drivers.vref.MK28F15" name="vref" brief="VREF Driver" version="2.1.1" full_name="VREF Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog.MK28F15" name="wdog" brief="WDOG Driver" version="2.0.0" full_name="WDOG Driver" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="driver">
      <source path="devices/MK28F15/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source path="devices/MK28F15/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MK28F15" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MK28FN2M0xxx15" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.fatfs.MK28F15" name="fatfs" brief="FatFs" version="0.13.1" revision="0" full_name="FAT File System stack" devices="MK28FN2M0xxx15" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source" target_path="fatfs/fatfs_source" type="src">
        <files mask="diskio.c"/>
        <files mask="ff.c"/>
        <files mask="ffsystem.c"/>
        <files mask="ffunicode.c"/>
      </source>
      <source path="middleware/fatfs/source" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="diskio.h"/>
        <files mask="ff.h"/>
        <files mask="integer.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.nand.MK28F15" name="nand" brief="FatFs_NAND" version="0.13" full_name="Fatfs NAND layer" devices="MK28FN2M0xxx15" dependency="middleware.fatfs.MK28F15" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_nand_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_nand_disk.c"/>
      </source>
      <source path="middleware/fatfs/source/fsl_nand_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_nand_disk.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.ram.MK28F15" name="ram" brief="FatFs_RAM" version="0.13" full_name="Fatfs RAM layer" devices="MK28FN2M0xxx15" dependency="middleware.fatfs.MK28F15" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_ram_disk.c"/>
      </source>
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_ram_disk.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.unused_files.MK28F15" name="unused_files" brief="fatfs files unused by projects" version="3.9.8" revision="3" devices="MK28FN2M0xxx15" user_visible="false" type="other">
      <source exclude="true" path="middleware/fatfs" target_path="fatfs/fatfs_files" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
        <files mask="LICENSE.txt"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents" target_path="fatfs/fatfs_files" type="doc">
        <files mask="00index_e.html"/>
        <files mask="css_e.css"/>
        <files mask="updates.txt"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/doc" target_path="fatfs/fatfs_files" type="doc">
        <files mask="appnote.html"/>
        <files mask="chdir.html"/>
        <files mask="chdrive.html"/>
        <files mask="chmod.html"/>
        <files mask="close.html"/>
        <files mask="closedir.html"/>
        <files mask="config.html"/>
        <files mask="dinit.html"/>
        <files mask="dioctl.html"/>
        <files mask="dread.html"/>
        <files mask="dstat.html"/>
        <files mask="dwrite.html"/>
        <files mask="eof.html"/>
        <files mask="error.html"/>
        <files mask="expand.html"/>
        <files mask="fattime.html"/>
        <files mask="fdisk.html"/>
        <files mask="filename.html"/>
        <files mask="findfirst.html"/>
        <files mask="findnext.html"/>
        <files mask="forward.html"/>
        <files mask="getcwd.html"/>
        <files mask="getfree.html"/>
        <files mask="getlabel.html"/>
        <files mask="gets.html"/>
        <files mask="lseek.html"/>
        <files mask="mkdir.html"/>
        <files mask="mkfs.html"/>
        <files mask="mount.html"/>
        <files mask="open.html"/>
        <files mask="opendir.html"/>
        <files mask="printf.html"/>
        <files mask="putc.html"/>
        <files mask="puts.html"/>
        <files mask="rc.html"/>
        <files mask="read.html"/>
        <files mask="readdir.html"/>
        <files mask="rename.html"/>
        <files mask="sdir.html"/>
        <files mask="setcp.html"/>
        <files mask="setlabel.html"/>
        <files mask="sfatfs.html"/>
        <files mask="sfile.html"/>
        <files mask="sfileinfo.html"/>
        <files mask="size.html"/>
        <files mask="stat.html"/>
        <files mask="sync.html"/>
        <files mask="tell.html"/>
        <files mask="truncate.html"/>
        <files mask="unlink.html"/>
        <files mask="utime.html"/>
        <files mask="write.html"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="src">
        <files mask="app1.c"/>
        <files mask="app2.c"/>
        <files mask="app3.c"/>
        <files mask="app4.c"/>
        <files mask="app5.c"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="image">
        <files mask="f1.png"/>
        <files mask="f2.png"/>
        <files mask="f3.png"/>
        <files mask="f4.png"/>
        <files mask="f5.png"/>
        <files mask="f6.png"/>
        <files mask="f7.png"/>
        <files mask="funcs.png"/>
        <files mask="layers.png"/>
        <files mask="layers1.png"/>
        <files mask="layers2.png"/>
        <files mask="layers3.png"/>
        <files mask="modules.png"/>
        <files mask="rwtest1.png"/>
        <files mask="rwtest2.png"/>
        <files mask="rwtest3.png"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="archive">
        <files mask="mkfatimg.zip"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="doc">
        <files mask="mkfs.xls"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/fatfs_files" type="doc">
        <files mask="00history.txt"/>
        <files mask="00readme.txt"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/fatfs_files" type="c_include">
        <files mask="ffconf_template.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.usb_bm.MK28F15" name="usb_bm" brief="FatFs_USB_baremetal" version="0.13" full_name="Fatfs USB baremetal layer" devices="MK28FN2M0xxx15" dependency="middleware.fatfs.MK28F15 middleware.usb.host.MK28F15 middleware.usb.host_hub.MK28F15 middleware.usb.host_msd.MK28F15" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_usb_disk.h"/>
      </source>
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_usb_disk_bm.c"/>
      </source>
    </component>
    <component id="middleware.fatfs.usb_freertos.MK28F15" name="usb_freertos" brief="FatFs_USB_freertos" version="0.13" full_name="Fatfs USB freertos layer" devices="MK28FN2M0xxx15" dependency="middleware.fatfs.MK28F15 middleware.usb.host.MK28F15 middleware.usb.host_hub.MK28F15 middleware.usb.host_msd.MK28F15" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_usb_disk.h"/>
      </source>
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_usb_disk_freertos.c"/>
      </source>
    </component>
    <component id="middleware.usb.device.MK28F15" name="common driver" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_controller_ehci.MK28F15" name="EHCI driver(HS)" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.device.MK28F15 middleware.usb.phy.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="src">
        <files mask="usb_device_ehci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="c_include">
        <files mask="usb_device_ehci.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_controller_khci.MK28F15" name="KHCI driver(FS)" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.device.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="src">
        <files mask="usb_device_khci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="c_include">
        <files mask="usb_device_khci.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_config_template.MK28F15" name="USB device config template" brief="USB device config template" version="2.2.0" full_name="USB device config template" devices="MK28FN2M0xxx15" category="Board Support/SDK Project Template" user_visible="false" type="project_template">
      <source path="middleware/usb/templates/config" target_path="source/generated" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_stack.MK28F15" name="USB device" brief="USB device stack" version="2.2.0" full_name="USB device stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.device_config_template.MK28F15 middleware.usb.stack_common.MK28F15" user_visible="true" type="middleware">
      <source path="middleware/usb/templates/device/class" target_path="usb/device/class" type="src">
        <files mask="usb_device_audio.c"/>
        <files mask="usb_device_ccid.c"/>
        <files mask="usb_device_cdc_acm.c"/>
        <files mask="usb_device_cdc_rndis.c"/>
        <files mask="usb_device_class.c"/>
        <files mask="usb_device_hid.c"/>
        <files mask="usb_device_msc.c"/>
        <files mask="usb_device_msc_ufi.c"/>
        <files mask="usb_device_phdc.c"/>
        <files mask="usb_device_printer.c"/>
        <files mask="usb_device_video.c"/>
      </source>
      <source path="middleware/usb/templates/device/class" target_path="usb/device/class" type="c_include">
        <files mask="usb_device_audio.h"/>
        <files mask="usb_device_ccid.h"/>
        <files mask="usb_device_cdc_acm.h"/>
        <files mask="usb_device_cdc_rndis.h"/>
        <files mask="usb_device_class.h"/>
        <files mask="usb_device_hid.h"/>
        <files mask="usb_device_msc.h"/>
        <files mask="usb_device_msc_ufi.h"/>
        <files mask="usb_device_phdc.h"/>
        <files mask="usb_device_printer.h"/>
        <files mask="usb_device_video.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/templates/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_ch9.c"/>
      </source>
      <source path="middleware/usb/templates/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_ch9.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="src">
        <files mask="usb_device_ehci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="c_include">
        <files mask="usb_device_ehci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="src">
        <files mask="usb_device_khci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="c_include">
        <files mask="usb_device_khci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="src">
        <files mask="usb_device_lpcip3511.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="c_include">
        <files mask="usb_device_lpcip3511.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_audio.MK28F15" name="Audio class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_audio.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_audio.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_cdc.MK28F15" name="CDC class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_cdc.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_cdc.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_cdc_rndis.MK28F15" name="CDC RNDIS class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_cdc_rndis.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_cdc_rndis.h"/>
      </source>
    </component>
    <component id="middleware.usb.host.MK28F15" name="common driver" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_framework.h"/>
        <files mask="usb_host_hci.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_devices.c"/>
        <files mask="usb_host_framework.c"/>
        <files mask="usb_host_hci.c"/>
      </source>
    </component>
    <component id="middleware.usb.host_controller_ehci.MK28F15" name="EHCI driver(HS)" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15 middleware.usb.phy.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_ehci.c"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host_ehci.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_hid.MK28F15" name="Hid class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_hid.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_hid.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_hub.MK28F15" name="Hub class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_hub.c"/>
        <files mask="usb_host_hub_app.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_hub.h"/>
        <files mask="usb_host_hub_app.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_controller_khci.MK28F15" name="KHCI driver(FS)" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_khci.c"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host_khci.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_msd.MK28F15" name="Mass Storage class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_msd.c"/>
        <files mask="usb_host_msd_ufi.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_msd.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_phdc.MK28F15" name="PHDC class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_phdc.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_phdc.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_printer.MK28F15" name="Printer class" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host.MK28F15" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_printer.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_printer.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_config_template.MK28F15" name="USB host config template" brief="USB host config template" version="2.2.0" full_name="USB host config template" devices="MK28FN2M0xxx15" category="Board Support/SDK Project Template" user_visible="false" type="project_template">
      <source path="middleware/usb/templates/config" target_path="source/generated" type="c_include">
        <files mask="usb_host_config.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_stack.MK28F15" name="USB host" brief="USB host stack" version="2.2.0" full_name="USB host stack" devices="MK28FN2M0xxx15" dependency="middleware.usb.host_config_template.MK28F15 middleware.usb.stack_common.MK28F15" user_visible="true" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_audio.c"/>
        <files mask="usb_host_cdc.c"/>
        <files mask="usb_host_hid.c"/>
        <files mask="usb_host_hub.c"/>
        <files mask="usb_host_hub_app.c"/>
        <files mask="usb_host_msd.c"/>
        <files mask="usb_host_msd_ufi.c"/>
        <files mask="usb_host_phdc.c"/>
        <files mask="usb_host_printer.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_audio.h"/>
        <files mask="usb_host_cdc.h"/>
        <files mask="usb_host_hid.h"/>
        <files mask="usb_host_hub.h"/>
        <files mask="usb_host_hub_app.h"/>
        <files mask="usb_host_msd.h"/>
        <files mask="usb_host_phdc.h"/>
        <files mask="usb_host_printer.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_ehci.h"/>
        <files mask="usb_host_framework.h"/>
        <files mask="usb_host_hci.h"/>
        <files mask="usb_host_ip3516hs.h"/>
        <files mask="usb_host_khci.h"/>
        <files mask="usb_host_ohci.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_devices.c"/>
        <files mask="usb_host_ehci.c"/>
        <files mask="usb_host_framework.c"/>
        <files mask="usb_host_hci.c"/>
        <files mask="usb_host_ip3516hs.c"/>
        <files mask="usb_host_khci.c"/>
        <files mask="usb_host_ohci.c"/>
      </source>
    </component>
    <component id="middleware.usb.phy.MK28F15" name="phy" version="1.0.0" full_name="USB stack" devices="MK28FN2M0xxx15" user_visible="false" type="middleware">
      <source path="middleware/usb/phy" target_path="usb/phy" type="src">
        <files mask="usb_phy.c"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="c_include">
        <files mask="usb_phy.h"/>
      </source>
    </component>
    <component id="middleware.usb.stack_common.MK28F15" name="USB common" brief="USB common" version="2.2.0" full_name="USB common" devices="MK28FN2M0xxx15" user_visible="true" type="middleware">
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MK28F15" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="src">
        <files mask="usb_phy.c"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="c_include">
        <files mask="usb_phy.h"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MK28F15" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MK28FN2M0xxx15" user_visible="true" type="utilities">
      <source toolchain="armgcc" path="devices/MK28F15/utilities" target_path="utilities" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MK28F15" name="assert" version="1.0.0" devices="MK28FN2M0xxx15" dependency="component.lists.MK28F15 component.serial_manager.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 utility.debug_console.MK28F15" user_visible="true" type="utilities">
      <source path="devices/MK28F15/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MK28F15" name="debug_console" version="1.0.0" devices="MK28FN2M0xxx15" dependency="component.lists.MK28F15 component.serial_manager.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="utilities">
      <source path="devices/MK28F15/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MK28F15/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MK28F15/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MK28F15/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MK28F15" name="notifier" version="1.0.0" devices="MK28FN2M0xxx15" dependency="device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15" user_visible="true" type="utilities">
      <source path="devices/MK28F15/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MK28F15/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MK28F15" name="shell" version="1.0.0" devices="MK28FN2M0xxx15" dependency="component.lists.MK28F15 component.serial_manager.MK28F15 device.MK28F15_CMSIS.MK28F15 platform.Include_common.MK28F15 platform.Include_core_cm4.MK28F15 platform.drivers.clock.MK28F15 platform.drivers.common.MK28F15 utility.debug_console.MK28F15" user_visible="true" type="utilities">
      <source path="devices/MK28F15/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MK28F15/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
