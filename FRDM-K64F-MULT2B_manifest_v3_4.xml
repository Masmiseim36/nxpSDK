<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_FRDM-K64F-MULT2B" name="FRDM-K64F-MULT2B" brief="This is SDK version 2.6.0 manifest file. It describes the content of the FRDM-K64F-MULT2B and additional settings for tools that support SDK version 2.6.0" format_version="3.4" api_version="2.0.0" configuration="4da7b645c61b7d06bdd2140e64393148" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.4.xsd">
  <!--Timestamp (UTC): 2019-12-02 06:41:57.119228-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="twrk64f120m"/>
    <definition extID="hexiwear"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso260" name="MCUXpresso260" version="2.6.0" revision="228 2019-06-14"/>
  <compilers>
    <compiler id="compiler_arm" name="arm" type="arm"/>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
    <compiler id="compiler_iar" name="iar" type="iar"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.0.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="8.2.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mdk" name="Keil_MDK" version="5.27" full_name="Keil MDK" compiler="compiler_arm" type="mdk" vendor="ARM" vendor_url="http://www.arm.com"/>
    <toolchain id="iar" name="IAR_Embedded_Workbench_for_ARM" version="8.32.3" full_name="IAR Embedded Workbench for ARM" compiler="compiler_iar" type="iar" vendor="IAR Systems" vendor_url="http://www.iar.com"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.0.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmk64f" name="FRDM-K64F" href="http://www.nxp.com/frdm-k64f" version="1.0.0" package="MK64FN1M0VLL12">
      <description>FRDM-K64F: Freedom Development Platform for Kinetis K64, K63, and K24 MCUs</description>
      <image path="docs/images" type="image">
        <files mask="FRDM-K64F.gif"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The Freedom-K64F is an ultra-low-cost development platform for Kinetis K64, K63, and K24 MCUsForm-factor compatible with the Arduino R3 pin layout. Peripherals enable rapid prototyping, including a 6-axis digital accelerometer and magnetometer to create full eCompass capabilities, a tri-colored LED and 2 user push-buttons for direct interaction, a microSD card slot, and connectivity using onboard Ethernet port and headers for use with BluetoothÂ® and 2.4 GHz radio add-on modules. OpenSDAv2, the NXP open source hardware embedded serial and debug adapter running an open source bootloader, offers options for serial communication, flash programming, and run-control debugging.</content>
          </specific>
        </metadata>
      </metadataSet>
      <examples>
        <example id="frdmk64f_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/adc16" path="boards/frdmk64f/driver_examples/adc16/continuous_edma">
          <external path="boards/frdmk64f/driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma.xml"/>
          </external>
        </example>
        <example id="frdmk64f_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/adc16" path="boards/frdmk64f/driver_examples/adc16/interrupt">
          <external path="boards/frdmk64f/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/adc16_low_power">
          <external path="boards/frdmk64f/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power.xml"/>
          </external>
        </example>
        <example id="frdmk64f_adc16_low_power_peripheral" name="adc16_low_power_peripheral" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/adc16_low_power_peripheral">
          <external path="boards/frdmk64f/demo_apps/adc16_low_power_peripheral" type="xml">
            <files mask="adc16_low_power_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk64f_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/adc16" path="boards/frdmk64f/driver_examples/adc16/polling">
          <external path="boards/frdmk64f/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling.xml"/>
          </external>
        </example>
        <example id="frdmk64f_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/bubble">
          <external path="boards/frdmk64f/demo_apps/bubble" type="xml">
            <files mask="bubble.xml"/>
          </external>
        </example>
        <example id="frdmk64f_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/bubble_peripheral">
          <external path="boards/frdmk64f/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/cmp" path="boards/frdmk64f/driver_examples/cmp/interrupt">
          <external path="boards/frdmk64f/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/cmp" path="boards/frdmk64f/driver_examples/cmp/polling">
          <external path="boards/frdmk64f/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_dspi_edma_b2b_transfer_master" name="cmsis_dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/dspi" path="boards/frdmk64f/cmsis_driver_examples/dspi/edma_b2b_transfer/master">
          <external path="boards/frdmk64f/cmsis_driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_dspi_edma_b2b_transfer_slave" name="cmsis_dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/dspi" path="boards/frdmk64f/cmsis_driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="boards/frdmk64f/cmsis_driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_dspi_int_b2b_transfer_master" name="cmsis_dspi_int_b2b_transfer_master" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/dspi" path="boards/frdmk64f/cmsis_driver_examples/dspi/int_b2b_transfer/master">
          <external path="boards/frdmk64f/cmsis_driver_examples/dspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_dspi_int_b2b_transfer_slave" name="cmsis_dspi_int_b2b_transfer_slave" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/dspi" path="boards/frdmk64f/cmsis_driver_examples/dspi/int_b2b_transfer/slave">
          <external path="boards/frdmk64f/cmsis_driver_examples/dspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_i2c_edma_b2b_transfer_master" name="cmsis_i2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/i2c" path="boards/frdmk64f/cmsis_driver_examples/i2c/edma_b2b_transfer/master">
          <external path="boards/frdmk64f/cmsis_driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_i2c_edma_b2b_transfer_slave" name="cmsis_i2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/i2c" path="boards/frdmk64f/cmsis_driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="boards/frdmk64f/cmsis_driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_i2c_int_b2b_transfer_master" name="cmsis_i2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/i2c" path="boards/frdmk64f/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/frdmk64f/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_i2c_int_b2b_transfer_slave" name="cmsis_i2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/i2c" path="boards/frdmk64f/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/frdmk64f/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_i2c_read_accel_value_transfer" name="cmsis_i2c_read_accel_value_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_read_accel_value example shows how to use CMSIS I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/i2c" path="boards/frdmk64f/cmsis_driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmk64f/cmsis_driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="cmsis_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_uart_edma_transfer" name="cmsis_uart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/uart" path="boards/frdmk64f/cmsis_driver_examples/uart/edma_transfer">
          <external path="boards/frdmk64f/cmsis_driver_examples/uart/edma_transfer" type="xml">
            <files mask="cmsis_uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmsis_uart_interrupt_transfer" name="cmsis_uart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" category="cmsis_driver_examples/uart" path="boards/frdmk64f/cmsis_driver_examples/uart/interrupt_transfer">
          <external path="boards/frdmk64f/cmsis_driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="cmsis_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_cmt" name="cmt" brief="The cmt example shows the simplest way to use CMT driver.In this example, the CMT is work as Time mode and used to modulation 11 bit numbers of data.The CMT is configured to generate a 40000hz carrier generator signal through a modulator gateconfigured with different mark/space time period to represent bit 1 and bit 0. The modulated data rate is 9600.Note, The end of cycle interrupt provides a means for the user to reload new mark/space valuesinto the modulator data registers. Modulator data register updates will take effect at the end of the current modulation cycle. The CMT internal down-counter and space period register areupdated at the end of every modulation cycle, irrespective of interrupt handling and the stateof the interrupt. so please make sure the IRQ handler process is shorter than the modulationcycle to ensure the new mark/space counter is prepared before each end of modulation cycle." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/cmt">
          <external path="boards/frdmk64f/driver_examples/cmt" type="xml">
            <files mask="cmt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/crc">
          <external path="boards/frdmk64f/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/dac_adc">
          <external path="boards/frdmk64f/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dac_adc_peripheral" name="dac_adc_peripheral" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/dac_adc_peripheral">
          <external path="boards/frdmk64f/demo_apps/dac_adc_peripheral" type="xml">
            <files mask="dac_adc_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dac" path="boards/frdmk64f/driver_examples/dac/basic">
          <external path="boards/frdmk64f/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dac" path="boards/frdmk64f/driver_examples/dac/buffer_interrupt">
          <external path="boards/frdmk64f/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dac_continuous_pdb_edma" name="dac_continuous_pdb_edma" brief="The demo shows how to use the PDB to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PDB is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.while read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dac" path="boards/frdmk64f/driver_examples/dac/continuous_pdb_edma">
          <external path="boards/frdmk64f/driver_examples/dac/continuous_pdb_edma" type="xml">
            <files mask="dac_continuous_pdb_edma.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_edma_b2b_transfer_master" name="dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/edma_b2b_transfer/master">
          <external path="boards/frdmk64f/driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="dspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_edma_b2b_transfer_slave" name="dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="dspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_half_duplex_edma_master" name="dspi_half_duplex_edma_master" brief="The dspi_half_duplex_edma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sendsa piece of data to slave, and receive a piece of data from slave. This example checks if the data received fromslave is correct.Besides, master will transfer in EDMA way. " toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/edma/master">
          <external path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/edma/master" type="xml">
            <files mask="dspi_half_duplex_edma_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_half_duplex_edma_slave" name="dspi_half_duplex_edma_slave" brief="The dspi_half_duplex_edma_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses edma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/edma/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/edma/slave" type="xml">
            <files mask="dspi_half_duplex_edma_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_half_duplex_int_master" name="dspi_half_duplex_int_master" brief="The dspi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer in interrupt way. " toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/int/master">
          <external path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/int/master" type="xml">
            <files mask="dspi_half_duplex_int_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_half_duplex_int_slave" name="dspi_half_duplex_int_slave" brief="The dspi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/int/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/int/slave" type="xml">
            <files mask="dspi_half_duplex_int_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_half_duplex_polling_master" name="dspi_half_duplex_polling_master" brief="The dspi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends apiece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. Besides, master will transfer in polling way. " toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/polling/master">
          <external path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/polling/master" type="xml">
            <files mask="dspi_half_duplex_polling_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_half_duplex_polling_slave" name="dspi_half_duplex_polling_slave" brief="The dspi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/polling/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/half_duplex_transfer/polling/slave" type="xml">
            <files mask="dspi_half_duplex_polling_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_interrupt" name="dspi_interrupt" brief="The dspi_interrupt example shows how to use DSPI driver in interrupt way:In this example , one dspi instance used as DSPI master and another dspi instance used as DSPI slave in the same board.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/interrupt">
          <external path="boards/frdmk64f/driver_examples/dspi/interrupt" type="xml">
            <files mask="dspi_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_interrupt_b2b_master" name="dspi_interrupt_b2b_master" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_master.c' includes the DSPI master code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b/master">
          <external path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b/master" type="xml">
            <files mask="dspi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_interrupt_b2b_slave" name="dspi_interrupt_b2b_slave" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the DSPI slave code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b/slave" type="xml">
            <files mask="dspi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_interrupt_b2b_transfer_master" name="dspi_interrupt_b2b_transfer_master" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b_transfer/master">
          <external path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_interrupt_b2b_transfer_slave" name="dspi_interrupt_b2b_transfer_slave" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b_transfer/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_polling_b2b_transfer_master" name="dspi_polling_b2b_transfer_master" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/polling_b2b_transfer/master">
          <external path="boards/frdmk64f/driver_examples/dspi/polling_b2b_transfer/master" type="xml">
            <files mask="dspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_dspi_polling_b2b_transfer_slave" name="dspi_polling_b2b_transfer_slave" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/dspi" path="boards/frdmk64f/driver_examples/dspi/polling_b2b_transfer/slave">
          <external path="boards/frdmk64f/driver_examples/dspi/polling_b2b_transfer/slave" type="xml">
            <files mask="dspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/ecompass">
          <external path="boards/frdmk64f/demo_apps/ecompass" type="xml">
            <files mask="ecompass.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/ecompass_peripheral">
          <external path="boards/frdmk64f/demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral.xml"/>
          </external>
        </example>
        <example id="frdmk64f_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/edma" path="boards/frdmk64f/driver_examples/edma/memory_to_memory">
          <external path="boards/frdmk64f/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="frdmk64f_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/edma" path="boards/frdmk64f/driver_examples/edma/scatter_gather">
          <external path="boards/frdmk64f/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="frdmk64f_enet_txrx_ptp1588_transfer" name="enet_txrx_ptp1588_transfer" brief="The enet_rxtx_ptp1588 example shows the way to use ENET driver to   receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.3. How to add to the multicast group to receive PTP 1588 message.4. How to get the time stamp of the PTP 1588 timer.4. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received. Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. you can change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/enet" path="boards/frdmk64f/driver_examples/enet/txrx_ptp1588_transfer">
          <external path="boards/frdmk64f/driver_examples/enet/txrx_ptp1588_transfer" type="xml">
            <files mask="enet_txrx_ptp1588_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_enet_txrx_transfer" name="enet_txrx_transfer" brief="The enet_rxtx example shows the simplest way to use ENET driver for simple frame receive and transmit.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.The example transmits 20 number broadcast frame, print the frame length, source MAC addressand destination MAC address when receive frame.Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. youcan change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/enet" path="boards/frdmk64f/driver_examples/enet/txrx_transfer">
          <external path="boards/frdmk64f/driver_examples/enet/txrx_transfer" type="xml">
            <files mask="enet_txrx_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/ewm">
          <external path="boards/frdmk64f/driver_examples/ewm" type="xml">
            <files mask="ewm.xml"/>
          </external>
        </example>
        <example id="frdmk64f_flexcan_loopback" name="flexcan_loopback" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/flexcan" path="boards/frdmk64f/driver_examples/flexcan/loopback">
          <external path="boards/frdmk64f/driver_examples/flexcan/loopback" type="xml">
            <files mask="flexcan_loopback.xml"/>
          </external>
        </example>
        <example id="frdmk64f_flexcan_loopback_transfer" name="flexcan_loopback_transfer" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/flexcan" path="boards/frdmk64f/driver_examples/flexcan/loopback_transfer">
          <external path="boards/frdmk64f/driver_examples/flexcan/loopback_transfer" type="xml">
            <files mask="flexcan_loopback_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/combine_pwm">
          <external path="boards/frdmk64f/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/dual_edge_capture">
          <external path="boards/frdmk64f/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/input_capture">
          <external path="boards/frdmk64f/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/output_compare">
          <external path="boards/frdmk64f/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_pdb_adc16" name="ftm_pdb_adc16" brief="The FTM / PDB demo application demonstrates how to use the FTM external trigger to start the ADC conversion using thePDB. FTM0 is configured as a complementary combined mode, and each channel output frequency is 16 KHz. The complementarychannel dead time is 1 Âµs. The PDB pre-trigger works in back-to-back mode. The ADC0 and ADC1 work in single-end mode.The ADC0 uses channel 1 and channel 5, and ADC1 uses channel 1 and channel 7." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/ftm_pdb_adc16">
          <external path="boards/frdmk64f/demo_apps/ftm_pdb_adc16" type="xml">
            <files mask="ftm_pdb_adc16.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/pwm_twochannel">
          <external path="boards/frdmk64f/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_quad_decoder" name="ftm_quad_decoder" brief="This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/ftm_quad_decoder">
          <external path="boards/frdmk64f/demo_apps/ftm_quad_decoder" type="xml">
            <files mask="ftm_quad_decoder.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/simple_pwm">
          <external path="boards/frdmk64f/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmk64f_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/ftm" path="boards/frdmk64f/driver_examples/ftm/timer">
          <external path="boards/frdmk64f/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/gpio" path="boards/frdmk64f/driver_examples/gpio/input_interrupt">
          <external path="boards/frdmk64f/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/gpio" path="boards/frdmk64f/driver_examples/gpio/led_output">
          <external path="boards/frdmk64f/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="frdmk64f_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/hello_world">
          <external path="boards/frdmk64f/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_edma_b2b_transfer_master" name="i2c_edma_b2b_transfer_master" brief="The i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/edma_b2b_transfer/master">
          <external path="boards/frdmk64f/driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="i2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_edma_b2b_transfer_slave" name="i2c_edma_b2b_transfer_slave" brief="The i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="boards/frdmk64f/driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="i2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_interrupt" name="i2c_interrupt" brief="The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/interrupt">
          <external path="boards/frdmk64f/driver_examples/i2c/interrupt" type="xml">
            <files mask="i2c_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/frdmk64f/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/frdmk64f/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/frdmk64f/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/frdmk64f/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmk64f_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/i2c" path="boards/frdmk64f/driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmk64f/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/led_blinky">
          <external path="boards/frdmk64f/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="frdmk64f_led_control_bm" name="led_control_bm" brief="The LED demo is used to demonstrate how to use new components. The main function of the demo is to control the led by using the shell or button. For shell, please enter \&quot;help\&quot; to get the help information firstly. Turn on LED by using command \&quot;led on\&quot;. And turn off LED by using command \&quot;led off\&quot;. For button, please press the corresponding button to control LED. Turn on LED when the button is pressed with long press or double click event. And turn off LED when the button is pressed with short press or one click event." toolchain="armgcc iar mcuxpresso mdk" category="component_examples" path="boards/frdmk64f/component_examples/led_control/bm">
          <external path="boards/frdmk64f/component_examples/led_control/bm" type="xml">
            <files mask="led_control_bm.xml"/>
          </external>
        </example>
        <example id="frdmk64f_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/lptmr">
          <external path="boards/frdmk64f/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mcg_fee_blpe" name="mcg_fee_blpe" brief="The fee_bple example shows how to use MCG driver to change from FEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to Fee mode from default reset mode    Change from FEE -&gt; FBE -&gt; BLPE    Change back BLPE -&gt; FBE -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/mcg" path="boards/frdmk64f/driver_examples/mcg/fee_blpe">
          <external path="boards/frdmk64f/driver_examples/mcg/fee_blpe" type="xml">
            <files mask="mcg_fee_blpe.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mcg_fee_blpi" name="mcg_fee_blpi" brief="The fee_bpli example shows how to use MCG driver to change from FEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEE mode from default reset mode    Change from FEE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/mcg" path="boards/frdmk64f/driver_examples/mcg/fee_blpi">
          <external path="boards/frdmk64f/driver_examples/mcg/fee_blpi" type="xml">
            <files mask="mcg_fee_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mcg_fei_blpi" name="mcg_fei_blpi" brief="The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/mcg" path="boards/frdmk64f/driver_examples/mcg/fei_blpi">
          <external path="boards/frdmk64f/driver_examples/mcg/fei_blpi" type="xml">
            <files mask="mcg_fei_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mcg_pee_blpe" name="mcg_pee_blpe" brief="The pee_bple example shows how to use MCG driver to change from PEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt; BLPE    Change back BLPE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/mcg" path="boards/frdmk64f/driver_examples/mcg/pee_blpe">
          <external path="boards/frdmk64f/driver_examples/mcg/pee_blpe" type="xml">
            <files mask="mcg_pee_blpe.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mcg_pee_blpi" name="mcg_pee_blpi" brief="The pee_bpli example shows how to use MCG driver to change from PEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt;FBE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FBE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/mcg" path="boards/frdmk64f/driver_examples/mcg/pee_blpi">
          <external path="boards/frdmk64f/driver_examples/mcg/pee_blpi" type="xml">
            <files mask="mcg_pee_blpi.xml"/>
          </external>
        </example>
        <example id="frdmk64f_pdb_adc16_trigger" name="pdb_adc16_trigger" brief="The pdb_adc16_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would begenerated and sent to the ADC module.In this example, the ADC16 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/pdb" path="boards/frdmk64f/driver_examples/pdb/adc16_trigger">
          <external path="boards/frdmk64f/driver_examples/pdb/adc16_trigger" type="xml">
            <files mask="pdb_adc16_trigger.xml"/>
          </external>
        </example>
        <example id="frdmk64f_pdb_dac_trigger" name="pdb_dac_trigger" brief="The pdb_dac_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's &quot;milestone&quot; and set the user-defined value for it.The DAC's &quot;milestone&quot; is called as &quot;interval&quot;. Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB, the buffer read pointer increases." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/pdb" path="boards/frdmk64f/driver_examples/pdb/dac_trigger">
          <external path="boards/frdmk64f/driver_examples/pdb/dac_trigger" type="xml">
            <files mask="pdb_dac_trigger.xml"/>
          </external>
        </example>
        <example id="frdmk64f_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/pdb" path="boards/frdmk64f/driver_examples/pdb/delay_interrupt">
          <external path="boards/frdmk64f/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/flash" path="boards/frdmk64f/driver_examples/flash/pflash">
          <external path="boards/frdmk64f/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="frdmk64f_pit" name="pit" brief="The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/pit">
          <external path="boards/frdmk64f/driver_examples/pit" type="xml">
            <files mask="pit.xml"/>
          </external>
        </example>
        <example id="frdmk64f_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/power_manager">
          <external path="boards/frdmk64f/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="frdmk64f_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/power_mode_switch">
          <external path="boards/frdmk64f/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="frdmk64f_rnga_random" name="rnga_random" brief="The RNGA is a digital integrated circuit capable of generating the 32-bit random numbers. The RNGAExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/rnga" path="boards/frdmk64f/driver_examples/rnga/random">
          <external path="boards/frdmk64f/driver_examples/rnga/random" type="xml">
            <files mask="rnga_random.xml"/>
          </external>
        </example>
        <example id="frdmk64f_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/rtc">
          <external path="boards/frdmk64f/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="frdmk64f_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/rtc_func">
          <external path="boards/frdmk64f/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="frdmk64f_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc iar mcuxpresso mdk" category="demo_apps" path="boards/frdmk64f/demo_apps/shell">
          <external path="boards/frdmk64f/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="frdmk64f_sysmpu" name="sysmpu" brief="The SYSMPU example defines protected/unprotected memory region for the core access.First, the SYSMPU will capture the hardware information and show it on theterminal. Then, a memory region is configured as the non-writable region. Thebus fault interrupt is enabled to report the memory protection interrupt eventfor this non-writable region. If an operation writes to this region, the busfault interrupt happens. Then the bus fault interrupt handler provides aprevention alert by outputting a message on terminal, then the write rightswill be given to this region for core access. After the write access enabled,the writing to the region becomes successful. When the bus fault happen, thedetails of the error information will be captured and printed on the terminal.This example provides the terminal input control to give the example show for several regions access test. Just press any key to the terminal when theterminal show &quot;Press any key to continue&quot;." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/sysmpu">
          <external path="boards/frdmk64f/driver_examples/sysmpu" type="xml">
            <files mask="sysmpu.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_edma_rb_transfer" name="uart_edma_rb_transfer" brief="The uart_edma ring buffer example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/edma_rb_transfer">
          <external path="boards/frdmk64f/driver_examples/uart/edma_rb_transfer" type="xml">
            <files mask="uart_edma_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_edma_transfer" name="uart_edma_transfer" brief="The uart_edma example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/edma_transfer">
          <external path="boards/frdmk64f/driver_examples/uart/edma_transfer" type="xml">
            <files mask="uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_hardware_flow_control" name="uart_hardware_flow_control" brief="The uart_hardware_flow_control example project is to demonstrate usage of the hardware flow control function.This example will send data to itself(loopback), and hardware flow control will be enabled in the example.The CTS(clear-to-send) pin is for transmiter to check if receiver is ready, if the CTS pin is assert, transmiter startto send data. The RTS(request-to-send) is a pin for receiver to inform the transmiter if receiver is ready to receivedata. So, please connect RTS to CTS pin directly." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/hardware_flow_control">
          <external path="boards/frdmk64f/driver_examples/uart/hardware_flow_control" type="xml">
            <files mask="uart_hardware_flow_control.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_interrupt" name="uart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/interrupt">
          <external path="boards/frdmk64f/driver_examples/uart/interrupt" type="xml">
            <files mask="uart_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_interrupt_rb_transfer" name="uart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/interrupt_rb_transfer">
          <external path="boards/frdmk64f/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="uart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_interrupt_transfer" name="uart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/interrupt_transfer">
          <external path="boards/frdmk64f/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmk64f_uart_polling" name="uart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/uart" path="boards/frdmk64f/driver_examples/uart/polling">
          <external path="boards/frdmk64f/driver_examples/uart/polling" type="xml">
            <files mask="uart_polling.xml"/>
          </external>
        </example>
        <example id="frdmk64f_vref_example" name="vref_example" brief="In this example, the adc16 module is initiealized and used to measure the VREF output voltage. So, it cannot use interal VREF as the reference voltage. Then, user should configure the VREF output pin as the ADC16's sample input. When running the project, it will firstly measure the VREF output voltage within the default (factory) trim value. Then, it will measure the VREF output voltage under different trim value." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples/vref" path="boards/frdmk64f/driver_examples/vref">
          <external path="boards/frdmk64f/driver_examples/vref" type="xml">
            <files mask="vref_example.xml"/>
          </external>
        </example>
        <example id="frdmk64f_wdog" name="wdog" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode." toolchain="armgcc iar mcuxpresso mdk" category="driver_examples" path="boards/frdmk64f/driver_examples/wdog">
          <external path="boards/frdmk64f/driver_examples/wdog" type="xml">
            <files mask="wdog.xml"/>
          </external>
        </example>
      </examples>
    </board>
    <board id="frdmk64f_mult2b" name="FRDM-K64F-MULT2B" href="http://www.nxp.com/products/software-and-tools/hardware-development-tools/freedom-development-boards/frdm-fxs-mult2-b-freedom-development-platform-for-nxp-sensors-with-bluetooth.:FRDM-FXS-MULT2-B" version="1.0.0" package="MK64FN1M0VLL12" type="kit">
      <description>
FRDM-FXS-MULT2-B: FRDM-FXS-MULT2-B: Freedom Development Platform for NXPÂ® Sensors with BluetoothÂ®
        </description>
      <image path="docs/images" type="image">
        <files mask="FRDM-K64F-MULT2B.gif"/>
      </image>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
        <metadata key="html">
          <specific>
            <content>
FRDM-K64F with FRDM-FXS-MULT2-B Custom Kit (FRDM-FXS-MULT2-B Sensor Shield Development Board with FRDM-K64F Board):
&lt;ul&gt;
&lt;li&gt; FRDM-FXS-MULT2-B Sensor Shield board is a multi-sensor expansion board enabling NXPÂ® Sensors MMA8652FC 3-Axis Accelerometer, FXLS8471Q 3-Axis Accelerometer, MAG3110 3-Axis Magnetometer, FXAS21002C 3-Axis Gyroscope, MPL3115A2 Pressure sensor, FXOS8700CQ 3-Axis Accelerometer plus a 3-Axis Magnetometer and the MMA9553L sensing platform.).&lt;/li&gt;
&lt;/ul&gt;
</content>
          </specific>
        </metadata>
      </metadataSet>
      <examples>
        <example id="frdmk64f_mult2b_fxas21002_fifo_mult2b" name="fxas21002_fifo_mult2b" brief="The FXAS21002 FIFO example application demonstrates the use of the FXAS21002 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxas21002/fxas21002_fifo">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxas21002/fxas21002_fifo" type="xml">
            <files mask="fxas21002_fifo_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxas21002_interrupt_mult2b" name="fxas21002_interrupt_mult2b" brief="The FXAS21002 FIFO example application demonstrates the use of the FXAS21002 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxas21002/fxas21002_interrupt">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxas21002/fxas21002_interrupt" type="xml">
            <files mask="fxas21002_interrupt_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxas21002_poll_mult2b" name="fxas21002_poll_mult2b" brief="The FXAS21002 FIFO example application demonstrates the use of the FXAS21002 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxas21002/fxas21002_poll">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxas21002/fxas21002_poll" type="xml">
            <files mask="fxas21002_poll_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxls8471q_spi_fifo_mult2b" name="fxls8471q_spi_fifo_mult2b" brief="The FXAS8471Q FIFO example application demonstrates the use of the FXAS8471Q sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxls8471q/fxls8471q_spi_fifo">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxls8471q/fxls8471q_spi_fifo" type="xml">
            <files mask="fxls8471q_spi_fifo_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxls8471q_spi_interrupt_mult2b" name="fxls8471q_spi_interrupt_mult2b" brief="The FXAS8471Q FIFO example application demonstrates the use of the FXAS8471Q sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxls8471q/fxls8471q_spi_interrupt">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxls8471q/fxls8471q_spi_interrupt" type="xml">
            <files mask="fxls8471q_spi_interrupt_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxls8471q_spi_poll_mult2b" name="fxls8471q_spi_poll_mult2b" brief="The FXAS8471Q FIFO example application demonstrates the use of the FXAS8471Q sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxls8471q/fxls8471q_spi_poll">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxls8471q/fxls8471q_spi_poll" type="xml">
            <files mask="fxls8471q_spi_poll_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxos8700_fifo_mult2b" name="fxos8700_fifo_mult2b" brief="The FXAS8700 FIFO example application demonstrates the use of the FXAS8700 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxos8700/fxos8700_fifo">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxos8700/fxos8700_fifo" type="xml">
            <files mask="fxos8700_fifo_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxos8700_interrupt_mult2b" name="fxos8700_interrupt_mult2b" brief="The FXAS8700 FIFO example application demonstrates the use of the FXAS8700 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxos8700/fxos8700_interrupt">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxos8700/fxos8700_interrupt" type="xml">
            <files mask="fxos8700_interrupt_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_fxos8700_poll_mult2b" name="fxos8700_poll_mult2b" brief="The FXAS8700 FIFO example application demonstrates the use of the FXAS8700 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxos8700/fxos8700_poll">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/fxos8700/fxos8700_poll" type="xml">
            <files mask="fxos8700_poll_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_host_demo_template" name="host_demo_template" brief="The FXAS21002 FIFO example application demonstrates the use of the FXAS21002 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/hostdemo/host_demo_template">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/hostdemo/host_demo_template" type="xml">
            <files mask="host_demo_template.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mag3110_normal_interrupt_mult2b" name="mag3110_normal_interrupt_mult2b" brief="The MAG3110 FIFO example application demonstrates the use of the MAG3110 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mag3110/mag3110_normal_interrupt">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mag3110/mag3110_normal_interrupt" type="xml">
            <files mask="mag3110_normal_interrupt_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mag3110_normal_mult2b" name="mag3110_normal_mult2b" brief="The MAG3110 FIFO example application demonstrates the use of the MAG3110 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mag3110/mag3110_normal">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mag3110/mag3110_normal" type="xml">
            <files mask="mag3110_normal_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mag3110_oneshot_mult2b" name="mag3110_oneshot_mult2b" brief="The MAG3110 FIFO example application demonstrates the use of the MAG3110 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mag3110/mag3110_oneshot">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mag3110/mag3110_oneshot" type="xml">
            <files mask="mag3110_oneshot_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mma865x_fifo_mult2b" name="mma865x_fifo_mult2b" brief="The MMA865X FIFO example application demonstrates the use of the MMA865X sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_fifo">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_fifo" type="xml">
            <files mask="mma865x_fifo_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mma865x_freefall_mult2b" name="mma865x_freefall_mult2b" brief="The MMA865X FIFO example application demonstrates the use of the MMA865X sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_freefall">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_freefall" type="xml">
            <files mask="mma865x_freefall_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mma865x_interrupt_mult2b" name="mma865x_interrupt_mult2b" brief="The MMA865X FIFO example application demonstrates the use of the MMA865X sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_interrupt">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_interrupt" type="xml">
            <files mask="mma865x_interrupt_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mma865x_poll_mult2b" name="mma865x_poll_mult2b" brief="The MMA865X FIFO example application demonstrates the use of the MMA865X sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_poll">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma865x/mma865x_poll" type="xml">
            <files mask="mma865x_poll_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mma9553_pedometer_i2c_mult2b" name="mma9553_pedometer_i2c_mult2b" brief="The MMA9553 FIFO example application demonstrates the use of the MMA9553 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma9553/mma9553_pedometer_i2c">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mma9553/mma9553_pedometer_i2c" type="xml">
            <files mask="mma9553_pedometer_i2c_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mpl3115_altitude_mult2b" name="mpl3115_altitude_mult2b" brief="The MPL3115 FIFO example application demonstrates the use of the MPL3115 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_altitude">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_altitude" type="xml">
            <files mask="mpl3115_altitude_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mpl3115_fifo_mult2b" name="mpl3115_fifo_mult2b" brief="The MPL3115 FIFO example application demonstrates the use of the MPL3115 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_fifo">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_fifo" type="xml">
            <files mask="mpl3115_fifo_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mpl3115_normal_mult2b" name="mpl3115_normal_mult2b" brief="The MPL3115 FIFO example application demonstrates the use of the MPL3115 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_normal">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_normal" type="xml">
            <files mask="mpl3115_normal_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_mpl3115_oneshot_mult2b" name="mpl3115_oneshot_mult2b" brief="The MPL3115 FIFO example application demonstrates the use of the MPL3115 sensor in Buffered (FIFO) Mode.The example demonstrates configuration of all registers reguired to put the sensor in FIFO Mode and read out samples.The sensor reads samples and are buffered upto the configured Water Mark Level and then a Flag is set.The application consistently checks the Flag and when set, reads out all(count=Water Mark Level) samples." toolchain="armgcc iar mcuxpresso mdk" category="issdk/sensors" path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_oneshot">
          <external path="boards/frdmk64f_mult2b/issdk_examples/sensors/mpl3115/mpl3115_oneshot" type="xml">
            <files mask="mpl3115_oneshot_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_pedometer_mult2b" name="pedometer_mult2b" brief="The baremetal Sensor Fusion example for FRDM-K64F with FRDM-STBC-AGM01 sensor shield board demonstrates advanced functions for computation of device orientation, linear acceleration, gyro offset and magnetic interference based on the outputs of NXP inertial and magnetic sensors.The sensor fusion algorithms combine the x, y and z outputs from each of an accelerometer, magnetometer and gyroscope sensor." toolchain="iar mcuxpresso" category="issdk/algorithms" path="boards/frdmk64f_mult2b/issdk_examples/algorithms/pedometer/pedometer_mult2b">
          <external path="boards/frdmk64f_mult2b/issdk_examples/algorithms/pedometer/pedometer_mult2b" type="xml">
            <files mask="pedometer_mult2b.xml"/>
          </external>
        </example>
        <example id="frdmk64f_mult2b_sensorfusion_bm_mult2b" name="sensorfusion_bm_mult2b" brief="The baremetal Sensor Fusion example for FRDM-K64F with FRDM-STBC-AGM01 sensor shield board demonstrates advanced functions for computation of device orientation, linear acceleration, gyro offset and magnetic interference based on the outputs of NXP inertial and magnetic sensors.The sensor fusion algorithms combine the x, y and z outputs from each of an accelerometer, magnetometer and gyroscope sensor." toolchain="armgcc iar mcuxpresso" category="issdk/algorithms" path="boards/frdmk64f_mult2b/issdk_examples/algorithms/sensorfusion/baremetal_mult2b">
          <external path="boards/frdmk64f_mult2b/issdk_examples/algorithms/sensorfusion/baremetal_mult2b" type="xml">
            <files mask="sensorfusion_bm_mult2b.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MK64FN1M0xxx12" name="MK64F12" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MK64FN1M0xxx12">
      <description>K64_120: KinetisÂ® K64-120 MHz, 256KB SRAM Microcontrollers (MCUs) based on ARMÂ® CortexÂ®-M4 Core</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="USB_KHCI_Controller_number" value="1"/>
        <metadata key="html">
          <specific>
            <content>The Kinetis K series MCU portfolio offers the broadest selection of pin, peripheral- and software-compatible MCU families based on the ARMÂ® CortexÂ®-M4 core. The Kinetis K64 120 MHz MCUs feature:IEEEÂ® 1588 Ethernet MCUs. Optimization for applications requiring large memory densities and low-power processing efficiency. Crystal-less USB design for reduced system cost and board space. The comprehensive enablement and scalability of the Kinetis portfolio.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
        <metadata key="vendor.device.type" value="Kinetis"/>
        <metadata key="vendor.device.family" value="K6x"/>
      </metadataSet>
      <core id="core0_MK64FN1M0xxx12" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MK64FN1M0xxx12" name="PROGRAM_FLASH" addr="00000000" size="00100000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MK64FN1M0xxx12" name="SRAM_UPPER" addr="20000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MK64FN1M0xxx12" name="SRAM_LOWER" addr="1fff0000" size="00010000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MK64FN1M0xxx12" name="FLEX_RAM" addr="14000000" size="00001000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="1024" ram_size_kb="256"/>
      <package id="MK64FN1M0VDC12" name="MK64FN1M0VDC12"/>
      <package id="MK64FN1M0VLL12" name="MK64FN1M0VLL12"/>
      <package id="MK64FN1M0VLQ12" name="MK64FN1M0VLQ12"/>
      <package id="MK64FN1M0VMD12" name="MK64FN1M0VMD12"/>
      <package id="MK64FN1M0CAJ12" name="MK64FN1M0CAJ12"/>
      <evaluation_boards>
        <evaluation_board name="frdmk64f"/>
        <evaluation_board name="twrk64f120m"/>
        <evaluation_board name="hexiwear"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MK64FN1M0xxx12" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MK64FN1M0xxx12" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MK64FN1M0xxx12" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MK64FN1M0xxx12">
              <driverBinary path="devices/MK64F12/mcuxpresso" type="binary">
                <files mask="FTFE_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk64f.MK64F12" name="frdmk64f" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 component.serial_manager_uart.MK64F12 component.uart_adapter.MK64F12 device.MK64F12_CMSIS.MK64F12 device.MK64F12_startup.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.adc16.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dspi.MK64F12 platform.drivers.gpio.MK64F12 platform.drivers.i2c.MK64F12 platform.drivers.port.MK64F12 platform.drivers.rtc.MK64F12 platform.drivers.smc.MK64F12 platform.drivers.uart.MK64F12 utility.debug_console.MK64F12" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/frdmk64f/project_template" target_path="board/boards" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/frdmk64f/project_template" target_path="board/boards" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="project_template.frdmk64f_mult2b.MK64F12" name="frdmk64f_mult2b" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 component.serial_manager_uart.MK64F12 component.uart_adapter.MK64F12 device.MK64F12_CMSIS.MK64F12 device.MK64F12_startup.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.gpio.MK64F12 platform.drivers.port.MK64F12 platform.drivers.smc.MK64F12 platform.drivers.uart.MK64F12 utility.debug_console.MK64F12" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/frdmk64f_mult2b/project_template" target_path="src" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/frdmk64f_mult2b/project_template" target_path="src" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MK64F12" name="CMSIS" version="5.1.1" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USART_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USB_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK64F12 platform.Include_common.MK64F12" user_visible="true" type="CMSIS">
      <source path="CMSIS/Include" target_path="src" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="src" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" version="5.1.1" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="src" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK64F12" name="CAN" version="1.2.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" name="Common" version="5.1.1" devices="MK64FN1M0xxx12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK64F12" name="Ethernet" version="2.1.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK64F12" name="Ethernet_MAC" version="2.1.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK64F12" name="Ethernet_PHY" version="2.1.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK64F12" name="Flash" version="2.1.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12" name="I2C" version="2.3.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK64F12" name="MCI" version="2.3.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK64F12" name="NAND" version="2.3.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK64F12" name="SAI" version="1.1.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" name="SPI" version="2.2.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK64F12" name="USART" version="2.3.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK64F12" name="USB" version="2.2.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK64F12" name="USB_Device" version="2.2.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USB_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK64F12" name="USB_Host" version="2.2.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USB_CMSISInclude.MK64F12" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MK64F12" name="CMSIS_Include_common" version="5.1.1" devices="MK64FN1M0xxx12" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MK64F12" name="CMSIS_Include_core_cm4" version="5.1.1" devices="MK64FN1M0xxx12" dependency="platform.Include_common.MK64F12" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
      </source>
    </component>
    <component id="project_template.MK64F12.MK64F12" name="MK64F12" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 component.serial_manager_uart.MK64F12 component.uart_adapter.MK64F12 device.MK64F12_CMSIS.MK64F12 device.MK64F12_startup.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.adc16.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dspi.MK64F12 platform.drivers.gpio.MK64F12 platform.drivers.i2c.MK64F12 platform.drivers.port.MK64F12 platform.drivers.rtc.MK64F12 platform.drivers.smc.MK64F12 platform.drivers.uart.MK64F12 utility.debug_console.MK64F12" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MK64F12/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MK64F12/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MK64F12" name="RTE_Device" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MK64F12/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MK64F12" name="cmake_toolchain" version="1.0.0" devices="MK64FN1M0xxx12" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="src" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MK64F12" name="button" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.timer_manager.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.ftm_adapter.MK64F12" name="ftm_adapter" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.ftm.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="ftm_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.gpio_kinetis.MK64F12" name="gpio_kinetis" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.gpio.MK64F12 platform.drivers.port.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_kinetis.c"/>
      </source>
    </component>
    <component id="component.led.MK64F12" name="led" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.timer_manager.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MK64F12" name="lists" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lptmr_adapter.MK64F12" name="lptmr_adapter" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.lptmr.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lptmr_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MK64F12" name="osa_bm" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.panic.MK64F12" name="panic" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 utility.debug_console.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.serial_manager.MK64F12" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MK64F12" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.uart.MK64F12" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.frdmk64f.MK64F12" name="frdmk64f" version="1.0.0" devices="MK64FN1M0xxx12" category="Device/SDK Utilities" user_visible="true" type="other">
      <source path="boards/frdmk64f/component_examples/config" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="component.timer_manager.MK64F12" name="timer_manager" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.uart_adapter.MK64F12" name="uart_adapter" version="1.0.0" full_name="uart_adapter" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.uart.MK64F12" user_visible="true" type="utilities">
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="uart_adapter.c"/>
      </source>
    </component>
    <component id="device.MK64F12_CMSIS.MK64F12" name="MK64F12_CMSIS" version="1.0.0" devices="MK64FN1M0xxx12" dependency="platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12" user_visible="true" type="CMSIS_Include">
      <source path="devices/MK64F12" target_path="device" type="c_include">
        <files mask="MK64F12.h"/>
        <files mask="MK64F12_features.h"/>
        <files mask="fsl_device_registers.h"/>
        <files mask="system_MK64F12.h"/>
      </source>
      <source path="devices/MK64F12" target_path="device" type="src">
        <files mask="system_MK64F12.c"/>
      </source>
    </component>
    <component id="device.MK64F12_debugger.MK64F12" name="MK64F12_debugger" version="1.0.0" devices="MK64FN1M0xxx12" user_visible="true" type="debugger">
      <source path="devices/MK64F12" target_path="src" type="xml">
        <files mask="MK64F12.xml"/>
      </source>
    </component>
    <component id="platform.devices.MK64F12_linker.MK64F12" name="MK64F12_linker" version="1.0.0" devices="MK64FN1M0xxx12" user_visible="true" type="linker">
      <source toolchain="mdk" path="devices/MK64F12/arm" target_path="src" type="linker">
        <files mask="MK64FN1M0xxx12_flash.scf"/>
        <files mask="MK64FN1M0xxx12_ram.scf"/>
      </source>
      <source toolchain="armgcc" path="devices/MK64F12/gcc" target_path="src" type="linker">
        <files mask="MK64FN1M0xxx12_flash.ld"/>
        <files mask="MK64FN1M0xxx12_ram.ld"/>
      </source>
      <source toolchain="iar" path="devices/MK64F12/iar" target_path="src" type="linker">
        <files mask="MK64FN1M0xxx12_flash.icf"/>
        <files mask="MK64FN1M0xxx12_ram.icf"/>
      </source>
    </component>
    <component id="device.MK64F12_startup.MK64F12" name="MK64F12_startup" version="1.0.0" devices="MK64FN1M0xxx12" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="mdk" path="devices/MK64F12/arm" target_path="startup" type="asm_include">
        <files mask="startup_MK64F12.s"/>
      </source>
      <source toolchain="armgcc" path="devices/MK64F12/gcc" target_path="startup" type="asm_include">
        <files mask="startup_MK64F12.S"/>
      </source>
      <source toolchain="iar" path="devices/MK64F12/iar" target_path="startup" type="asm_include">
        <files mask="startup_MK64F12.s"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MK64F12/mcuxpresso" target_path="startup" type="src_c">
        <files mask="startup_mk64f12.c"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MK64F12/mcuxpresso" target_path="startup" type="src_cpp">
        <files mask="startup_mk64f12.cpp"/>
      </source>
    </component>
    <component id="docs.MK64F12.MK64F12" name="MK64F12" version="1.0.0" devices="MK64FN1M0xxx12" user_visible="true" type="documentation">
      <source path="docs" target_path="src" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes_MK64F12.pdf"/>
      </source>
    </component>
    <component id="docs.images.MK64F12" name="images" version="1.0.0" devices="MK64FN1M0xxx12" user_visible="true" type="documentation">
      <source path="docs/images" target_path="src" type="image">
        <files mask="FRDM-K64F-MULT2B.gif"/>
        <files mask="FRDM-K64F.gif"/>
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MK64F12" name="adc" brief="ADC16 Driver" version="2.0.2" full_name="ADC16 Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MK64F12" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp.MK64F12" name="cmp" brief="CMP Driver" version="2.0.1" full_name="CMP Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi_cmsis.MK64F12" name="dspi_cmsis" brief="DSPI CMSIS Driver" version="2.0.0" devices="MK64FN1M0xxx12" dependency="RTE_Device.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.dspi.MK64F12 platform.drivers.dspi_edma.MK64F12 platform.drivers.edma.MK64F12" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi_cmsis.c"/>
      </source>
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.enet_cmsis.MK64F12" name="enet_cmsis" brief="ENET CMSIS Driver" version="2.0.0" full_name="ENET CMSIS Driver" devices="MK64FN1M0xxx12" dependency="RTE_Device.MK64F12 device.MK64F12_CMSIS.MK64F12 driver.phyksz8041.MK64F12 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12 platform.drivers.enet.MK64F12" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_enet_cmsis.c"/>
        <files mask="fsl_enet_phy_cmsis.c"/>
      </source>
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_enet_cmsis.h"/>
        <files mask="fsl_enet_phy_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_cmsis_edma.MK64F12" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.2" devices="MK64FN1M0xxx12" dependency="RTE_Device.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12 platform.drivers.i2c.MK64F12 platform.drivers.i2c_edma.MK64F12" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart_cmsis_edma.MK64F12" name="uart_cmsis" brief="UART CMSIS Driver" version="2.0.1" devices="MK64FN1M0xxx12" dependency="RTE_Device.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.USART_CMSISInclude.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12 platform.drivers.uart.MK64F12 platform.drivers.uart_edma.MK64F12" user_visible="true" type="CMSIS_driver">
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_cmsis.c"/>
      </source>
      <source path="devices/MK64F12/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmt.MK64F12" name="cmt" brief="CMT Driver" version="2.0.2" full_name="CMT Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmt.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmt.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MK64F12" name="common" brief="COMMON Driver" version="2.1.0" full_name="COMMON Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.crc.MK64F12" name="crc" brief="CRC Driver" version="2.0.1" full_name="CRC Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac.MK64F12" name="dac" brief="DAC Driver" version="2.0.1" full_name="DAC Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MK64F12" name="dmamux" brief="DMAMUX Driver" version="2.0.2" full_name="DMAMUX Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi.MK64F12" name="dspi" brief="DSPI Driver" version="2.2.1" full_name="DSPI Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.dspi_edma.MK64F12" name="dspi_edma" brief="DSPI Driver" version="2.2.1" full_name="DSPI_EDMA Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.dspi.MK64F12 platform.drivers.edma.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_dspi_edma.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.edma.MK64F12" name="edma" brief="EDMA Driver" version="2.1.8" full_name="EDMA Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.enet.MK64F12" name="enet" brief="ENET Driver" version="2.2.4" full_name="ENET Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_enet.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_enet.h"/>
      </source>
    </component>
    <component id="platform.drivers.ewm.MK64F12" name="ewm" brief="EWM Driver" version="2.0.1" full_name="EWM Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MK64F12" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexbus.MK64F12" name="flexbus" brief="FLEXBUS Driver" version="2.1.0" full_name="FLEXBUS Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexbus.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexbus.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan.MK64F12" name="flexcan" brief="FLEXCAN Driver" version="2.4.0" full_name="FLEXCAN Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
    </component>
    <component id="driver.ft6x06.MK64F12" name="ft6x06" version="1.0.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12" category="Device/SDK Drivers" user_visible="false" type="other">
      <source path="components/ft6x06" target_path="touchpanel" type="src">
        <files mask="fsl_ft6x06.c"/>
      </source>
      <source path="components/ft6x06" target_path="touchpanel" type="c_include">
        <files mask="fsl_ft6x06.h"/>
      </source>
    </component>
    <component id="platform.drivers.ftm.MK64F12" name="ftm" brief="FTM Driver" version="2.1.1" full_name="FTM Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
    </component>
    <component id="driver.fxos8700cq.MK64F12" name="fxos8700cq" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/fxos8700cq" target_path="accel" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source path="components/fxos8700cq" target_path="accel" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MK64F12" name="gpio" brief="GPIO Driver" version="2.3.2" full_name="GPIO Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c.MK64F12" name="i2c" brief="I2C Driver" version="2.0.7" full_name="I2C Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_edma.MK64F12" name="i2c_edma" brief="I2C Driver" version="2.0.7" full_name="I2C Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12 platform.drivers.i2c.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_edma.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_edma.h"/>
      </source>
    </component>
    <component id="driver.ili9341.MK64F12" name="ili9341" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/ili9341" target_path="lcd" type="src">
        <files mask="fsl_ili9341.c"/>
      </source>
      <source path="components/ili9341" target_path="lcd" type="c_include">
        <files mask="fsl_ili9341.h"/>
      </source>
    </component>
    <component id="platform.drivers.llwu.MK64F12" name="llwu" brief="LLWU Driver" version="2.0.2" full_name="LLWU Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MK64F12" name="lptmr" brief="LPTMR Driver" version="2.0.2" full_name="LPTMR Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdb.MK64F12" name="pdb" brief="PDB Driver" version="2.0.2" full_name="PDB Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
    </component>
    <component id="driver.phyksz8041.MK64F12" name="phyksz8041" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.enet.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/phyksz8041" target_path="board" type="src">
        <files mask="fsl_phy.c"/>
      </source>
      <source path="components/phyksz8041" target_path="board" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
    </component>
    <component id="driver.phyksz8081.MK64F12" name="phyksz8081" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.enet.MK64F12" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/phyksz8081" target_path="board" type="src">
        <files mask="fsl_phy.c"/>
      </source>
      <source path="components/phyksz8081" target_path="board" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
    </component>
    <component id="platform.drivers.pit.MK64F12" name="pit" brief="PIT Driver" version="2.0.2" full_name="PIT Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MK64F12" name="pmc" brief="PMC Driver" version="2.0.1" full_name="PMC Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MK64F12" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MK64F12" name="rcm" brief="RCM Driver" version="2.0.2" full_name="RCM Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rnga.MK64F12" name="rnga" brief="RNGA Driver" version="2.0.1" full_name="RNGA Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_rnga.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rnga.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MK64F12" name="rtc" brief="RTC Driver" version="2.2.0" full_name="RTC Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MK64F12" name="sai" brief="SAI Driver" version="2.2.1" full_name="SAI Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_edma.MK64F12" name="sai_edma" brief="SAI Driver" version="2.2.0" full_name="SAI Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12 platform.drivers.sai.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.sdhc.MK64F12" name="sdhc" brief="SDHC Driver" version="2.1.9" full_name="SDHC Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_sdhc.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sdhc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MK64F12" name="sim" brief="SIM Driver" version="2.1.0" full_name="SIM Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MK64F12" name="smc" brief="SMC Driver" version="2.0.5" full_name="SMC Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sysmpu.MK64F12" name="sysmpu" brief="SYSMPU Driver" version="2.2.1" full_name="SYSMPU Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_sysmpu.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sysmpu.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart.MK64F12" name="uart" brief="UART Driver" version="2.1.6" full_name="UART Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart_edma.MK64F12" name="uart_edma" brief="UART Driver" version="2.1.6" full_name="UART Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 platform.drivers.dmamux.MK64F12 platform.drivers.edma.MK64F12 platform.drivers.uart.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_edma.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.vref.MK64F12" name="vref" brief="VREF Driver" version="2.1.1" full_name="VREF Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog.MK64F12" name="wdog" brief="WDOG Driver" version="2.0.0" full_name="WDOG Driver" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="driver">
      <source path="devices/MK64F12/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source path="devices/MK64F12/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MK64F12" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MK64FN1M0xxx12" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.issdk.algorithms.pedometer.MK64F12" name="pedometer" brief="ISSDK Pedometer Algorithm Common" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/algorithms/pedometer/include/libinclude" target_path="pedometer" type="c_include">
        <files mask="KeynetikPedometer.h"/>
      </source>
      <source path="middleware/issdk/algorithms/pedometer/include" target_path="pedometer" type="c_include">
        <files mask="pedometer.h"/>
      </source>
      <source path="middleware/issdk/algorithms/pedometer/source" target_path="pedometer" type="src">
        <files mask="pedometer.c"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.pedometer.lib_cm4.MK64F12" name="pedometer_lib_cm4" brief="ISSDK Pedometer Algorithm Library for CM4" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="false" type="other">
      <source path="middleware/issdk/algorithms/pedometer/lib" target_path="libs" type="lib">
        <files mask="libpedometerm4.a"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.sensor_fusion_agm01.MK64F12" name="sensor_fusion_agm01" brief="ISSDK Sensor Fusion Algorithm Common for Kinetis MCU with AGM01" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="src">
        <files mask="DecodeCommandBytes.c"/>
        <files mask="approximations.c"/>
        <files mask="calibration_storage.c"/>
        <files mask="control.c"/>
        <files mask="debug.c"/>
        <files mask="driver_FXAS21002.c"/>
        <files mask="driver_FXOS8700.c"/>
        <files mask="driver_KSDK_NVM.c"/>
        <files mask="driver_MPL3115.c"/>
        <files mask="driver_pit.c"/>
        <files mask="driver_systick.c"/>
        <files mask="fusion.c"/>
        <files mask="hal_frdm_fxs_mult2_b.c"/>
        <files mask="magnetic.c"/>
        <files mask="matrix.c"/>
        <files mask="orientation.c"/>
        <files mask="output_stream.c"/>
        <files mask="precisionAccelerometer.c"/>
        <files mask="sensor_fusion.c"/>
        <files mask="status.c"/>
      </source>
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="c_include">
        <files mask="approximations.h"/>
        <files mask="calibration_storage.h"/>
        <files mask="control.h"/>
        <files mask="debug.h"/>
        <files mask="driver_KSDK_NVM.h"/>
        <files mask="driver_pit.h"/>
        <files mask="drivers.h"/>
        <files mask="fusion.h"/>
        <files mask="magnetic.h"/>
        <files mask="matrix.h"/>
        <files mask="orientation.h"/>
        <files mask="precisionAccelerometer.h"/>
        <files mask="sensor_fusion.h"/>
        <files mask="status.h"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.sensor_fusion_agm04.MK64F12" name="sensor_fusion_agm04" brief="ISSDK Sensor Fusion Algorithm Common for Kinetis MCU with AGM04" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="src">
        <files mask="DecodeCommandBytes.c"/>
        <files mask="approximations.c"/>
        <files mask="calibration_storage.c"/>
        <files mask="control.c"/>
        <files mask="debug.c"/>
        <files mask="driver_FXAS21002.c"/>
        <files mask="driver_KSDK_NVM.c"/>
        <files mask="driver_MAG3110.c"/>
        <files mask="driver_MMA8652.c"/>
        <files mask="driver_pit.c"/>
        <files mask="driver_systick.c"/>
        <files mask="fusion.c"/>
        <files mask="hal_frdm_fxs_mult2_b.c"/>
        <files mask="magnetic.c"/>
        <files mask="matrix.c"/>
        <files mask="orientation.c"/>
        <files mask="output_stream.c"/>
        <files mask="precisionAccelerometer.c"/>
        <files mask="sensor_fusion.c"/>
        <files mask="status.c"/>
      </source>
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="c_include">
        <files mask="approximations.h"/>
        <files mask="calibration_storage.h"/>
        <files mask="control.h"/>
        <files mask="debug.h"/>
        <files mask="driver_KSDK_NVM.h"/>
        <files mask="driver_pit.h"/>
        <files mask="drivers.h"/>
        <files mask="fusion.h"/>
        <files mask="magnetic.h"/>
        <files mask="matrix.h"/>
        <files mask="orientation.h"/>
        <files mask="precisionAccelerometer.h"/>
        <files mask="sensor_fusion.h"/>
        <files mask="status.h"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.sensor_fusion_agmp03.MK64F12" name="sensor_fusion_agmp03" brief="ISSDK Sensor Fusion Algorithm Common for Kinetis MCU with AGMP03" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="src">
        <files mask="DecodeCommandBytes.c"/>
        <files mask="approximations.c"/>
        <files mask="calibration_storage.c"/>
        <files mask="control.c"/>
        <files mask="debug.c"/>
        <files mask="driver_FXAS21002.c"/>
        <files mask="driver_FXLS8962.c"/>
        <files mask="driver_KSDK_NVM.c"/>
        <files mask="driver_MAG3110.c"/>
        <files mask="driver_MPL3115.c"/>
        <files mask="driver_pit.c"/>
        <files mask="driver_systick.c"/>
        <files mask="fusion.c"/>
        <files mask="hal_frdm_fxs_mult2_b.c"/>
        <files mask="magnetic.c"/>
        <files mask="matrix.c"/>
        <files mask="orientation.c"/>
        <files mask="output_stream.c"/>
        <files mask="precisionAccelerometer.c"/>
        <files mask="sensor_fusion.c"/>
        <files mask="status.c"/>
      </source>
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="c_include">
        <files mask="approximations.h"/>
        <files mask="calibration_storage.h"/>
        <files mask="control.h"/>
        <files mask="debug.h"/>
        <files mask="driver_KSDK_NVM.h"/>
        <files mask="driver_pit.h"/>
        <files mask="drivers.h"/>
        <files mask="fusion.h"/>
        <files mask="magnetic.h"/>
        <files mask="matrix.h"/>
        <files mask="orientation.h"/>
        <files mask="precisionAccelerometer.h"/>
        <files mask="sensor_fusion.h"/>
        <files mask="status.h"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.sensor_fusion_lpc_agm01.MK64F12" name="sensor_fusion_lpc_agm01" brief="ISSDK Sensor Fusion Algorithm Common for LPC MCU with AGM01" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="src">
        <files mask="DecodeCommandBytes.c"/>
        <files mask="approximations.c"/>
        <files mask="calibration_storage.c"/>
        <files mask="control_lpc.c"/>
        <files mask="debug.c"/>
        <files mask="driver_FXAS21002.c"/>
        <files mask="driver_FXOS8700.c"/>
        <files mask="driver_KSDK_NVM.c"/>
        <files mask="driver_MPL3115.c"/>
        <files mask="driver_systick.c"/>
        <files mask="fusion.c"/>
        <files mask="hal_frdm_fxs_mult2_b.c"/>
        <files mask="magnetic.c"/>
        <files mask="matrix.c"/>
        <files mask="orientation.c"/>
        <files mask="output_stream.c"/>
        <files mask="precisionAccelerometer.c"/>
        <files mask="sensor_fusion.c"/>
        <files mask="status.c"/>
      </source>
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="c_include">
        <files mask="approximations.h"/>
        <files mask="calibration_storage.h"/>
        <files mask="control.h"/>
        <files mask="debug.h"/>
        <files mask="driver_KSDK_NVM.h"/>
        <files mask="drivers.h"/>
        <files mask="fusion.h"/>
        <files mask="magnetic.h"/>
        <files mask="matrix.h"/>
        <files mask="orientation.h"/>
        <files mask="precisionAccelerometer.h"/>
        <files mask="sensor_fusion.h"/>
        <files mask="status.h"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.sensor_fusion_lpc_agmp03.MK64F12" name="sensor_fusion_lpc_agmp03" brief="ISSDK Sensor Fusion Algorithm Common for LPC MCU with AGMP03" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="src">
        <files mask="DecodeCommandBytes.c"/>
        <files mask="approximations.c"/>
        <files mask="calibration_storage.c"/>
        <files mask="control_lpc.c"/>
        <files mask="debug.c"/>
        <files mask="driver_FXAS21002.c"/>
        <files mask="driver_FXLS8962.c"/>
        <files mask="driver_KSDK_NVM.c"/>
        <files mask="driver_MAG3110.c"/>
        <files mask="driver_MPL3115.c"/>
        <files mask="driver_systick.c"/>
        <files mask="fusion.c"/>
        <files mask="hal_frdm_fxs_mult2_b.c"/>
        <files mask="magnetic.c"/>
        <files mask="matrix.c"/>
        <files mask="orientation.c"/>
        <files mask="output_stream.c"/>
        <files mask="precisionAccelerometer.c"/>
        <files mask="sensor_fusion.c"/>
        <files mask="status.c"/>
      </source>
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="c_include">
        <files mask="approximations.h"/>
        <files mask="calibration_storage.h"/>
        <files mask="control.h"/>
        <files mask="debug.h"/>
        <files mask="driver_KSDK_NVM.h"/>
        <files mask="drivers.h"/>
        <files mask="fusion.h"/>
        <files mask="magnetic.h"/>
        <files mask="matrix.h"/>
        <files mask="orientation.h"/>
        <files mask="precisionAccelerometer.h"/>
        <files mask="sensor_fusion.h"/>
        <files mask="status.h"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.sensor_fusion_mult2b.MK64F12" name="sensor_fusion_mult2b" brief="ISSDK Sensor Fusion Algorithm Common for Kinetis MCU with MULT2B" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="src">
        <files mask="DecodeCommandBytes.c"/>
        <files mask="approximations.c"/>
        <files mask="calibration_storage.c"/>
        <files mask="control.c"/>
        <files mask="debug.c"/>
        <files mask="driver_FXAS21002.c"/>
        <files mask="driver_FXOS8700.c"/>
        <files mask="driver_KSDK_NVM.c"/>
        <files mask="driver_MPL3115.c"/>
        <files mask="driver_pit.c"/>
        <files mask="driver_systick.c"/>
        <files mask="fusion.c"/>
        <files mask="hal_frdm_fxs_mult2_b.c"/>
        <files mask="magnetic.c"/>
        <files mask="matrix.c"/>
        <files mask="orientation.c"/>
        <files mask="output_stream.c"/>
        <files mask="precisionAccelerometer.c"/>
        <files mask="sensor_fusion.c"/>
        <files mask="status.c"/>
      </source>
      <source path="middleware/issdk/algorithms/sensorfusion/sources" target_path="sensor_fusion" type="c_include">
        <files mask="approximations.h"/>
        <files mask="calibration_storage.h"/>
        <files mask="control.h"/>
        <files mask="debug.h"/>
        <files mask="driver_KSDK_NVM.h"/>
        <files mask="driver_pit.h"/>
        <files mask="drivers.h"/>
        <files mask="fusion.h"/>
        <files mask="magnetic.h"/>
        <files mask="matrix.h"/>
        <files mask="orientation.h"/>
        <files mask="precisionAccelerometer.h"/>
        <files mask="sensor_fusion.h"/>
        <files mask="status.h"/>
      </source>
    </component>
    <component id="middleware.issdk.drivers.ads.MK64F12" name="ads" brief="ISSDK Auto Detection Service for Kinetis Kits" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="false" type="other">
      <source path="middleware/issdk/drivers/ads" target_path="ads" type="c_include">
        <files mask="auto_detection_shield.h"/>
      </source>
      <source path="middleware/issdk/drivers/ads/kinetis" target_path="ads" type="src">
        <files mask="auto_detection_service.c"/>
      </source>
      <source path="middleware/issdk/drivers/ads/kinetis" target_path="ads" type="c_include">
        <files mask="auto_detection_service.h"/>
      </source>
    </component>
    <component id="cmsis.drivers.include.MK64F12" name="issdk_cmsis_drivers" brief="CMSIS Core header files" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="true" type="other">
      <source path="CMSIS/Driver/Include" target_path="cmsis_driver" type="c_include">
        <files mask="Driver_Common.h"/>
        <files mask="Driver_I2C.h"/>
        <files mask="Driver_SPI.h"/>
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="middleware.issdk.drivers.gpio_kinetis.MK64F12" name="gpio_kinetis" brief="ISSDK GPIO Driver for Kinetis" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="true" type="other">
      <source path="middleware/issdk/drivers/gpio" target_path="gpio_driver" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <source path="middleware/issdk/drivers/gpio/kinetis" target_path="gpio_driver" type="src">
        <files mask="gpio_driver.c"/>
        <files mask="gpio_driver_irq.c"/>
      </source>
      <source path="middleware/issdk/drivers/gpio/kinetis" target_path="gpio_driver" type="c_include">
        <files mask="gpio_driver.h"/>
      </source>
    </component>
    <component id="middleware.issdk.drivers.host.MK64F12" name="issdk_host" brief="ISSDK Host Interface Service" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="true" type="other">
      <source path="middleware/issdk/drivers/host" target_path="host" type="src">
        <files mask="comm_if_uart.c"/>
        <files mask="data_format_hdlc.c"/>
        <files mask="data_format_json.c"/>
        <files mask="host_interface_service.c"/>
      </source>
      <source path="middleware/issdk/drivers/host" target_path="host" type="c_include">
        <files mask="comm_interface.h"/>
        <files mask="data_format_hdlc.h"/>
        <files mask="data_format_json.h"/>
        <files mask="data_format_service.h"/>
        <files mask="host_interface_service.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="host" type="src">
        <files mask="host_io_uart.c"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="host" type="c_include">
        <files mask="host_io_uart.h"/>
      </source>
    </component>
    <component id="middleware.issdk.drivers.systick_utils.MK64F12" name="systick_utils" brief="ISSDK Utils" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="true" type="other">
      <source path="middleware/issdk/drivers/systick" target_path="utilities" type="src">
        <files mask="systick_utils.c"/>
      </source>
      <source path="middleware/issdk/drivers/systick" target_path="utilities" type="c_include">
        <files mask="systick_utils.h"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.allregdefs.MK64F12" name="issdk_allregdefs" brief="ISSDK Sensors RegDefs" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="diff_p.h"/>
        <files mask="fxas21002.h"/>
        <files mask="fxlc95000.h"/>
        <files mask="fxls8471q.h"/>
        <files mask="fxls8962.h"/>
        <files mask="fxos8700.h"/>
        <files mask="fxpq3115.h"/>
        <files mask="mag3110.h"/>
        <files mask="mma845x.h"/>
        <files mask="mma8491q.h"/>
        <files mask="mma865x.h"/>
        <files mask="mma9553.h"/>
        <files mask="mpl3115.h"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.boardkit.MK64F12" name="issdk_boardkit" brief="ISSDK Board-Kit files" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="false" type="other">
      <source path="middleware/issdk/boardkit/evk-mimxrt1050" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="evkmimxrt1050.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/evk-mimxrt1050" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="evkmimxrt1050.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/evk-mimxrt1050/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/evkb-imxrt1050" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="evkbimxrt1050.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/evkb-imxrt1050" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="evkbimxrt1050.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/evkb-imxrt1050/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k22f" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="frdm_k22f.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k22f" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="frdm_k22f.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k22f/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k22f/frdm-stbc-agmp03" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agmp03_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k22f/frdm-stbc-sa9500" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_sa9500_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k32w042" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="frdm_k32w042.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k32w042" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="frdm_k32w042.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k32w042/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k64f" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="frdm_k64f.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k64f" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="frdm_k64f.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k64f/frdm-fxs-mult2-b" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_fxs_mult2b_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k64f/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-k64f/frdm-stbc-agm04" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm04_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-ke15z" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="frdm_ke15z.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-ke15z" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="frdm_ke15z.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-ke15z/frdm-stbc-dp5004" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm-stbc-dp5004_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-ke15z/frdm-stbi-dp300x" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm-stbi-dp300x_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="frdm_kl25z.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="frdm_kl25z.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z/frdm-stbc-a8471" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_a8471_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z/frdm-stbc-a8491" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_a8491_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z/frdm-stbc-p3115" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_p3115_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z/frdm" target_path="issdk_boardkit" type="c_include">
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z/rd-kl25z" target_path="issdk_boardkit" type="c_include">
        <files mask="issdk_hal.h"/>
        <files mask="rd_kl25z_gdl.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl25z/virtual_shield" target_path="issdk_boardkit" type="c_include">
        <files mask="issdk_hal.h"/>
        <files mask="virtual_shield.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl27z" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="frdm_kl27z.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl27z" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="frdm_kl27z.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl27z/frdm-stbc-agmp03" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agmp03_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl27z/frdm-stbc-b3115" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_b3115_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/frdm-kl27z/frdm" target_path="issdk_boardkit" type="c_include">
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso54114" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="lpc54114.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso54114" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="lpc54114.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso54114/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso54114/frdm-stbc-agmp03" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agmp03_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso55s69" target_path="issdk_boardkit" type="c_include">
        <files mask="RTE_Device.h"/>
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="lpc55s69.h"/>
        <files mask="pin_mux.h"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso55s69" target_path="issdk_boardkit" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="lpc55s69.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="middleware/issdk/boardkit/lpcxpresso55s69/frdm-stbc-agm01" target_path="issdk_boardkit" type="c_include">
        <files mask="frdm_stbc_agm01_shield.h"/>
        <files mask="issdk_hal.h"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.driverexamples.MK64F12" name="issdk_driverexamples" brief="ISSDK Sensor Driver Examples files" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="false" type="other">
      <source path="middleware/issdk/driverexamples/demos" target_path="issdk_driverexamples" type="src">
        <files mask="data_logger_demo.c"/>
        <files mask="demo_11_axis_mult2b.c"/>
        <files mask="diff_p_demo.c"/>
        <files mask="dp5004_demo.c"/>
        <files mask="fxas21002_demo.c"/>
        <files mask="fxas21002_poll_demo.c"/>
        <files mask="fxlc95000_flash_demo.c"/>
        <files mask="fxls8471_demo.c"/>
        <files mask="fxls8471_demo_kl25z.c"/>
        <files mask="fxls8962_demo.c"/>
        <files mask="fxos8700_demo.c"/>
        <files mask="fxos8700_poll_demo.c"/>
        <files mask="fxpq3115_demo.c"/>
        <files mask="host_demo.c"/>
        <files mask="mag3110_demo.c"/>
        <files mask="mag3110_poll_demo.c"/>
        <files mask="mma845x_demo.c"/>
        <files mask="mma8491q_demo.c"/>
        <files mask="mma865x_demo.c"/>
        <files mask="mma9553_demo.c"/>
        <files mask="mpl3115_demo.c"/>
        <files mask="mpl3115_oneShot_demo.c"/>
        <files mask="mpl3115_poll_demo.c"/>
        <files mask="orientaion_application_baremetal_agm01.c"/>
        <files mask="orientaion_application_baremetal_agm04.c"/>
        <files mask="orientaion_application_baremetal_agmp03.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/dp5004" target_path="issdk_driverexamples" type="src">
        <files mask="dp5004_interrupt.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/fxas21002" target_path="issdk_driverexamples" type="src">
        <files mask="fxas21002_fifo.c"/>
        <files mask="fxas21002_interrupt.c"/>
        <files mask="fxas21002_poll.c"/>
        <files mask="fxas21002_poll_spi.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/fxlc95000" target_path="issdk_driverexamples" type="src">
        <files mask="fxlc95000_accel_i2c.c"/>
        <files mask="fxlc95000_accel_spi.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/fxls8471q" target_path="issdk_driverexamples" type="src">
        <files mask="fxls8471q_spi_fifo.c"/>
        <files mask="fxls8471q_spi_interrupt.c"/>
        <files mask="fxls8471q_spi_poll.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/fxls8962" target_path="issdk_driverexamples" type="src">
        <files mask="fxls8962_fifo_spi.c"/>
        <files mask="fxls8962_freefall.c"/>
        <files mask="fxls8962_interrupt.c"/>
        <files mask="fxls8962_motion_detection.c"/>
        <files mask="fxls8962_normal.c"/>
        <files mask="fxls8962_normal_spi.c"/>
        <files mask="fxls8962_orientation_detection.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/fxos8700" target_path="issdk_driverexamples" type="src">
        <files mask="fxos8700_fifo.c"/>
        <files mask="fxos8700_interrupt.c"/>
        <files mask="fxos8700_poll.c"/>
        <files mask="fxos8700_poll_spi.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/fxpq3115" target_path="issdk_driverexamples" type="src">
        <files mask="fxpq3115_altitude.c"/>
        <files mask="fxpq3115_fifo.c"/>
        <files mask="fxpq3115_fifo_interrupt.c"/>
        <files mask="fxpq3115_normal.c"/>
        <files mask="fxpq3115_normal_interrupt.c"/>
        <files mask="fxpq3115_oneshot.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/mag3110" target_path="issdk_driverexamples" type="src">
        <files mask="mag3110_normal.c"/>
        <files mask="mag3110_normal_interrupt.c"/>
        <files mask="mag3110_oneshot.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/mma845x" target_path="issdk_driverexamples" type="src">
        <files mask="mma845x_fifo.c"/>
        <files mask="mma845x_interrupt.c"/>
        <files mask="mma845x_poll.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/mma8491q" target_path="issdk_driverexamples" type="src">
        <files mask="mma8491q_example.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/mma865x" target_path="issdk_driverexamples" type="src">
        <files mask="mma865x_auto-wake-sleep.c"/>
        <files mask="mma865x_doubletap-detection.c"/>
        <files mask="mma865x_fifo.c"/>
        <files mask="mma865x_freefall-detection.c"/>
        <files mask="mma865x_freefall.c"/>
        <files mask="mma865x_interrupt.c"/>
        <files mask="mma865x_poll.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/mma9553" target_path="issdk_driverexamples" type="src">
        <files mask="mma9553_pedometer_i2c.c"/>
        <files mask="mma9553_pedometer_interrupt.c"/>
        <files mask="mma9553_pedometer_spi.c"/>
      </source>
      <source path="middleware/issdk/driverexamples/mpl3115" target_path="issdk_driverexamples" type="src">
        <files mask="mpl3115_altitude.c"/>
        <files mask="mpl3115_fifo.c"/>
        <files mask="mpl3115_fifo_interrupt.c"/>
        <files mask="mpl3115_normal.c"/>
        <files mask="mpl3115_normal_interrupt.c"/>
        <files mask="mpl3115_oneshot.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.fxas21002.MK64F12" name="issdk_fxas21002" brief="ISSDK FXAS21002 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="fxas21002.h"/>
        <files mask="fxas21002_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="fxas21002_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.fxlc95000.MK64F12" name="issdk_fxlc95000" brief="ISSDK FXLC95000 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="fxlc95000.h"/>
        <files mask="fxlc95000_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="fxlc95000_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.fxls8471q.MK64F12" name="issdk_fxls8471q" brief="ISSDK FXLS8471 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="fxls8471q.h"/>
        <files mask="fxls8471q_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="fxls8471q_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.fxls8962.MK64F12" name="issdk_fxls8962" brief="ISSDK FXLS8962 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="fxls8962.h"/>
        <files mask="fxls8962_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="fxls8962_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.fxos8700.MK64F12" name="issdk_fxos8700" brief="ISSDK FXOS8700 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="fxos8700.h"/>
        <files mask="fxos8700_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="fxos8700_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.fxpq3115.MK64F12" name="issdk_fxpq3115" brief="ISSDK FXPQ3115 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="fxpq3115.h"/>
        <files mask="fxpq3115_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="fxpq3115_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.interface.common.MK64F12" name="issdk_interfaces" brief="ISSDK Sensor Interface Common" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="interfaces" type="src">
        <files mask="register_io_i2c.c"/>
        <files mask="register_io_spi.c"/>
        <files mask="sensor_io_i2c.c"/>
        <files mask="sensor_io_spi.c"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="interfaces" type="c_include">
        <files mask="register_io_i2c.h"/>
        <files mask="register_io_spi.h"/>
        <files mask="sensor_drv.h"/>
        <files mask="sensor_io_i2c.h"/>
        <files mask="sensor_io_spi.h"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.isl29023.MK64F12" name="issdk_isl29023" brief="ISSDK ISL29023 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="isl29023.h"/>
        <files mask="isl29023_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="isl29023_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.mag3110.MK64F12" name="issdk_mag3110" brief="ISSDK MAG3110 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="mag3110.h"/>
        <files mask="mag3110_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="mag3110_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.mma845x.MK64F12" name="issdk_mma845x" brief="ISSDK MMA845x Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="mma845x.h"/>
        <files mask="mma845x_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="mma845x_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.mma8491q.MK64F12" name="issdk_mma8491q" brief="ISSDK MMA8491 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="mma8491q.h"/>
        <files mask="mma8491q_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="mma8491q_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.mma865x.MK64F12" name="issdk_mma865x" brief="ISSDK MMA865x Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="mma865x.h"/>
        <files mask="mma865x_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="mma865x_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.mma9553.MK64F12" name="issdk_mma9553" brief="ISSDK MMA9553 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="mma9553.h"/>
        <files mask="mma9553_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="mma9553_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.mpl3115.MK64F12" name="issdk_mpl3115" brief="ISSDK MPL3115 Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="true" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="mpl3115.h"/>
        <files mask="mpl3115_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="mpl3115_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.nps300x.MK64F12" name="issdk_nps300x" brief="ISSDK nps300x Sensor Driver Files" version="1.7.0" devices="MK64FN1M0xxx12" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK64F12 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK64F12" user_visible="false" type="other">
      <source path="middleware/issdk/sensors" target_path="sensors" type="c_include">
        <files mask="diff_p.h"/>
        <files mask="diff_p_drv.h"/>
      </source>
      <source path="middleware/issdk/sensors" target_path="sensors" type="src">
        <files mask="diff_p_drv.c"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.tools.MK64F12" name="issdk_tools" brief="ISSDK Serial to MQTT bridge application" version="1.7.0" devices="MK64FN1M0xxx12" user_visible="false" type="other">
      <source path="middleware/issdk/tools/Serial_To_MQTT" target_path="issdk_senor" type="script">
        <files mask="CloudBridgeNXPDemo.py"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MK64F12" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MK64FN1M0xxx12" user_visible="true" type="utilities">
      <source toolchain="armgcc" path="devices/MK64F12/utilities" target_path="utilities" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MK64F12" name="assert" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 utility.debug_console.MK64F12" user_visible="true" type="utilities">
      <source path="devices/MK64F12/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MK64F12" name="debug_console" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="utilities">
      <source path="devices/MK64F12/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MK64F12/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MK64F12/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MK64F12/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MK64F12" name="notifier" version="1.0.0" devices="MK64FN1M0xxx12" dependency="device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12" user_visible="true" type="utilities">
      <source path="devices/MK64F12/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MK64F12/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MK64F12" name="shell" version="1.0.0" devices="MK64FN1M0xxx12" dependency="component.lists.MK64F12 component.serial_manager.MK64F12 device.MK64F12_CMSIS.MK64F12 platform.Include_common.MK64F12 platform.Include_core_cm4.MK64F12 platform.drivers.clock.MK64F12 platform.drivers.common.MK64F12 utility.debug_console.MK64F12" user_visible="true" type="utilities">
      <source path="devices/MK64F12/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MK64F12/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
