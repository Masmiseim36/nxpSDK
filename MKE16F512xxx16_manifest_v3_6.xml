<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MKE16F512xxx16" name="MKE16F512xxx16" brief="This is SDK version 2.7.0 manifest file. It describes the content of the MKE16F512xxx16 and additional settings for tools that support SDK version 2.7.0" format_version="3.6" api_version="2.0.0" configuration="2fd9bf5994ee4f180f5456a0be000bd9" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.6.xsd">
  <!--Timestamp (UTC): 2019-12-18 20:06:58.356460-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <ksdk id="MCUXpresso270" name="MCUXpresso270" version="2.7.0" revision="Stage 736 2019-12-18"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.1.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.1.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="twrke18f" name="TWR-KE18F" href="http://www.nxp.com/twr-ke18f" version="1.0.0" package="MKE18F512VLL16">
      <description>TWR-KE18F: Kinetis KE18 MCU Tower System Module</description>
      <image path="docs/images" type="image">
        <files mask="TWR-KE18F.gif"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The TWR-KE18F is a development board for the Kinetis KE1xF 32-bit MCUs.The power supply voltage range from 3.3V to 5V, and it features a KE18 device boasting a maximum operating frequency of 168 MHz, up to 512 KB Flash size and numerous analog and digital peripherals.Board operates as a standalone debug tool and can also be combined and used as part of the modular Tower System development platform</content>
          </specific>
        </metadata>
      </metadataSet>
      <examples>
        <example id="twrke18f_acmp_interrupt" name="acmp_interrupt" brief="The ACMP Interrupt project is a simple demonstration program that uses the SDK software. Itcompares the selected analog input with ACMP internal DAC output continuously and toggle the LEDwhen the final comparison result changed. The purpose of this demo is to show how to use theACMP driver in SDK software by interrupt way. The ACMP can be configured based on defaultconfiguration returned by the API ACMP_GetDefaultConfig(). The default configuration is: highspeed is not enabled, invert output is not enabled, unfiltered output is not enabled, pin outis not enabled, offset level is level 0, hysteresis level is level 0." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="boards/twrke18f/driver_examples/acmp/interrupt">
          <external path="boards/twrke18f/driver_examples/acmp/interrupt" type="xml">
            <files mask="acmp_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_acmp_polling" name="acmp_polling" brief="The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="boards/twrke18f/driver_examples/acmp/polling">
          <external path="boards/twrke18f/driver_examples/acmp/polling" type="xml">
            <files mask="acmp_polling.xml"/>
          </external>
        </example>
        <example id="twrke18f_acmp_round_robin" name="acmp_round_robin" brief="The ACMP Round-Robin project is a simple demonstration program that uses the SDK software. Usermust set the round-robin mode trigger in specific board properly according to the board resourcebefore running the example. When the example running, it sets positive port as fixed channel andinternal DAC output as comparison reference in positive port and sets the channels input by useras round-robin checker channel. The example will enter stop mode and wait user to change the voltageof round-robin checker channel. It will exit stop mode after the voltage of round-robin checkerchannel changed by user." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="boards/twrke18f/driver_examples/acmp/round_robin">
          <external path="boards/twrke18f/driver_examples/acmp/round_robin" type="xml">
            <files mask="acmp_round_robin.xml"/>
          </external>
        </example>
        <example id="twrke18f_adc12_continuous_edma" name="adc12_continuous_edma" brief="The ADC12 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC12 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC12 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC12 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC12 results to memory and if users press any key, demo will average ADC12 results stored in memory and print average on the terminal.  " toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/twrke18f/driver_examples/adc12/continuous_edma">
          <external path="boards/twrke18f/driver_examples/adc12/continuous_edma" type="xml">
            <files mask="adc12_continuous_edma.xml"/>
          </external>
        </example>
        <example id="twrke18f_adc12_interrupt" name="adc12_interrupt" brief="The adc12_interrupt example shows how to use interrupt with ADC12 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12's sample input.When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value.Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC12 interrupt configuration is set when configuring the ADC12's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing a conversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/twrke18f/driver_examples/adc12/interrupt">
          <external path="boards/twrke18f/driver_examples/adc12/interrupt" type="xml">
            <files mask="adc12_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_adc12_low_power" name="adc12_low_power" brief="The ADC Low Power Demo project is a demonstration program that uses the KSDK software. Themicrocontroller is set to a very low power stop (VLPS) mode, and every 500 ms an interrupt wakes upthe ADC module and takes the current temperature sensor value of the microcontroller. While the temperature remains within boundaries, both LEDs are on. If the temperature is higher or lower thanaverage, a led comes off. This demo provides an example to show how ADC works during a VLPS mode anda simple debugging." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/adc12_low_power">
          <external path="boards/twrke18f/demo_apps/adc12_low_power" type="xml">
            <files mask="adc12_low_power.xml"/>
          </external>
        </example>
        <example id="twrke18f_adc12_low_power_peripheral" name="adc12_low_power_peripheral" brief="The ADC Low Power Demo project is a demonstration program that uses the KSDK software. Themicrocontroller is set to a very low power stop (VLPS) mode, and every 500 ms an interrupt wakes upthe ADC module and takes the current temperature sensor value of the microcontroller. While the temperature remains within boundaries, both LEDs are on. If the temperature is higher or lower thanaverage, a led comes off. This demo provides an example to show how ADC works during a VLPS mode anda simple debugging." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/adc12_low_power_peripheral">
          <external path="boards/twrke18f/demo_apps/adc12_low_power_peripheral" type="xml">
            <files mask="adc12_low_power_peripheral.xml"/>
          </external>
        </example>
        <example id="twrke18f_adc12_lpit_trgmux" name="adc12_lpit_trgmux" brief="The adc12_lpit_trgmux example shows how to use the LPIT and TRGMUX to generate a ADC trigger.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12'ssample input. When run the example, the ADC is triggered by TRGMUX and gets the ADC conversion result in the ADCConversion Complete (COCO) Interrupt. The LPIT is configured as periodic counter which will output pre-trigger andtigger signal to TRGMUX periodically." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/twrke18f/driver_examples/adc12/lpit_trgmux">
          <external path="boards/twrke18f/driver_examples/adc12/lpit_trgmux" type="xml">
            <files mask="adc12_lpit_trgmux.xml"/>
          </external>
        </example>
        <example id="twrke18f_adc12_polling" name="adc12_polling" brief="The adc12_polling example shows the simplest way to use ADC12 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12's sample input.When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can change theconfiguration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improve theADC12's performance." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/twrke18f/driver_examples/adc12/polling">
          <external path="boards/twrke18f/driver_examples/adc12/polling" type="xml">
            <files mask="adc12_polling.xml"/>
          </external>
        </example>
        <example id="twrke18f_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/bubble">
          <external path="boards/twrke18f/demo_apps/bubble" type="xml">
            <files mask="bubble.xml"/>
          </external>
        </example>
        <example id="twrke18f_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/bubble_peripheral">
          <external path="boards/twrke18f/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpi2c_edma_b2b_transfer_master" name="cmsis_lpi2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/twrke18f/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/twrke18f/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpi2c_edma_b2b_transfer_slave" name="cmsis_lpi2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/twrke18f/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/twrke18f/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpi2c_int_b2b_transfer_master" name="cmsis_lpi2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/twrke18f/cmsis_driver_examples/lpi2c/int_b2b_transfer/master">
          <external path="boards/twrke18f/cmsis_driver_examples/lpi2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpi2c_int_b2b_transfer_slave" name="cmsis_lpi2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/twrke18f/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave">
          <external path="boards/twrke18f/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpspi_edma_b2b_transfer_master" name="cmsis_lpspi_edma_b2b_transfer_master" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="boards/twrke18f/cmsis_driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="boards/twrke18f/cmsis_driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpspi_edma_b2b_transfer_slave" name="cmsis_lpspi_edma_b2b_transfer_slave" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="boards/twrke18f/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="boards/twrke18f/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpspi_int_b2b_transfer_master" name="cmsis_lpspi_int_b2b_transfer_master" brief="The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="boards/twrke18f/cmsis_driver_examples/lpspi/int_b2b_transfer/master">
          <external path="boards/twrke18f/cmsis_driver_examples/lpspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpspi_int_b2b_transfer_slave" name="cmsis_lpspi_int_b2b_transfer_slave" brief="The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="boards/twrke18f/cmsis_driver_examples/lpspi/int_b2b_transfer/slave">
          <external path="boards/twrke18f/cmsis_driver_examples/lpspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/twrke18f/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/twrke18f/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/twrke18f/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/twrke18f/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/crc">
          <external path="boards/twrke18f/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="twrke18f_dac32_adc12" name="dac32_adc12" brief="The dac32_adc12 example shows a simple case of using DAC32 and ADC12. The DAC32 module would output analog signal, then ADC12 module would read this value of this signal and output the voltage value.User needs to make sure that DAC's output and ADC's input are stable.Notice:In few cases of this demo,DAC's input and ADC's output might not match,since the voltage signalis unstable.User has to wait the DAC a few while to make the result as expected in application if necessary." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/dac32_adc12">
          <external path="boards/twrke18f/demo_apps/dac32_adc12" type="xml">
            <files mask="dac32_adc12.xml"/>
          </external>
        </example>
        <example id="twrke18f_dac32_basic" name="dac32_basic" brief="The dac32_basic example shows how to use DAC32 module simply as the general DAC converter.When the DAC32's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac32" path="boards/twrke18f/driver_examples/dac32/basic">
          <external path="boards/twrke18f/driver_examples/dac32/basic" type="xml">
            <files mask="dac32_basic.xml"/>
          </external>
        </example>
        <example id="twrke18f_dac32_buffer_interrupt" name="dac32_buffer_interrupt" brief="The dac32_buffer_interrupt example shows how to use DAC32 buffer with interrupts.When the DAC32's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger.As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by softwareor hardware, the buffer's read pointer would move automatically as the work mode is set, like normal (cycle) mode, swing mode,one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac32" path="boards/twrke18f/driver_examples/dac32/buffer_interrupt">
          <external path="boards/twrke18f/driver_examples/dac32/buffer_interrupt" type="xml">
            <files mask="dac32_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_dac32_continuous_pdb_edma" name="dac32_continuous_pdb_edma" brief="The demo shows how to use the PDB to generate a DAC32 trigger and use the DMA to transfer data into DAC32 buffer.In this example, DAC32 is first set to normal buffer mode. PDB is as DAC32 hardware trigger source and DMA would work when DAC32 read pointer is zero. When run the example, the DAC32 is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.While read pointer goes to zero, DMA request will be triggered and transfer data into DAC32 buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac32" path="boards/twrke18f/driver_examples/dac32/continuous_pdb_edma">
          <external path="boards/twrke18f/driver_examples/dac32/continuous_pdb_edma" type="xml">
            <files mask="dac32_continuous_pdb_edma.xml"/>
          </external>
        </example>
        <example id="twrke18f_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/ecompass">
          <external path="boards/twrke18f/demo_apps/ecompass" type="xml">
            <files mask="ecompass.xml"/>
          </external>
        </example>
        <example id="twrke18f_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/ecompass_peripheral">
          <external path="boards/twrke18f/demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral.xml"/>
          </external>
        </example>
        <example id="twrke18f_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="boards/twrke18f/driver_examples/edma/memory_to_memory">
          <external path="boards/twrke18f/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="twrke18f_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="boards/twrke18f/driver_examples/edma/scatter_gather">
          <external path="boards/twrke18f/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="twrke18f_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/ewm">
          <external path="boards/twrke18f/driver_examples/ewm" type="xml">
            <files mask="ewm.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexcan_interrupt_transfer" name="flexcan_interrupt_transfer" brief="The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/twrke18f/driver_examples/flexcan/interrupt_transfer">
          <external path="boards/twrke18f/driver_examples/flexcan/interrupt_transfer" type="xml">
            <files mask="flexcan_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexcan_loopback" name="flexcan_loopback" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/twrke18f/driver_examples/flexcan/loopback">
          <external path="boards/twrke18f/driver_examples/flexcan/loopback" type="xml">
            <files mask="flexcan_loopback.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexcan_loopback_edma_transfer" name="flexcan_loopback_edma_transfer" brief="The flexcan_loopback_edma example shows how to use the EDMA version transactional driver to receiveCAN Message from Rx FIFO:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Tx Message Buffer and also setup Rx FIFO. After that, the example will send 4 CAN Messagesfrom Tx Message Buffer to Rx FIFO through internal loopback interconnect and read them out usingEDMA version FlexCAN transactional driver. The Sent and received message will be print out to terminalat last." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/twrke18f/driver_examples/flexcan/loopback_edma_transfer">
          <external path="boards/twrke18f/driver_examples/flexcan/loopback_edma_transfer" type="xml">
            <files mask="flexcan_loopback_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexcan_loopback_transfer" name="flexcan_loopback_transfer" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/twrke18f/driver_examples/flexcan/loopback_transfer">
          <external path="boards/twrke18f/driver_examples/flexcan/loopback_transfer" type="xml">
            <files mask="flexcan_loopback_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_i2c_interrupt_lpi2c_transfer" name="flexio_i2c_interrupt_lpi2c_transfer" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/i2c/interrupt_lpi2c_transfer">
          <external path="boards/twrke18f/driver_examples/flexio/i2c/interrupt_lpi2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_i2c_read_accel_value_transfer" name="flexio_i2c_read_accel_value_transfer" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/i2c/read_accel_value_transfer">
          <external path="boards/twrke18f/driver_examples/flexio/i2c/read_accel_value_transfer" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/pwm">
          <external path="boards/twrke18f/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_spi_edma_lpspi_transfer_master" name="flexio_spi_edma_lpspi_transfer_master" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/spi/edma_lpspi_transfer/master">
          <external path="boards/twrke18f/driver_examples/flexio/spi/edma_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_spi_edma_lpspi_transfer_slave" name="flexio_spi_edma_lpspi_transfer_slave" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/spi/edma_lpspi_transfer/slave">
          <external path="boards/twrke18f/driver_examples/flexio/spi/edma_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_spi_int_lpspi_transfer_master" name="flexio_spi_int_lpspi_transfer_master" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/spi/int_lpspi_transfer/master">
          <external path="boards/twrke18f/driver_examples/flexio/spi/int_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_spi_int_lpspi_transfer_slave" name="flexio_spi_int_lpspi_transfer_slave" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/spi/int_lpspi_transfer/slave">
          <external path="boards/twrke18f/driver_examples/flexio/spi/int_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/uart/edma_transfer">
          <external path="boards/twrke18f/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/uart/int_rb_transfer">
          <external path="boards/twrke18f/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/uart/interrupt_transfer">
          <external path="boards/twrke18f/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="boards/twrke18f/driver_examples/flexio/uart/polling_transfer">
          <external path="boards/twrke18f/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexnvm_dflash" name="flexnvm_dflash" brief="The flexnvm_dflash example shows how to use flash driver to operate data flash:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/twrke18f/driver_examples/flash/flexnvm_dflash">
          <external path="boards/twrke18f/driver_examples/flash/flexnvm_dflash" type="xml">
            <files mask="flexnvm_dflash.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexnvm_eeprom" name="flexnvm_eeprom" brief="The flexnvm_eeprom example shows how to use flash driver to operate eeprom:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/twrke18f/driver_examples/flash/flexnvm_eeprom">
          <external path="boards/twrke18f/driver_examples/flash/flexnvm_eeprom" type="xml">
            <files mask="flexnvm_eeprom.xml"/>
          </external>
        </example>
        <example id="twrke18f_flexnvm_flexram" name="flexnvm_flexram" brief="The flexnvm_flexram example shows how to use flash driver to operate eeprom:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/twrke18f/driver_examples/flash/flexnvm_flexram">
          <external path="boards/twrke18f/driver_examples/flash/flexnvm_flexram" type="xml">
            <files mask="flexnvm_flexram.xml"/>
          </external>
        </example>
        <example id="twrke18f_fmstr_example_can" name="fmstr_example_can" brief="The example application demonstrating use of FreeMASTER tool to visualize internal variables and control the application flow by modifying variables. The application also show use of advanced FreeMASTER features like TSA tables and Pipes." toolchain="mcuxpresso" compiler="compiler_gcc" category="FreeMASTER_examples" path="boards/twrke18f/freemaster_examples/fmstr_can">
          <external path="boards/twrke18f/freemaster_examples/fmstr_can" type="xml">
            <files mask="fmstr_example_can.xml"/>
          </external>
        </example>
        <example id="twrke18f_fmstr_example_pdbdm" name="fmstr_example_pdbdm" brief="The example application demonstrating use of FreeMASTER tool to visualize internal variables and control the application flow by modifying variables. The application also show use of advanced FreeMASTER features like TSA tables and Pipes." toolchain="mcuxpresso" compiler="compiler_gcc" category="FreeMASTER_examples" path="boards/twrke18f/freemaster_examples/fmstr_pdbdm">
          <external path="boards/twrke18f/freemaster_examples/fmstr_pdbdm" type="xml">
            <files mask="fmstr_example_pdbdm.xml"/>
          </external>
        </example>
        <example id="twrke18f_fmstr_example_uart" name="fmstr_example_uart" brief="The example application demonstrating use of FreeMASTER tool to visualize internal variables and control the application flow by modifying variables. The application also show use of advanced FreeMASTER features like TSA tables and Pipes." toolchain="mcuxpresso" compiler="compiler_gcc" category="FreeMASTER_examples" path="boards/twrke18f/freemaster_examples/fmstr_uart">
          <external path="boards/twrke18f/freemaster_examples/fmstr_uart" type="xml">
            <files mask="fmstr_example_uart.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_event">
          <external path="boards/twrke18f/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_generic">
          <external path="boards/twrke18f/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_hello">
          <external path="boards/twrke18f/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_lpi2c" name="freertos_lpi2c" brief="The LPI2C Example project is a demonstration program that uses the KSDK software to manipulate the Low Power Inter-Integrated Circuit.The example uses two instances of LPI2C, one in configured as master and the other one as slave.The LPI2C master sends data to LPI2C slave. The slave will check the data it receives and shows the log." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_lpi2c">
          <external path="boards/twrke18f/rtos_examples/freertos_lpi2c" type="xml">
            <files mask="freertos_lpi2c.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_lpspi" name="freertos_lpspi" brief="The lpspi_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_lpspi">
          <external path="boards/twrke18f/rtos_examples/freertos_lpspi" type="xml">
            <files mask="freertos_lpspi.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_lpspi_b2b_master" name="freertos_lpspi_b2b_master" brief="The freertos_lpspi_b2b_master example shows how to use LPSPI driver in FreeRTOS." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_lpspi_b2b/master">
          <external path="boards/twrke18f/rtos_examples/freertos_lpspi_b2b/master" type="xml">
            <files mask="freertos_lpspi_b2b_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_lpspi_b2b_slave" name="freertos_lpspi_b2b_slave" brief="The freertos_lpspi_b2b_slave example shows how to use LPSPI driver in FreeRTOS." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_lpspi_b2b/slave">
          <external path="boards/twrke18f/rtos_examples/freertos_lpspi_b2b/slave" type="xml">
            <files mask="freertos_lpspi_b2b_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_lpuart">
          <external path="boards/twrke18f/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_mutex">
          <external path="boards/twrke18f/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_queue">
          <external path="boards/twrke18f/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_sem">
          <external path="boards/twrke18f/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_swtimer">
          <external path="boards/twrke18f/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer.xml"/>
          </external>
        </example>
        <example id="twrke18f_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/twrke18f/rtos_examples/freertos_tickless">
          <external path="boards/twrke18f/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/combine_pwm">
          <external path="boards/twrke18f/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/dual_edge_capture">
          <external path="boards/twrke18f/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/input_capture">
          <external path="boards/twrke18f/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/output_compare">
          <external path="boards/twrke18f/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_pdb_adc12" name="ftm_pdb_adc12" brief="This application demonstrates how to use the trigger signal generated by FTM to trigger the ADCconversion through PDB module.For instance, the FTM0 is configured to work in PWM mode. And its channel 0 monitors the FTM counterand compares with the channel value. Once the FTM counter matches the channel value, an externaltrigger would be generated. TRGMUX would capture this trigger and route it to PDB module. When thePDB is triggered, the PDB counter increase. Once the PDB matches the ADC pre-trigger value, a triggersignal would generated and sent to ADC module. Finally, the ADC gets the trigger signal and start theconversion." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/ftm_pdb_adc12">
          <external path="boards/twrke18f/demo_apps/ftm_pdb_adc12" type="xml">
            <files mask="ftm_pdb_adc12.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_pdb_adc12_peripheral" name="ftm_pdb_adc12_peripheral" brief="This application demonstrates how to use the trigger signal generated by FTM to trigger the ADCconversion through PDB module.For instance, the FTM0 is configured to work in PWM mode. And its channel 0 monitors the FTM counterand compares with the channel value. Once the FTM counter matches the channel value, an externaltrigger would be generated. TRGMUX would capture this trigger and route it to PDB module. When thePDB is triggered, the PDB counter increase. Once the PDB matches the ADC pre-trigger value, a triggersignal would generated and sent to ADC module. Finally, the ADC gets the trigger signal and start theconversion.You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/ftm_pdb_adc12_peripheral">
          <external path="boards/twrke18f/demo_apps/ftm_pdb_adc12_peripheral" type="xml">
            <files mask="ftm_pdb_adc12_peripheral.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/pwm_twochannel">
          <external path="boards/twrke18f/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/simple_pwm">
          <external path="boards/twrke18f/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="twrke18f_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/twrke18f/driver_examples/ftm/timer">
          <external path="boards/twrke18f/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer.xml"/>
          </external>
        </example>
        <example id="twrke18f_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/twrke18f/driver_examples/gpio/input_interrupt">
          <external path="boards/twrke18f/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/twrke18f/driver_examples/gpio/led_output">
          <external path="boards/twrke18f/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="twrke18f_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/hello_world">
          <external path="boards/twrke18f/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="twrke18f_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/led_blinky">
          <external path="boards/twrke18f/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/twrke18f/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/twrke18f/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_interrupt" name="lpi2c_interrupt" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/interrupt">
          <external path="boards/twrke18f/driver_examples/lpi2c/interrupt" type="xml">
            <files mask="lpi2c_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="boards/twrke18f/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="boards/twrke18f/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_polling_b2b_master" name="lpi2c_polling_b2b_master" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/polling_b2b/master">
          <external path="boards/twrke18f/driver_examples/lpi2c/polling_b2b/master" type="xml">
            <files mask="lpi2c_polling_b2b_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_polling_b2b_slave" name="lpi2c_polling_b2b_slave" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/polling_b2b/slave">
          <external path="boards/twrke18f/driver_examples/lpi2c/polling_b2b/slave" type="xml">
            <files mask="lpi2c_polling_b2b_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/twrke18f/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="boards/twrke18f/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpi2c_vlps" name="lpi2c_vlps" brief="This example describes how to use kinetis SDK drivers to implement LPI2C transmit and receive in the VLPS (very low power STOP mode) with async DMA.The LPI2C module is designed to have ability to work under low power module like STOP, VLPW and VLPS. It can use DMA to transmit the data from or to application user buffer without CPU interaction.It uses LPI2C to access the on board accelerometer sensor to read the Accelerometer X, Y, Z data every 500ms. CPU would keep in VLPS low power mode, except for some trigger events and data output to LPUART0." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/lpi2c_vlps">
          <external path="boards/twrke18f/demo_apps/lpi2c_vlps" type="xml">
            <files mask="lpi2c_vlps.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpit" name="lpit" brief="The LPIT project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/lpit">
          <external path="boards/twrke18f/driver_examples/lpit" type="xml">
            <files mask="lpit.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="boards/twrke18f/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="boards/twrke18f/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_interrupt" name="lpspi_interrupt" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/interrupt">
          <external path="boards/twrke18f/driver_examples/lpspi/interrupt" type="xml">
            <files mask="lpspi_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b/master">
          <external path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="boards/twrke18f/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="boards/twrke18f/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="boards/twrke18f/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="boards/twrke18f/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrke18f_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/lptmr">
          <external path="boards/twrke18f/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_edma_rb_transfer" name="lpuart_edma_rb_transfer" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/edma_rb_transfer">
          <external path="boards/twrke18f/driver_examples/lpuart/edma_rb_transfer" type="xml">
            <files mask="lpuart_edma_rb_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/edma_transfer">
          <external path="boards/twrke18f/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/interrupt">
          <external path="boards/twrke18f/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/twrke18f/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/twrke18f/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_interrupt_transfer_seven_bits" name="lpuart_interrupt_transfer_seven_bits" brief="The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/interrupt_transfer_seven_bits">
          <external path="boards/twrke18f/driver_examples/lpuart/interrupt_transfer_seven_bits" type="xml">
            <files mask="lpuart_interrupt_transfer_seven_bits.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/polling">
          <external path="boards/twrke18f/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="twrke18f_lpuart_polling_seven_bits" name="lpuart_polling_seven_bits" brief="The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/twrke18f/driver_examples/lpuart/polling_seven_bits">
          <external path="boards/twrke18f/driver_examples/lpuart/polling_seven_bits" type="xml">
            <files mask="lpuart_polling_seven_bits.xml"/>
          </external>
        </example>
        <example id="twrke18f_mc_bldc" name="mc_bldc" brief="This example demonstrates the control of the BLDC motor." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/mc_bldc">
          <external path="boards/twrke18f/demo_apps/mc_bldc" type="xml">
            <files mask="mc_bldc.xml"/>
          </external>
        </example>
        <example id="twrke18f_mc_pmsm" name="mc_pmsm" brief="This example demonstrates the control of the PMSM." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/mc_pmsm/pmsm_snsless">
          <external path="boards/twrke18f/demo_apps/mc_pmsm/pmsm_snsless" type="xml">
            <files mask="mc_pmsm.xml"/>
          </external>
        </example>
        <example id="twrke18f_pdb_adc12_trigger" name="pdb_adc12_trigger" brief="The pdb_adc12_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would be generated and sentto the ADC12 module.In this example, the ADC12 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/twrke18f/driver_examples/pdb/adc12_trigger">
          <external path="boards/twrke18f/driver_examples/pdb/adc12_trigger" type="xml">
            <files mask="pdb_adc12_trigger.xml"/>
          </external>
        </example>
        <example id="twrke18f_pdb_dac32_trigger" name="pdb_dac32_trigger" brief="The pdb_dac32_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's &quot;milestone&quot; and set the user-defined value for it.The DAC's &quot;milestone&quot; is called as &quot;interval&quot;. Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC32 is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB,the buffer read pointer increases." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/twrke18f/driver_examples/pdb/dac32_trigger">
          <external path="boards/twrke18f/driver_examples/pdb/dac32_trigger" type="xml">
            <files mask="pdb_dac32_trigger.xml"/>
          </external>
        </example>
        <example id="twrke18f_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/twrke18f/driver_examples/pdb/delay_interrupt">
          <external path="boards/twrke18f/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt.xml"/>
          </external>
        </example>
        <example id="twrke18f_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/twrke18f/driver_examples/flash/pflash">
          <external path="boards/twrke18f/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="twrke18f_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/power_manager">
          <external path="boards/twrke18f/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="twrke18f_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/power_mode_switch">
          <external path="boards/twrke18f/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="twrke18f_pwt_example" name="pwt_example" brief="The PWT project is a simple demonstration program of the SDK PWT driver. It sets up the PWThardware block to edge detection, capture control part and detects measurement trigger edges andcontrols when and which pulse width register(s) will be updated. Once the input signal is received,this example will print overflow flag status, positive pulse width and negative pulse width." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/pwt" path="boards/twrke18f/driver_examples/pwt">
          <external path="boards/twrke18f/driver_examples/pwt" type="xml">
            <files mask="pwt_example.xml"/>
          </external>
        </example>
        <example id="twrke18f_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/rtc">
          <external path="boards/twrke18f/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="twrke18f_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/rtc_func">
          <external path="boards/twrke18f/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="twrke18f_rtc_func_peripheral" name="rtc_func_peripheral" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/rtc_func_peripheral">
          <external path="boards/twrke18f/demo_apps/rtc_func_peripheral" type="xml">
            <files mask="rtc_func_peripheral.xml"/>
          </external>
        </example>
        <example id="twrke18f_scg" name="scg" brief="The SCG example shows how to use SCG driver: 1. How to setup the SCG clock source. 2. How to use SCG clock while power mode switch. 3. How to use SCG APIs to get clock frequency.This example prints the clock frequency through the terminal using the SDK driver." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/scg">
          <external path="boards/twrke18f/driver_examples/scg" type="xml">
            <files mask="scg.xml"/>
          </external>
        </example>
        <example id="twrke18f_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/twrke18f/demo_apps/shell">
          <external path="boards/twrke18f/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="twrke18f_sysmpu" name="sysmpu" brief="The SYSMPU example defines protected/unprotected memory region for the core access.First, the SYSMPU will capture the hardware information and show it on theterminal. Then, a memory region is configured as the non-writable region. Thebus fault interrupt is enabled to report the memory protection interrupt eventfor this non-writable region. If an operation writes to this region, the busfault interrupt happens. Then the bus fault interrupt handler provides aprevention alert by outputting a message on terminal, then the write rightswill be given to this region for core access. After the write access enabled,the writing to the region becomes successful. When the bus fault happen, thedetails of the error information will be captured and printed on the terminal.This example provides the terminal input control to give the example show for several regions access test. Just press any key to the terminal when theterminal show &quot;Press any key to continue&quot;." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/sysmpu">
          <external path="boards/twrke18f/driver_examples/sysmpu" type="xml">
            <files mask="sysmpu.xml"/>
          </external>
        </example>
        <example id="twrke18f_trgmux_clone_pwm" name="trgmux_clone_pwm" brief="The TRGMUX project is a simple demonstration program of the SDK TRGMUX driver. It generatesa 10KHz PWM by LPIT0 CH0, and clone by TRGMUX to output this PWM to eight TRGMUX_OUTx pins." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/trgmux" path="boards/twrke18f/driver_examples/trgmux/clone_pwm">
          <external path="boards/twrke18f/driver_examples/trgmux/clone_pwm" type="xml">
            <files mask="trgmux_clone_pwm.xml"/>
          </external>
        </example>
        <example id="twrke18f_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/twrke18f/driver_examples/wdog32">
          <external path="boards/twrke18f/driver_examples/wdog32" type="xml">
            <files mask="wdog32.xml"/>
          </external>
        </example>
      </examples>
    </board>
    <board id="hvpke18f" name="HVP-KE18F" href="http://www.nxp.com/hvp" version="1.0.0" package="MKE18F512VLL16">
      <description>HVP-KE18F: Kinetis KE18 MCU high-voltage development platform.</description>
      <image path="docs/images" type="image">
        <files mask="HVP-KE18F.gif"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The HVP-KE18F controller card is a development platform for the Kinetis.KE1x family that, in combination with the HVP-MC3PH high-voltage development platform, provides ready-made software and hardware development for.high-voltage motor control and power conversion applications.</content>
          </specific>
        </metadata>
      </metadataSet>
      <examples>
        <example id="hvpke18f_adc12_interrupt" name="adc12_interrupt" brief="The adc12_interrupt example shows how to use interrupt with ADC12 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12's sample input.When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value.Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC12 interrupt configuration is set when configuring the ADC12's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing a conversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/hvpke18f/driver_examples/adc12/interrupt">
          <external path="boards/hvpke18f/driver_examples/adc12/interrupt" type="xml">
            <files mask="adc12_interrupt.xml"/>
          </external>
        </example>
        <example id="hvpke18f_adc12_lpit_trgmux" name="adc12_lpit_trgmux" brief="The adc12_lpit_trgmux example shows how to use the LPIT and TRGMUX to generate a ADC trigger.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12'ssample input. When run the example, the ADC is triggered by TRGMUX and gets the ADC conversion result in the ADCConversion Complete (COCO) Interrupt. The LPIT is configured as periodic counter which will output pre-trigger andtigger signal to TRGMUX periodically." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/hvpke18f/driver_examples/adc12/lpit_trgmux">
          <external path="boards/hvpke18f/driver_examples/adc12/lpit_trgmux" type="xml">
            <files mask="adc12_lpit_trgmux.xml"/>
          </external>
        </example>
        <example id="hvpke18f_adc12_polling" name="adc12_polling" brief="The adc12_polling example shows the simplest way to use ADC12 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12's sample input.When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can change theconfiguration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improve theADC12's performance." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="boards/hvpke18f/driver_examples/adc12/polling">
          <external path="boards/hvpke18f/driver_examples/adc12/polling" type="xml">
            <files mask="adc12_polling.xml"/>
          </external>
        </example>
        <example id="hvpke18f_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/hvpke18f/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/hvpke18f/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/hvpke18f/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/hvpke18f/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/hvpke18f/driver_examples/crc">
          <external path="boards/hvpke18f/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="hvpke18f_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="boards/hvpke18f/driver_examples/edma/memory_to_memory">
          <external path="boards/hvpke18f/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="hvpke18f_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="boards/hvpke18f/driver_examples/edma/scatter_gather">
          <external path="boards/hvpke18f/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="hvpke18f_flexnvm_dflash" name="flexnvm_dflash" brief="The flexnvm_dflash example shows how to use flash driver to operate data flash:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/hvpke18f/driver_examples/flash/flexnvm_dflash">
          <external path="boards/hvpke18f/driver_examples/flash/flexnvm_dflash" type="xml">
            <files mask="flexnvm_dflash.xml"/>
          </external>
        </example>
        <example id="hvpke18f_flexnvm_eeprom" name="flexnvm_eeprom" brief="The flexnvm_eeprom example shows how to use flash driver to operate eeprom:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/hvpke18f/driver_examples/flash/flexnvm_eeprom">
          <external path="boards/hvpke18f/driver_examples/flash/flexnvm_eeprom" type="xml">
            <files mask="flexnvm_eeprom.xml"/>
          </external>
        </example>
        <example id="hvpke18f_fmstr_example_pdbdm" name="fmstr_example_pdbdm" brief="The example application demonstrating use of FreeMASTER tool to visualize internal variables and control the application flow by modifying variables. The application also show use of advanced FreeMASTER features like TSA tables and Pipes." toolchain="mcuxpresso" compiler="compiler_gcc" category="FreeMASTER_examples" path="boards/hvpke18f/freemaster_examples/fmstr_pdbdm">
          <external path="boards/hvpke18f/freemaster_examples/fmstr_pdbdm" type="xml">
            <files mask="fmstr_example_pdbdm.xml"/>
          </external>
        </example>
        <example id="hvpke18f_fmstr_example_uart" name="fmstr_example_uart" brief="The example application demonstrating use of FreeMASTER tool to visualize internal variables and control the application flow by modifying variables. The application also show use of advanced FreeMASTER features like TSA tables and Pipes." toolchain="mcuxpresso" compiler="compiler_gcc" category="FreeMASTER_examples" path="boards/hvpke18f/freemaster_examples/fmstr_uart">
          <external path="boards/hvpke18f/freemaster_examples/fmstr_uart" type="xml">
            <files mask="fmstr_example_uart.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_event">
          <external path="boards/hvpke18f/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_generic">
          <external path="boards/hvpke18f/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_hello">
          <external path="boards/hvpke18f/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_lpuart">
          <external path="boards/hvpke18f/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_mutex">
          <external path="boards/hvpke18f/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_queue">
          <external path="boards/hvpke18f/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_sem">
          <external path="boards/hvpke18f/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_sem_static" name="freertos_sem_static" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_sem_static">
          <external path="boards/hvpke18f/rtos_examples/freertos_sem_static" type="xml">
            <files mask="freertos_sem_static.xml"/>
          </external>
        </example>
        <example id="hvpke18f_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="boards/hvpke18f/rtos_examples/freertos_swtimer">
          <external path="boards/hvpke18f/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/hvpke18f/driver_examples/ftm/timer">
          <external path="boards/hvpke18f/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/hvpke18f/driver_examples/gpio/led_output">
          <external path="boards/hvpke18f/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="hvpke18f_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/hvpke18f/demo_apps/hello_world">
          <external path="boards/hvpke18f/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="hvpke18f_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/hvpke18f/demo_apps/led_blinky">
          <external path="boards/hvpke18f/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lpit" name="lpit" brief="The LPIT project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/hvpke18f/driver_examples/lpit">
          <external path="boards/hvpke18f/driver_examples/lpit" type="xml">
            <files mask="lpit.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/hvpke18f/driver_examples/lptmr">
          <external path="boards/hvpke18f/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/hvpke18f/driver_examples/lpuart/edma_transfer">
          <external path="boards/hvpke18f/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/hvpke18f/driver_examples/lpuart/interrupt">
          <external path="boards/hvpke18f/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/hvpke18f/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/hvpke18f/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/hvpke18f/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/hvpke18f/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="hvpke18f_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/hvpke18f/driver_examples/lpuart/polling">
          <external path="boards/hvpke18f/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="hvpke18f_mc_acim" name="mc_acim" brief="This example demonstrates the control of the ACIM." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/hvpke18f/demo_apps/mc_acim">
          <external path="boards/hvpke18f/demo_apps/mc_acim" type="xml">
            <files mask="mc_acim.xml"/>
          </external>
        </example>
        <example id="hvpke18f_mc_bldc" name="mc_bldc" brief="This example demonstrates the control of the BLDC motor." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/hvpke18f/demo_apps/mc_bldc">
          <external path="boards/hvpke18f/demo_apps/mc_bldc" type="xml">
            <files mask="mc_bldc.xml"/>
          </external>
        </example>
        <example id="hvpke18f_mc_pmsm" name="mc_pmsm" brief="This example demonstrates the control of the PMSM." toolchain="mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="boards/hvpke18f/demo_apps/mc_pmsm/pmsm_snsless">
          <external path="boards/hvpke18f/demo_apps/mc_pmsm/pmsm_snsless" type="xml">
            <files mask="mc_pmsm.xml"/>
          </external>
        </example>
        <example id="hvpke18f_pdb_adc12_trigger" name="pdb_adc12_trigger" brief="The pdb_adc12_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would be generated and sentto the ADC12 module.In this example, the ADC12 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="boards/hvpke18f/driver_examples/pdb/adc12_trigger">
          <external path="boards/hvpke18f/driver_examples/pdb/adc12_trigger" type="xml">
            <files mask="pdb_adc12_trigger.xml"/>
          </external>
        </example>
        <example id="hvpke18f_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="boards/hvpke18f/driver_examples/flash/pflash">
          <external path="boards/hvpke18f/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="hvpke18f_scg" name="scg" brief="The SCG example shows how to use SCG driver: 1. How to setup the SCG clock source. 2. How to use SCG clock while power mode switch. 3. How to use SCG APIs to get clock frequency.This example prints the clock frequency through the terminal using the SDK driver." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/hvpke18f/driver_examples/scg">
          <external path="boards/hvpke18f/driver_examples/scg" type="xml">
            <files mask="scg.xml"/>
          </external>
        </example>
        <example id="hvpke18f_sysmpu" name="sysmpu" brief="The SYSMPU example defines protected/unprotected memory region for the core access.First, the SYSMPU will capture the hardware information and show it on theterminal. Then, a memory region is configured as the non-writable region. Thebus fault interrupt is enabled to report the memory protection interrupt eventfor this non-writable region. If an operation writes to this region, the busfault interrupt happens. Then the bus fault interrupt handler provides aprevention alert by outputting a message on terminal, then the write rightswill be given to this region for core access. After the write access enabled,the writing to the region becomes successful. When the bus fault happen, thedetails of the error information will be captured and printed on the terminal.This example provides the terminal input control to give the example show for several regions access test. Just press any key to the terminal when theterminal show &quot;Press any key to continue&quot;." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/hvpke18f/driver_examples/sysmpu">
          <external path="boards/hvpke18f/driver_examples/sysmpu" type="xml">
            <files mask="sysmpu.xml"/>
          </external>
        </example>
        <example id="hvpke18f_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="boards/hvpke18f/driver_examples/wdog32">
          <external path="boards/hvpke18f/driver_examples/wdog32" type="xml">
            <files mask="wdog32.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MKE18F512xxx16" name="MKE18F16" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MKE18F512xxx16" family="KE1x" platform="Kinetis">
      <description>KE1xF: Kinetis KE1xF-168MHz, Performance with CAN 5V Microcontrollers based on ARM® Cortex®-M4</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>Kinetis KE1xF MCUs are the high end series MCUs in Kinetis E family, providing robust 5V solution with the high performance ARM® Cortex®-M4 core running at up to 168 MHz. The Kinetis KE1xF MCU family also integrates CAN 2.0B compliant FlexCAN provides high reliable serial communication interface for industry applications, and rich suite of communication interfaces including LPUARTs, LPI2Cs, LPSPIs, and FlexIO.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKE18F512xxx16" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKE18F512xxx16" name="PROGRAM_FLASH" addr="00000000" size="00080000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MKE18F512xxx16" name="SRAM_UPPER" addr="20000000" size="00008000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MKE18F512xxx16" name="SRAM_LOWER" addr="1fff8000" size="00008000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MKE18F512xxx16" name="FLEX_RAM" addr="14000000" size="00001000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_NVM_MKE18F512xxx16" name="FLEX_NVM" addr="10000000" size="00010000" type="DFlash" access="RO"/>
      </memory>
      <total_memory flash_size_kb="512" ram_size_kb="64"/>
      <package id="MKE18F512VLL16" name="MKE18F512VLL16"/>
      <package id="MKE18F512VLH16" name="MKE18F512VLH16"/>
      <evaluation_boards>
        <evaluation_board name="twrke18f"/>
        <evaluation_board name="hvpke18f"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKE18F512xxx16" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MKE18F512xxx16" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKE18F512xxx16" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKE18F512xxx16">
              <driverBinary type="binary">
                <files mask="FTFE_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
    <device id="MKE16F512xxx16" name="MKE16F16" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MKE16F512xxx16" family="KE1x" platform="Kinetis">
      <description>KE1xF: Kinetis KE1xF-168MHz, Performance with CAN 5V Microcontrollers based on ARM® Cortex®-M4</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>Kinetis KE1xF MCUs are the high end series MCUs in Kinetis E family, providing robust 5V solution with the high performance ARM® Cortex®-M4 core running at up to 168 MHz. The Kinetis KE1xF MCU family also integrates CAN 2.0B compliant FlexCAN provides high reliable serial communication interface for industry applications, and rich suite of communication interfaces including LPUARTs, LPI2Cs, LPSPIs, and FlexIO.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKE16F512xxx16" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKE16F512xxx16" name="PROGRAM_FLASH" addr="00000000" size="00080000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MKE16F512xxx16" name="SRAM_UPPER" addr="20000000" size="00008000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MKE16F512xxx16" name="SRAM_LOWER" addr="1fff8000" size="00008000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MKE16F512xxx16" name="FLEX_RAM" addr="14000000" size="00001000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_NVM_MKE16F512xxx16" name="FLEX_NVM" addr="10000000" size="00010000" type="DFlash" access="RO"/>
      </memory>
      <total_memory flash_size_kb="512" ram_size_kb="64"/>
      <package id="MKE16F512VLL16" name="MKE16F512VLL16"/>
      <package id="MKE16F512VLH16" name="MKE16F512VLH16"/>
      <evaluation_boards>
        <evaluation_board name="twrke18f"/>
        <evaluation_board name="hvpke18f"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKE16F512xxx16" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MKE16F512xxx16" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKE16F512xxx16" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKE16F512xxx16">
              <driverBinary type="binary">
                <files mask="FTFE_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.twrke18f.MKE18F16" name="twrke18f" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
          <component_dependency value="component.lpuart_adapter.MKE18F16"/>
          <component_dependency value="platform.drivers.port.MKE18F16"/>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="utility.debug_console.MKE18F16"/>
          <component_dependency value="component.serial_manager.MKE18F16"/>
          <component_dependency value="platform.drivers.gpio.MKE18F16"/>
          <component_dependency value="platform.drivers.smc.MKE18F16"/>
          <component_dependency value="device.MKE18F16_startup.MKE18F16"/>
          <component_dependency value="platform.drivers.trgmux.MKE18F16"/>
        </all>
      </dependencies>
      <source path="boards/twrke18f/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/twrke18f/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MKE18F16" name="CMSIS" version="5.5.1" devices="MKE18F512xxx16" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKE18F16"/>
          <component_dependency value="platform.Include_dsp.MKE18F16"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.MKE18F16" name="CMSIS_DSP_Lib" version="1.6.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS">
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="configuration">
        <files mask="arm_class_marks_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="project">
        <files mask="arm_class_marks_example.uvoptx"/>
        <files mask="arm_class_marks_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="src">
        <files mask="arm_class_marks_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="configuration">
        <files mask="arm_convolution_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="project">
        <files mask="arm_convolution_example.uvoptx"/>
        <files mask="arm_convolution_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="src">
        <files mask="arm_convolution_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="configuration">
        <files mask="arm_dotproduct_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="project">
        <files mask="arm_dotproduct_example.uvoptx"/>
        <files mask="arm_dotproduct_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="src">
        <files mask="arm_dotproduct_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="src">
        <files mask="arm_fft_bin_data.c"/>
        <files mask="arm_fft_bin_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="configuration">
        <files mask="arm_fft_bin_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="project">
        <files mask="arm_fft_bin_example.uvoptx"/>
        <files mask="arm_fft_bin_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="src">
        <files mask="arm_fir_data.c"/>
        <files mask="arm_fir_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="configuration">
        <files mask="arm_fir_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="project">
        <files mask="arm_fir_example.uvoptx"/>
        <files mask="arm_fir_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="src">
        <files mask="arm_graphic_equalizer_data.c"/>
        <files mask="arm_graphic_equalizer_example_q31.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="configuration">
        <files mask="arm_graphic_equalizer_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="project">
        <files mask="arm_graphic_equalizer_example.uvoptx"/>
        <files mask="arm_graphic_equalizer_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="src">
        <files mask="arm_linear_interp_data.c"/>
        <files mask="arm_linear_interp_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="configuration">
        <files mask="arm_linear_interp_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="project">
        <files mask="arm_linear_interp_example.uvoptx"/>
        <files mask="arm_linear_interp_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="configuration">
        <files mask="arm_matrix_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="project">
        <files mask="arm_matrix_example.uvoptx"/>
        <files mask="arm_matrix_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="src">
        <files mask="arm_matrix_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="src">
        <files mask="arm_signal_converge_data.c"/>
        <files mask="arm_signal_converge_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="configuration">
        <files mask="arm_signal_converge_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="project">
        <files mask="arm_signal_converge_example.uvoptx"/>
        <files mask="arm_signal_converge_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="configuration">
        <files mask="arm_sin_cos_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="project">
        <files mask="arm_sin_cos_example.uvoptx"/>
        <files mask="arm_sin_cos_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="src">
        <files mask="arm_sin_cos_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="configuration">
        <files mask="arm_variance_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="project">
        <files mask="arm_variance_example.uvoptx"/>
        <files mask="arm_variance_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="src">
        <files mask="arm_variance_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARM" target_path="DSP/Projects/ARM" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARM" target_path="DSP/Projects/ARM" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARMCLANG" target_path="DSP/Projects/ARMCLANG" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARMCLANG" target_path="DSP/Projects/ARMCLANG" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Projects/GCC" target_path="DSP/Projects/GCC" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Projects/GCC" target_path="DSP/Projects/GCC" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Projects/IAR" target_path="DSP/Projects/IAR" type="project">
        <files mask="arm_cortexM_math.ewp"/>
      </source>
      <source path="CMSIS/DSP/Projects/IAR" target_path="DSP/Projects/IAR" type="other">
        <files mask="arm_cortexM_math.eww"/>
      </source>
      <source path="CMSIS/DSP/Projects/IAR" target_path="DSP/Projects/IAR" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Source/BasicMathFunctions" target_path="DSP/Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_mult_q7.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_sub_q7.c"/>
      </source>
      <source path="CMSIS/DSP/Source/CommonTables" target_path="DSP/Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
        <files mask="arm_common_tables.c"/>
        <files mask="arm_const_structs.c"/>
      </source>
      <source path="CMSIS/DSP/Source/ComplexMathFunctions" target_path="DSP/Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/ControllerFunctions" target_path="DSP/Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_sin_cos_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/FastMathFunctions" target_path="DSP/Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_cos_q31.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/FilteringFunctions" target_path="DSP/Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_lms_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/MatrixFunctions" target_path="DSP/Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_add_q31.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_trans_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/StatisticsFunctions" target_path="DSP/Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_power_q31.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_var_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/SupportFunctions" target_path="DSP/Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_q7_to_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/TransformFunctions" target_path="DSP/Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_bitreversal2.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_rfft_init_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_rfft_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/TransformFunctions" target_path="DSP/Source/TransformFunctions" type="asm_include">
        <files mask="arm_bitreversal2.S"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.arm_cortexM4bf_math.MKE18F16" name="arm_cortexM4bf_math" version="1.6.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_driver">
      <source toolchain="mcuxpresso" path="CMSIS/DSP/Lib/GCC" target_path="libs" type="lib">
        <files mask="libarm_cortexM7l_math.a"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.arm_cortexM4lf_math.MKE18F16" name="arm_cortexM4lf_math" version="1.6.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_driver">
      <source toolchain="mcuxpresso" path="CMSIS/DSP/Lib/GCC" target_path="libs" type="lib">
        <files mask="libarm_cortexM4lf_math.a"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" version="2.7.0" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="Driver/DriverTemplates" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKE18F16" name="CAN" version="1.2.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16" name="Common" version="2.7.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE18F16" name="Ethernet" version="2.1.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKE18F16" name="Ethernet_MAC" version="2.1.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKE18F16" name="Ethernet_PHY" version="2.1.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKE18F16" name="Flash" version="2.2.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE18F16" name="I2C" version="2.3.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKE18F16" name="MCI" version="2.3.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKE18F16" name="NAND" version="2.3.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKE18F16" name="SAI" version="1.1.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE18F16" name="SPI" version="2.2.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE18F16" name="USART" version="2.3.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE18F16" name="USB" version="2.2.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKE18F16" name="USB_Device" version="2.2.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKE18F16" name="USB_Host" version="2.2.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKE18F16" name="WiFi" version="1.0.0" devices="MKE18F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE18F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MKE18F16" name="CMSIS_Include_common" version="5.2.1" devices="MKE18F512xxx16" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MKE18F16" name="CMSIS_Include_core_cm4" version="5.2.1" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKE18F16"/>
          <component_dependency value="platform.Include_dsp.MKE18F16"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MKE18F16" name="CMSIS_Include_dsp" version="1.6.0" devices="MKE18F512xxx16" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="project_template.MKE18F16.MKE18F16" name="MKE18F16" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
          <component_dependency value="component.lpuart_adapter.MKE18F16"/>
          <component_dependency value="platform.drivers.port.MKE18F16"/>
          <component_dependency value="platform.drivers.gpio.MKE18F16"/>
          <component_dependency value="platform.drivers.smc.MKE18F16"/>
          <component_dependency value="device.MKE18F16_startup.MKE18F16"/>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="utility.debug_console.MKE18F16"/>
          <component_dependency value="component.serial_manager.MKE18F16"/>
          <component_dependency value="platform.drivers.clock.MKE18F16"/>
          <component_dependency value="platform.drivers.trgmux.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MKE18F16/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MKE18F16" name="RTE_Device" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
          <component_dependency value="platform.drivers.dmamux.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MKE18F16" name="cmake_toolchain" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MKE18F16" name="button" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.timer_manager.MKE18F16"/>
          <component_dependency value="component.gpio_adapter.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.common_task.MKE18F16" name="common_task" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.osa.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.crc_adapter.MKE18F16" name="crc_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.crc.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="crc_adapter.c"/>
      </source>
    </component>
    <component id="component.ecspi_adapter.MKE18F16" name="ecspi_adapter" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="ecspi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.flash_adapter.MKE18F16" name="flash_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.flash.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/internal_flash" target_path="component/internal_flash" type="c_include">
        <files mask="flash.h"/>
      </source>
      <source path="components/internal_flash" target_path="component/internal_flash" type="src">
        <files mask="flash_adapter.c"/>
      </source>
    </component>
    <component id="component.ftm_adapter.MKE18F16" name="ftm_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.ftm.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="ftm_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.gpio_adapter.MKE18F16" name="gpio_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MKE18F16"/>
          <component_dependency value="platform.drivers.port.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_adapter.c"/>
      </source>
    </component>
    <component id="component.led.MKE18F16" name="led" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.timer_manager.MKE18F16"/>
          <component_dependency value="component.gpio_adapter.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MKE18F16" name="lists" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lpit_adapter.MKE18F16" name="lpit_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.lpit.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lpit_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpspi_adapter.MKE18F16" name="lpspi_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.lpspi.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="lpspi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.lptmr_adapter.MKE18F16" name="lptmr_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.lptmr.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lptmr_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MKE18F16" name="lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.mem_manager.MKE18F16" name="mem_manager" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.minispi_adapter.MKE18F16" name="minispi_adapter" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="minispi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.osa.MKE18F16" name="osa" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MKE18F16" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MKE18F16" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.amazon_freertos-kernel.MKE18F16" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source condition="middleware.amazon_freertos-kernel.MKE18F16" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MKE18F16" name="osa_bm" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.osa_free_rtos.MKE18F16" name="osa_free_rtos" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
    </component>
    <component id="component.panic.MKE18F16" name="panic" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="utility.debug_console.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pwm_ftm_adapter.MKE18F16" name="pwm_ftm_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.ftm.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_ftm_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MKE18F16" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MKE18F16"/>
            <component_dependency value="component.serial_manager_swo.MKE18F16"/>
            <component_dependency value="component.serial_manager_usb_cdc_virtual.MKE18F16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_swo.MKE18F16" name="serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.serial_manager.MKE18F16"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_swo.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_swo.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MKE18F16" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.twrke18f.MKE18F16" name="twrke18f" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="boards/twrke18f/component_examples/config" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_virtual.MKE18F16" name="serial_manager_usb_cdc_virtual" version="1.0.0" full_name="Serial Manager USB CDC Virtual" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="false" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_USBCDC_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb_virtual.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb_virtual.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.MKE18F16" name="software_crc_adapter" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MKE18F16" name="timer_manager" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
          <any_of>
            <component_dependency value="component.ftm_adapter.MKE18F16"/>
            <component_dependency value="component.lptmr_adapter.MKE18F16"/>
            <component_dependency value="component.lpit_adapter.MKE18F16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.vspi_adapter.MKE18F16" name="vspi_adapter" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="vspi_adapter.c"/>
      </source>
    </component>
    <component id="device.MKE18F16_CMSIS.MKE18F16" name="MKE18F16_CMSIS" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16" target_path="device" type="c_include">
        <files mask="MKE18F16.h"/>
        <files mask="MKE18F16_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MKE18F16_debugger.MKE18F16" name="MKE18F16_debugger" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="debugger">
      <source path="devices/MKE18F16" target_path="MKE18F16" type="xml">
        <files mask="MKE18F16.xml"/>
      </source>
    </component>
    <component id="platform.devices.MKE18F16_linker.MKE18F16" name="MKE18F16_linker" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="linker"/>
    <component id="device.MKE18F16_startup.MKE18F16" name="MKE18F16_startup" version="1.0.0" devices="MKE18F512xxx16" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="mcuxpresso" path="devices/MKE18F16/mcuxpresso" target_path="startup" type="src_c">
        <files mask="startup_mke18f16.c"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MKE18F16/mcuxpresso" target_path="startup" type="src_cpp">
        <files mask="startup_mke18f16.cpp"/>
      </source>
      <source path="devices/MKE18F16" target_path="device" type="src">
        <files mask="system_MKE18F16.c"/>
      </source>
      <source path="devices/MKE18F16" target_path="device" type="c_include">
        <files mask="system_MKE18F16.h"/>
      </source>
    </component>
    <component id="docs.MKE18F16.MKE18F16" name="MKE18F16" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for TWR-KE18F and HVP-KE18F.pdf"/>
      </source>
    </component>
    <component id="docs.images.MKE18F16" name="images" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="documentation">
      <source path="docs/images" target_path="images" type="image">
        <files mask="HVP-KE18F.gif"/>
        <files mask="TWR-KE18F.gif"/>
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="platform.drivers.acmp.MKE18F16" name="acmp" brief="ACMP Driver" version="2.0.5" full_name="ACMP Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.adc12.MKE18F16" name="adc" brief="ADC12 Driver" version="2.0.4" full_name="ADC12 Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc12.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc12.h"/>
      </source>
    </component>
    <component id="platform.drivers.cache_lmem.MKE18F16" name="cache" brief="CACHE Driver" version="2.0.3" full_name="CACHE Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MKE18F16" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_cmsis.MKE18F16" name="lpi2c_cmsis" brief="LPI2C CMSIS Driver" version="2.0.0" full_name="LPI2C CMSIS EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c_edma.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE18F16"/>
          <component_dependency value="RTE_Device.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_cmsis.c"/>
      </source>
      <source path="devices/MKE18F16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_cmsis.MKE18F16" name="lpspi_cmsis" brief="LPSPI CMSIS Driver" version="2.0.0" full_name="LPSPI CMSIS EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi_edma.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE18F16"/>
          <component_dependency value="RTE_Device.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_cmsis.c"/>
      </source>
      <source path="devices/MKE18F16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_edma.MKE18F16" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" full_name="LPUART CMSIS EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_edma.MKE18F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE18F16"/>
          <component_dependency value="RTE_Device.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MKE18F16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MKE18F16" name="common" brief="COMMON Driver" version="2.2.2" full_name="COMMON Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MKE18F16"/>
          <component_dependency value="device.MKE18F16_CMSIS.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.crc.MKE18F16" name="crc" brief="CRC Driver" version="2.0.2" full_name="CRC Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac32.MKE18F16" name="dac" brief="DAC32 Driver" version="2.0.1" full_name="DAC32 Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac32.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac32.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MKE18F16" name="dmamux" brief="DMAMUX Driver" version="2.0.4" full_name="DMAMUX Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.edma.MKE18F16" name="edma" brief="EDMA Driver" version="2.3.0" full_name="EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="platform.drivers.dmamux.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ewm.MKE18F16" name="ewm" brief="EWM Driver" version="2.0.2" full_name="EWM Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MKE18F16" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan.MKE18F16" name="flexcan" brief="FLEXCAN Driver" version="2.5.0" full_name="FLEXCAN Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan_edma.MKE18F16" name="flexcan_edma" brief="FLEXCAN Driver" version="2.5.0" full_name="FLEXCAN EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
          <component_dependency value="platform.drivers.flexcan.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MKE18F16" name="flexio" brief="FLEXIO Driver" version="2.0.2" full_name="FLEXIO Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MKE18F16" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.2.0" full_name="FLEXIO I2C Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi.MKE18F16" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.1.3" full_name="FLEXIO SPI Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MKE18F16" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.1.3" full_name="FLEXIO SPI EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
          <component_dependency value="platform.drivers.flexio_spi.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MKE18F16" name="flexio_uart" brief="FLEXIO UART Driver" version="2.1.6" full_name="FLEXIO UART Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MKE18F16" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.1.6" full_name="FLEXIO UART EDMA Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.MKE18F16"/>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ftm.MKE18F16" name="ftm" brief="FTM Driver" version="2.2.1" full_name="FTM Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
    </component>
    <component id="driver.fxos8700cq.MKE18F16" name="fxos8700cq" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="board_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="components/fxos8700cq" target_path="accel" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source path="components/fxos8700cq" target_path="accel" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MKE18F16" name="gpio" brief="GPIO Driver" version="2.4.1" full_name="GPIO Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.lmem.MKE18F16" name="lmem" brief="LMEM Driver" version="2.1.1" full_name="LMEM Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lmem_cache.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lmem_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c.MKE18F16" name="i2c" brief="LPI2C Driver" version="2.1.10" full_name="LPI2C Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_edma.MKE18F16" name="i2c_edma" brief="LPI2C Driver" version="2.1.10" full_name="LPI2C Edma Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
          <component_dependency value="platform.drivers.lpi2c.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MKE18F16" name="i2c_freertos" brief="LPI2C Driver" version="2.1.10" full_name="LPI2C Freerto Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MKE18F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpit.MKE18F16" name="lpit" brief="LPIT Driver" version="2.0.1" full_name="LPIT Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi.MKE18F16" name="lpspi" brief="LPSPI Driver" version="2.0.4" full_name="LPSPI Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_edma.MKE18F16" name="lpspi_edma" brief="LPSPI Driver" version="2.0.4" full_name="LPSPI Edma Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
          <component_dependency value="platform.drivers.lpspi.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_freertos.MKE18F16" name="lpspi_freertos" brief="LPSPI Driver" version="2.0.4" full_name="LPSPI Freertos Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MKE18F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MKE18F16" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MKE18F16" name="lpuart" brief="LPUART Driver" version="2.2.8" full_name="LPUART Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_edma.MKE18F16" name="lpuart_edma" brief="LPUART Driver" version="2.2.8" full_name="LPUART Edma Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE18F16"/>
          <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_freertos.MKE18F16" name="lpuart_freertos" brief="LPUART Driver" version="2.2.8" full_name="LPUART Freertos Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdb.MKE18F16" name="pdb" brief="PDB Driver" version="2.0.3" full_name="PDB Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MKE18F16" name="pmc" brief="PMC Driver" version="2.0.2" full_name="PMC Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MKE18F16" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.pwt.MKE18F16" name="pwt" brief="PWT Driver" version="2.0.1" full_name="PWT Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pwt.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pwt.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MKE18F16" name="rcm" brief="RCM Driver" version="2.0.3" full_name="RCM Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MKE18F16" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MKE18F16" name="sim" brief="SIM Driver" version="2.1.1" full_name="SIM Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MKE18F16" name="smc" brief="SMC Driver" version="2.0.6" full_name="SMC Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sysmpu.MKE18F16" name="sysmpu" brief="SYSMPU Driver" version="2.2.2" full_name="SYSMPU Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_sysmpu.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sysmpu.h"/>
      </source>
    </component>
    <component id="platform.drivers.trgmux.MKE18F16" name="trgmux" brief="TRGMUX Driver" version="2.0.1" full_name="TRGMUX Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog32.MKE18F16" name="wdog" brief="WDOG32 Driver" version="2.0.2" full_name="WDOG32 Driver" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source path="devices/MKE18F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.MKE18F16" name="Amazon FreeRTOS kernel" brief="Amazon FreeRTOS kernel" version="201908.00.0" full_name="Amazon FreeRTOS kernel" devices="MKE18F512xxx16" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.amazon_freertos-kernel.extension.MKE18F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.template.MKE18F16"/>
        </all>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel" target_path="amazon-freertos/freertos_kernel" type="src">
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/include" target_path="amazon-freertos/freertos_kernel/include" type="c_include">
        <files mask="FreeRTOS.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="mcuxpresso" compiler="compiler_gcc" path="rtos/amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" target_path="amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" type="src" device_cores="core0_MKE18F512xxx16">
        <files mask="port.c"/>
      </source>
      <source toolchain="mcuxpresso" compiler="compiler_gcc" path="rtos/amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" target_path="amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" type="c_include" device_cores="core0_MKE18F512xxx16">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable" target_path="amazon-freertos/freertos_kernel/portable" type="doc">
        <files mask="readme.txt"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.armv8m.MKE18F16" name="Amazon FreeRTOS port ARMv8M" brief="Amazon FreeRTOS port ARMv8M" version="201908.00.0" full_name="Amazon FreeRTOS port ARMv8M" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/macros" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.cm33_nonsecure_port_no_trustzone.MKE18F16" name="cm33_nonsecure_port_no_trustzone" brief="Amazon FreeRTOS cm33 nonsecure port" version="201908.00.0" full_name="Amazon FreeRTOS cm33 nonsecure port" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
    </component>
    <component id="middleware.amazon_freertos-kernel.doc.MKE18F16" name="Amazon FreeRTOS doc" brief="Amazon FreeRTOS doc" version="201908.00.0" full_name="Amazon FreeRTOS doc" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/doc" target_path="amazon-freertos/doc" type="doc">
        <files mask="AFQ Developer Guide - Board Qualification Errata.pdf"/>
        <files mask="Amazon FreeRTOS Qualification Developer Guide.pdf"/>
      </source>
      <source path="rtos/amazon-freertos/doc" target_path="amazon-freertos/doc" type="other">
        <files mask="README.md"/>
        <files mask="guidance.md"/>
      </source>
      <source path="rtos/amazon-freertos/doc/config" target_path="amazon-freertos/doc/config" type="other">
        <files mask="atomic"/>
        <files mask="ble"/>
        <files mask="common"/>
        <files mask="defender"/>
        <files mask="https"/>
        <files mask="linear_containers"/>
        <files mask="logging"/>
        <files mask="main"/>
        <files mask="mqtt"/>
        <files mask="platform"/>
        <files mask="secure_sockets"/>
        <files mask="shadow"/>
        <files mask="static_memory"/>
        <files mask="taskpool"/>
        <files mask="wifi"/>
      </source>
      <source path="rtos/amazon-freertos/doc/config/html" target_path="amazon-freertos/doc/config/html" type="doc">
        <files mask="footer.html"/>
        <files mask="header.html"/>
        <files mask="style.css"/>
      </source>
      <source path="rtos/amazon-freertos/doc/config" target_path="amazon-freertos/doc/config" type="xml">
        <files mask="layout_library.xml"/>
        <files mask="layout_main.xml"/>
      </source>
      <source path="rtos/amazon-freertos/doc/extra_files/https" target_path="amazon-freertos/doc/extra_files/https" type="doc">
        <files mask="gettysburg.txt"/>
      </source>
      <source path="rtos/amazon-freertos/doc/freertos_port_qual" target_path="amazon-freertos/doc/freertos_port_qual" type="doc">
        <files mask="aFreeRTOS_Porting_Guide.pdf"/>
        <files mask="aFreeRTOS_Qualification_Guide.pdf"/>
      </source>
      <source path="rtos/amazon-freertos/doc/guide" target_path="amazon-freertos/doc/guide" type="doc">
        <files mask="building.txt"/>
        <files mask="developer.txt"/>
        <files mask="style.txt"/>
      </source>
      <source path="rtos/amazon-freertos/doc/lib" target_path="amazon-freertos/doc/lib" type="doc">
        <files mask="atomic.txt"/>
        <files mask="ble.txt"/>
        <files mask="https.txt"/>
        <files mask="linear_containers.txt"/>
        <files mask="logging.txt"/>
        <files mask="mqtt.txt"/>
        <files mask="platform.txt"/>
        <files mask="secure_sockets.txt"/>
        <files mask="shadow.txt"/>
        <files mask="static_memory.txt"/>
        <files mask="taskpool.txt"/>
        <files mask="wifi.txt"/>
      </source>
      <source path="rtos/amazon-freertos/doc/plantuml" target_path="amazon-freertos/doc/plantuml" type="other">
        <files mask="RecyclableJobStatus.pu"/>
        <files mask="StaticJobStatus.pu"/>
        <files mask="https_client_async_callback_order.pu"/>
        <files mask="mqtt_demo.pu"/>
        <files mask="mqtt_design_typicaloperation.pu"/>
        <files mask="taskpool_design_typicaloperation.pu"/>
      </source>
      <source path="rtos/amazon-freertos/doc/plantuml" target_path="amazon-freertos/doc/plantuml" type="xml">
        <files mask="https_client_async_workflow.xml"/>
        <files mask="https_client_sync_workflow.xml"/>
      </source>
      <source path="rtos/amazon-freertos/doc/plantuml/images" target_path="amazon-freertos/doc/plantuml/images" type="image">
        <files mask="BLE-architecture.png"/>
        <files mask="RecyclableJobStatus.png"/>
        <files mask="StaticJobStatus.png"/>
        <files mask="blediagram.png"/>
        <files mask="https_client_async_callback_order.png"/>
        <files mask="https_client_async_workflow.png"/>
        <files mask="https_client_sync_workflow.png"/>
        <files mask="mqtt_demo.png"/>
        <files mask="mqtt_design_typicaloperation.png"/>
        <files mask="taskpool_design_typicaloperation.png"/>
      </source>
      <source path="rtos/amazon-freertos/doc/tag" target_path="amazon-freertos/doc/tag" type="other">
        <files mask="README.md"/>
      </source>
      <source path="rtos/amazon-freertos/doc/user_guide" target_path="amazon-freertos/doc/user_guide" type="doc">
        <files mask="global_config.txt"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.extension.MKE18F16" name="Amazon FreeRTOS NXP extension" brief="Amazon FreeRTOS NXP extension" version="201908.00.0" full_name="Amazon FreeRTOS NXP extension" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel extensions" user_visible="false" type="other">
      <source path="rtos/amazon-freertos/freertos_kernel/include" target_path="amazon-freertos/freertos_kernel/include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_1.MKE18F16" name="Amazon FreeRTOS heap 1" brief="Amazon FreeRTOS heap 1" version="201908.00.0" full_name="Amazon FreeRTOS heap 1" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_2.MKE18F16" name="Amazon FreeRTOS heap 2" brief="Amazon FreeRTOS heap 2" version="201908.00.0" full_name="Amazon FreeRTOS heap 2" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_3.MKE18F16" name="Amazon FreeRTOS heap 3" brief="Amazon FreeRTOS heap 3" version="201908.00.0" full_name="Amazon FreeRTOS heap_3" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_4.MKE18F16" name="Amazon FreeRTOS heap 4" brief="Amazon FreeRTOS heap 4" version="201908.00.0" full_name="Amazon FreeRTOS heap 4" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_5.MKE18F16" name="Amazon FreeRTOS heap 5" brief="Amazon FreeRTOS heap 5" version="201908.00.0" full_name="Amazon FreeRTOS heap 5" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_newlib.MKE18F16" name="FreeRTOS heap newlib" brief="Amazon FreeRTOS heap newlib" version="201908.00.0" full_name="Amazon FreeRTOS heap newlib" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel extensions" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.mpu_wrappers.MKE18F16" name="Amazon FreeRTOS MPU wrappers" brief="Amazon FreeRTOS MPU wrappers" version="201908.00.0" full_name="Amazon FreeRTOS MPU wrappers" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/Common" target_path="amazon-freertos/freertos_kernel/portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.root_doc.MKE18F16" name="Root Amazon FreeRTOS documents." brief="Amazon FreeRTOS root documents" version="201908.00.0" full_name="Amazon FreeRTOS root documents" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE18F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="other">
        <files mask="CHANGELOG.md"/>
        <files mask="CODE_OF_CONDUCT.md"/>
        <files mask="CONTRIBUTING.md"/>
        <files mask="checksums.json"/>
      </source>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="doc">
        <files mask="CMakeLists.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
        <files mask="directories.txt"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.template.MKE18F16" name="Amazon FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="201908.00.0" full_name="Amazon FreeRTOS configuration template" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="project_template">
      <source exclude="true" path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source path="rtos/amazon-freertos/template/ARM_CM4F" target_path="source" type="c_include" device_cores="core0_MKE18F512xxx16">
        <files mask="FreeRTOSConfig.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.unused.MKE18F16" name="Amazon FreeRTOS unused" brief="Amazon FreeRTOS unused" version="201908.00.0" full_name="Amazon FreeRTOS unused" devices="MKE18F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="other">
        <files mask="LICENSE"/>
        <files mask="README.md"/>
      </source>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="script">
        <files mask="PreLoad.cmake"/>
      </source>
    </component>
    <component id="middleware.baremetal.MKE18F16" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MKE18F512xxx16" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.fatfs.MKE18F16" name="fatfs" brief="FatFs" version="0.13.3" full_name="FAT File System stack" devices="MKE18F512xxx16" category="File System/FAT File System" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.fatfs.template.MKE18F16"/>
          <component_dependency value="middleware.fatfs.ram.MKE18F16"/>
        </all>
      </dependencies>
      <source path="middleware/fatfs/source" target_path="fatfs/source" type="src">
        <files mask="diskio.c"/>
        <files mask="ff.c"/>
        <files mask="ffsystem.c"/>
        <files mask="ffunicode.c"/>
      </source>
      <source path="middleware/fatfs/source" target_path="fatfs/source" type="c_include">
        <files mask="diskio.h"/>
        <files mask="ff.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.ram.MKE18F16" name="ram" brief="FatFs_RAM" version="0.13.3" full_name="Fatfs RAM layer" devices="MKE18F512xxx16" category="File System/FAT File System" user_visible="true" type="middleware">
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/source/fsl_ram_disk" type="src">
        <files mask="fsl_ram_disk.c"/>
      </source>
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/source/fsl_ram_disk" type="c_include">
        <files mask="fsl_ram_disk.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.template.MKE18F16" name="fatfs" brief="FatFs template" version="0.13.3" full_name="FatFs template configuration" devices="MKE18F512xxx16" category="File System/FAT File System" user_visible="true" type="project_template">
      <source path="middleware/fatfs/template" target_path="source" type="c_include">
        <files mask="ffconf.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.unused_files.MKE18F16" name="unused_files" brief="fatfs files unused by projects" version="0.13.3" devices="MKE18F512xxx16" user_visible="false" type="other">
      <source exclude="true" path="middleware/fatfs" target_path="fatfs" type="doc">
        <files mask="ChangeLogKSDK.txt" hidden="true"/>
        <files mask="LICENSE.txt" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents" target_path="fatfs/documents" type="doc">
        <files mask="00index_e.html" hidden="true"/>
        <files mask="css_e.css" hidden="true"/>
        <files mask="updates.txt" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/doc" target_path="fatfs/documents/doc" type="doc">
        <files mask="appnote.html" hidden="true"/>
        <files mask="chdir.html" hidden="true"/>
        <files mask="chdrive.html" hidden="true"/>
        <files mask="chmod.html" hidden="true"/>
        <files mask="close.html" hidden="true"/>
        <files mask="closedir.html" hidden="true"/>
        <files mask="config.html" hidden="true"/>
        <files mask="dinit.html" hidden="true"/>
        <files mask="dioctl.html" hidden="true"/>
        <files mask="dread.html" hidden="true"/>
        <files mask="dstat.html" hidden="true"/>
        <files mask="dwrite.html" hidden="true"/>
        <files mask="eof.html" hidden="true"/>
        <files mask="error.html" hidden="true"/>
        <files mask="expand.html" hidden="true"/>
        <files mask="fattime.html" hidden="true"/>
        <files mask="fdisk.html" hidden="true"/>
        <files mask="filename.html" hidden="true"/>
        <files mask="findfirst.html" hidden="true"/>
        <files mask="findnext.html" hidden="true"/>
        <files mask="forward.html" hidden="true"/>
        <files mask="getcwd.html" hidden="true"/>
        <files mask="getfree.html" hidden="true"/>
        <files mask="getlabel.html" hidden="true"/>
        <files mask="gets.html" hidden="true"/>
        <files mask="lseek.html" hidden="true"/>
        <files mask="mkdir.html" hidden="true"/>
        <files mask="mkfs.html" hidden="true"/>
        <files mask="mount.html" hidden="true"/>
        <files mask="open.html" hidden="true"/>
        <files mask="opendir.html" hidden="true"/>
        <files mask="printf.html" hidden="true"/>
        <files mask="putc.html" hidden="true"/>
        <files mask="puts.html" hidden="true"/>
        <files mask="rc.html" hidden="true"/>
        <files mask="read.html" hidden="true"/>
        <files mask="readdir.html" hidden="true"/>
        <files mask="rename.html" hidden="true"/>
        <files mask="sdir.html" hidden="true"/>
        <files mask="setcp.html" hidden="true"/>
        <files mask="setlabel.html" hidden="true"/>
        <files mask="sfatfs.html" hidden="true"/>
        <files mask="sfile.html" hidden="true"/>
        <files mask="sfileinfo.html" hidden="true"/>
        <files mask="size.html" hidden="true"/>
        <files mask="stat.html" hidden="true"/>
        <files mask="sync.html" hidden="true"/>
        <files mask="tell.html" hidden="true"/>
        <files mask="truncate.html" hidden="true"/>
        <files mask="unlink.html" hidden="true"/>
        <files mask="utime.html" hidden="true"/>
        <files mask="write.html" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="src">
        <files mask="app1.c" hidden="true"/>
        <files mask="app2.c" hidden="true"/>
        <files mask="app3.c" hidden="true"/>
        <files mask="app4.c" hidden="true"/>
        <files mask="app5.c" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="image">
        <files mask="f1.png" hidden="true"/>
        <files mask="f2.png" hidden="true"/>
        <files mask="f3.png" hidden="true"/>
        <files mask="f4.png" hidden="true"/>
        <files mask="f5.png" hidden="true"/>
        <files mask="f6.png" hidden="true"/>
        <files mask="f7.png" hidden="true"/>
        <files mask="funcs.png" hidden="true"/>
        <files mask="layers.png" hidden="true"/>
        <files mask="layers1.png" hidden="true"/>
        <files mask="layers2.png" hidden="true"/>
        <files mask="layers3.png" hidden="true"/>
        <files mask="modules.png" hidden="true"/>
        <files mask="rwtest1.png" hidden="true"/>
        <files mask="rwtest2.png" hidden="true"/>
        <files mask="rwtest3.png" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="archive">
        <files mask="mkfatimg.zip" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="doc">
        <files mask="mkfs.xls" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/source" type="doc">
        <files mask="00history.txt" hidden="true"/>
        <files mask="00readme.txt" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/source" type="c_include">
        <files mask="ffconf_template.h" hidden="true"/>
      </source>
    </component>
    <component id="middleware.fmstr.MKE18F16" name="freemaster" brief="FreeMASTER run-time debugging tool" version="3.0.1" devices="MKE18F512xxx16" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.fmstr.template_app.MKE18F16"/>
          <component_dependency value="middleware.fmstr.platform_gen32le.MKE18F16"/>
        </all>
      </dependencies>
      <source path="middleware/freemaster/src/common" target_path="freemaster" type="c_include">
        <files mask="freemaster.h"/>
        <files mask="freemaster_can.h"/>
        <files mask="freemaster_defcfg.h"/>
        <files mask="freemaster_private.h"/>
        <files mask="freemaster_protocol.h"/>
        <files mask="freemaster_rec.h"/>
        <files mask="freemaster_serial.h"/>
        <files mask="freemaster_tsa.h"/>
        <files mask="freemaster_ures.h"/>
        <files mask="freemaster_utils.h"/>
      </source>
      <source path="middleware/freemaster/src/common" target_path="freemaster" type="src">
        <files mask="freemaster_appcmd.c"/>
        <files mask="freemaster_can.c"/>
        <files mask="freemaster_pdbdm.c"/>
        <files mask="freemaster_pipes.c"/>
        <files mask="freemaster_protocol.c"/>
        <files mask="freemaster_rec.c"/>
        <files mask="freemaster_scope.c"/>
        <files mask="freemaster_serial.c"/>
        <files mask="freemaster_sha.c"/>
        <files mask="freemaster_tsa.c"/>
        <files mask="freemaster_ures.c"/>
        <files mask="freemaster_utils.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/can" target_path="freemaster/drivers/mcuxsdk/can" type="src">
        <files mask="freemaster_flexcan.c"/>
        <files mask="freemaster_mcan.c"/>
        <files mask="freemaster_mscan.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/can" target_path="freemaster/drivers/mcuxsdk/can" type="c_include">
        <files mask="freemaster_flexcan.h"/>
        <files mask="freemaster_mcan.h"/>
        <files mask="freemaster_mscan.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/serial" target_path="freemaster/drivers/mcuxsdk/serial" type="src">
        <files mask="freemaster_serial_lpsci.c"/>
        <files mask="freemaster_serial_lpuart.c"/>
        <files mask="freemaster_serial_miniusart.c"/>
        <files mask="freemaster_serial_uart.c"/>
        <files mask="freemaster_serial_usart.c"/>
        <files mask="freemaster_serial_usb.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/serial" target_path="freemaster/drivers/mcuxsdk/serial" type="c_include">
        <files mask="freemaster_serial_lpsci.h"/>
        <files mask="freemaster_serial_lpuart.h"/>
        <files mask="freemaster_serial_miniusart.h"/>
        <files mask="freemaster_serial_uart.h"/>
        <files mask="freemaster_serial_usart.h"/>
        <files mask="freemaster_serial_usb.h"/>
      </source>
    </component>
    <component id="middleware.fmstr.files.MKE18F16" name="fmstr_files" version="1.0.0" devices="MKE18F512xxx16" user_visible="false" type="other">
      <source path="middleware/freemaster" target_path="freemaster" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/freemaster/doc" target_path="freemaster/doc" type="doc">
        <files mask="release_notes.txt"/>
        <files mask="serial_protocol_readme.txt"/>
        <files mask="serial_protocol_v4.pdf"/>
        <files mask="user_guide.pdf"/>
      </source>
      <source path="middleware/freemaster/license" target_path="freemaster/license" type="doc">
        <files mask="LA_OPT_NXP_Software_License.pdf"/>
        <files mask="LA_OPT_NXP_Software_License.txt"/>
        <files mask="SW-Content-Register.txt"/>
      </source>
      <source path="middleware/freemaster/src/common" target_path="freemaster/src/common" type="c_include">
        <files mask="freemaster.h"/>
        <files mask="freemaster_can.h"/>
        <files mask="freemaster_defcfg.h"/>
        <files mask="freemaster_private.h"/>
        <files mask="freemaster_protocol.h"/>
        <files mask="freemaster_rec.h"/>
        <files mask="freemaster_serial.h"/>
        <files mask="freemaster_tsa.h"/>
        <files mask="freemaster_ures.h"/>
        <files mask="freemaster_utils.h"/>
      </source>
      <source path="middleware/freemaster/src/common" target_path="freemaster/src/common" type="src">
        <files mask="freemaster_appcmd.c"/>
        <files mask="freemaster_can.c"/>
        <files mask="freemaster_pdbdm.c"/>
        <files mask="freemaster_pipes.c"/>
        <files mask="freemaster_protocol.c"/>
        <files mask="freemaster_rec.c"/>
        <files mask="freemaster_scope.c"/>
        <files mask="freemaster_serial.c"/>
        <files mask="freemaster_sha.c"/>
        <files mask="freemaster_tsa.c"/>
        <files mask="freemaster_ures.c"/>
        <files mask="freemaster_utils.c"/>
      </source>
      <source path="middleware/freemaster/src/common" target_path="freemaster/src/common" type="other">
        <files mask="freemaster_cfg.h.example"/>
      </source>
      <source path="middleware/freemaster/src/drivers/ampxsdk/can/S32K1x" target_path="freemaster/src/drivers/ampxsdk/can/S32K1x" type="src">
        <files mask="freemaster_flexcan.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/ampxsdk/can/S32K1x" target_path="freemaster/src/drivers/ampxsdk/can/S32K1x" type="c_include">
        <files mask="freemaster_flexcan.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/ampxsdk/uart/S32K1x" target_path="freemaster/src/drivers/ampxsdk/uart/S32K1x" type="src">
        <files mask="freemaster_serial_lpuart.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/ampxsdk/uart/S32K1x" target_path="freemaster/src/drivers/ampxsdk/uart/S32K1x" type="c_include">
        <files mask="freemaster_serial_lpuart.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/Kxx" target_path="freemaster/src/drivers/dreg/Kxx" type="src">
        <files mask="freemaster_kxx_uart.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/Kxx" target_path="freemaster/src/drivers/dreg/Kxx" type="c_include">
        <files mask="freemaster_kxx_uart.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/MPC" target_path="freemaster/src/drivers/dreg/MPC" type="src">
        <files mask="freemaster_mpc574xp_linflex.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/MPC" target_path="freemaster/src/drivers/dreg/MPC" type="c_include">
        <files mask="freemaster_mpc574xp_linflex.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/S12Z" target_path="freemaster/src/drivers/dreg/S12Z" type="src">
        <files mask="freemaster_s12z_mscan.c"/>
        <files mask="freemaster_s12z_sci.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/S12Z" target_path="freemaster/src/drivers/dreg/S12Z" type="c_include">
        <files mask="freemaster_s12z_mscan.h"/>
        <files mask="freemaster_s12z_sci.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/S32S" target_path="freemaster/src/drivers/dreg/S32S" type="src">
        <files mask="freemaster_s32s247tv_linflex.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/dreg/S32S" target_path="freemaster/src/drivers/dreg/S32S" type="c_include">
        <files mask="freemaster_s32s247tv_linflex.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/can" target_path="freemaster/src/drivers/mcuxsdk/can" type="src">
        <files mask="freemaster_flexcan.c"/>
        <files mask="freemaster_mcan.c"/>
        <files mask="freemaster_mscan.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/can" target_path="freemaster/src/drivers/mcuxsdk/can" type="c_include">
        <files mask="freemaster_flexcan.h"/>
        <files mask="freemaster_mcan.h"/>
        <files mask="freemaster_mscan.h"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/serial" target_path="freemaster/src/drivers/mcuxsdk/serial" type="src">
        <files mask="freemaster_serial_lpsci.c"/>
        <files mask="freemaster_serial_lpuart.c"/>
        <files mask="freemaster_serial_miniusart.c"/>
        <files mask="freemaster_serial_uart.c"/>
        <files mask="freemaster_serial_usart.c"/>
        <files mask="freemaster_serial_usb.c"/>
      </source>
      <source path="middleware/freemaster/src/drivers/mcuxsdk/serial" target_path="freemaster/src/drivers/mcuxsdk/serial" type="c_include">
        <files mask="freemaster_serial_lpsci.h"/>
        <files mask="freemaster_serial_lpuart.h"/>
        <files mask="freemaster_serial_miniusart.h"/>
        <files mask="freemaster_serial_uart.h"/>
        <files mask="freemaster_serial_usart.h"/>
        <files mask="freemaster_serial_usb.h"/>
      </source>
      <source path="middleware/freemaster/src/platforms/gen32be" target_path="freemaster/src/platforms/gen32be" type="c_include">
        <files mask="freemaster_gen32be.h"/>
      </source>
      <source path="middleware/freemaster/src/platforms/gen32le" target_path="freemaster/src/platforms/gen32le" type="c_include">
        <files mask="freemaster_gen32le.h"/>
      </source>
      <source path="middleware/freemaster/src/platforms/s12z" target_path="freemaster/src/platforms/s12z" type="c_include">
        <files mask="freemaster_s12z.h"/>
      </source>
    </component>
    <component id="middleware.fmstr.platform_gen32le.MKE18F16" name="platform_gen32le" brief="FreeMASTER gen32le platform support" version="1.0.0" devices="MKE18F512xxx16" user_visible="false" type="other">
      <source path="middleware/freemaster/src/platforms/gen32le" target_path="freemaster/platforms" type="c_include">
        <files mask="freemaster_gen32le.h"/>
      </source>
    </component>
    <component id="middleware.fmstr.template_app.MKE18F16" name="freemaster_template_app" brief="FreeMASTER application template" version="1.0.0" devices="MKE18F512xxx16" user_visible="false" type="project_template">
      <source path="middleware/freemaster/src/template" target_path="source" type="c_include">
        <files mask="freemaster_cfg.h"/>
      </source>
    </component>
    <component id="middleware.motor_control.acim.MKE18F16" name="mc_acim" brief="Motor control ACIM files" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="other">
      <source path="middleware/motor_control/acim" target_path="source" type="src">
        <files mask="fm_tsa_acim.c"/>
      </source>
      <source path="middleware/motor_control/acim" target_path="source" type="c_include">
        <files mask="fm_tsa_acim.h"/>
      </source>
      <source path="middleware/motor_control/acim/mc_algorithms" target_path="mc_algorithms" type="src">
        <files mask="acim_control.c"/>
      </source>
      <source path="middleware/motor_control/acim/mc_algorithms" target_path="mc_algorithms" type="c_include">
        <files mask="acim_control.h"/>
      </source>
      <source path="middleware/motor_control/acim/mc_identification/src_common" target_path="mc_identification/src_common" type="c_include">
        <files mask="mid_def.h"/>
        <files mask="mid_sm_ctrl.h"/>
        <files mask="mid_sm_states.h"/>
      </source>
      <source path="middleware/motor_control/acim/mc_identification/src_common" target_path="mc_identification/src_common" type="src">
        <files mask="mid_sm_ctrl.c"/>
        <files mask="mid_sm_states.c"/>
      </source>
      <source path="middleware/motor_control/acim/mc_identification/src_routines" target_path="mc_identification/src_routines" type="src">
        <files mask="blocked_test.c"/>
        <files mask="calc_acim.c"/>
        <files mask="calc_power.c"/>
        <files mask="mech_measure.c"/>
        <files mask="noload_test.c"/>
        <files mask="pwrstg_characteristic.c"/>
        <files mask="rs_measure.c"/>
      </source>
      <source path="middleware/motor_control/acim/mc_identification/src_routines" target_path="mc_identification/src_routines" type="c_include">
        <files mask="blocked_test.h"/>
        <files mask="calc_acim.h"/>
        <files mask="calc_power.h"/>
        <files mask="mech_measure.h"/>
        <files mask="noload_test.h"/>
        <files mask="pwrstg_characteristic.h"/>
        <files mask="rs_measure.h"/>
      </source>
      <source path="middleware/motor_control/acim/mc_state_machine" target_path="mc_state_machine" type="src">
        <files mask="m1_sm_ref_sol.c"/>
      </source>
      <source path="middleware/motor_control/acim/mc_state_machine" target_path="mc_state_machine" type="c_include">
        <files mask="m1_sm_ref_sol.h"/>
      </source>
      <source path="middleware/motor_control/acim/state_machine" target_path="state_machine" type="src">
        <files mask="state_machine.c"/>
      </source>
      <source path="middleware/motor_control/acim/state_machine" target_path="state_machine" type="c_include">
        <files mask="state_machine.h"/>
      </source>
    </component>
    <component id="middleware.motor_control.bldc.MKE18F16" name="mc_bldc" brief="Motor control BLDC files" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="other">
      <source path="middleware/motor_control/bldc" target_path="source" type="src">
        <files mask="fm_tsa_bldc.c"/>
      </source>
      <source path="middleware/motor_control/bldc" target_path="source" type="c_include">
        <files mask="fm_tsa_bldc.h"/>
      </source>
      <source path="middleware/motor_control/bldc/mc_algorithms" target_path="mc_algorithms" type="src">
        <files mask="bldc_control.c"/>
      </source>
      <source path="middleware/motor_control/bldc/mc_algorithms" target_path="mc_algorithms" type="c_include">
        <files mask="bldc_control.h"/>
      </source>
      <source path="middleware/motor_control/bldc/mc_state_machine" target_path="mc_state_machine" type="src">
        <files mask="m1_sm_ref_sol.c"/>
      </source>
      <source path="middleware/motor_control/bldc/mc_state_machine" target_path="mc_state_machine" type="c_include">
        <files mask="m1_sm_ref_sol.h"/>
      </source>
      <source path="middleware/motor_control/bldc/state_machine" target_path="state_machine" type="src">
        <files mask="state_machine.c"/>
      </source>
      <source path="middleware/motor_control/bldc/state_machine" target_path="state_machine" type="c_include">
        <files mask="state_machine.h"/>
      </source>
    </component>
    <component id="middleware.motor_control.pmsm.MKE18F16" name="mc_pmsm" brief="Motor control PMSM files" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="other">
      <source path="middleware/motor_control/pmsm/pmsm_float" target_path="source" type="src">
        <files mask="fm_tsa_pmsm.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float" target_path="source" type="c_include">
        <files mask="fm_tsa_pmsm.h"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float/mc_algorithms" target_path="mc_algorithms" type="src">
        <files mask="pmsm_control.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float/mc_algorithms" target_path="mc_algorithms" type="c_include">
        <files mask="pmsm_control.h"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float/mc_identification" target_path="mc_identification" type="src">
        <files mask="hall_calib.c"/>
        <files mask="ke_measure.c"/>
        <files mask="ls_measure.c"/>
        <files mask="mech_measure.c"/>
        <files mask="mid_auxiliary.c"/>
        <files mask="mid_sm_ctrl.c"/>
        <files mask="mid_sm_states.c"/>
        <files mask="pp_measure.c"/>
        <files mask="pwrstg_characteristic.c"/>
        <files mask="rs_measure.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float/mc_identification" target_path="mc_identification" type="c_include">
        <files mask="hall_calib.h"/>
        <files mask="ke_measure.h"/>
        <files mask="ls_measure.h"/>
        <files mask="mech_measure.h"/>
        <files mask="mid_auxiliary.h"/>
        <files mask="mid_def.h"/>
        <files mask="mid_sm_ctrl.h"/>
        <files mask="mid_sm_states.h"/>
        <files mask="pp_measure.h"/>
        <files mask="pwrstg_characteristic.h"/>
        <files mask="rs_measure.h"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float/state_machine" target_path="state_machine" type="src">
        <files mask="state_machine.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_float/state_machine" target_path="state_machine" type="c_include">
        <files mask="state_machine.h"/>
      </source>
    </component>
    <component id="middleware.motor_control.pmsm_frac.MKE18F16" name="mc_pmsm" brief="Motor control PMSM files" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="other">
      <source path="middleware/motor_control/pmsm/pmsm_frac" target_path="source" type="src">
        <files mask="fm_tsa_pmsm.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac" target_path="source" type="c_include">
        <files mask="fm_tsa_pmsm.h"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac/mc_algorithms" target_path="mc_algorithms" type="src">
        <files mask="pmsm_control.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac/mc_algorithms" target_path="mc_algorithms" type="c_include">
        <files mask="pmsm_control.h"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac/mc_identification" target_path="mc_identification" type="src">
        <files mask="ke_measure.c"/>
        <files mask="ls_measure.c"/>
        <files mask="mid_auxiliary.c"/>
        <files mask="mid_sm_ctrl.c"/>
        <files mask="mid_sm_states.c"/>
        <files mask="pp_measure.c"/>
        <files mask="pwrstg_characteristic.c"/>
        <files mask="rs_measure.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac/mc_identification" target_path="mc_identification" type="c_include">
        <files mask="ke_measure.h"/>
        <files mask="ls_measure.h"/>
        <files mask="mid_auxiliary.h"/>
        <files mask="mid_def.h"/>
        <files mask="mid_sm_ctrl.h"/>
        <files mask="mid_sm_states.h"/>
        <files mask="pp_measure.h"/>
        <files mask="pwrstg_characteristic.h"/>
        <files mask="rs_measure.h"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac/state_machine" target_path="state_machine" type="src">
        <files mask="state_machine.c"/>
      </source>
      <source path="middleware/motor_control/pmsm/pmsm_frac/state_machine" target_path="state_machine" type="c_include">
        <files mask="state_machine.h"/>
      </source>
    </component>
    <component id="middleware.rtcesl.cm4f.MKE18F16" name="rtcesl" brief="Real Time Control Embedded Software Library for CM4 core" version="1.1.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="middleware">
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/AMCLIB/Include" target_path="rtcesl/amclib" type="c_include">
        <files mask="AMCLIB_ACIMCtrlMTPA_FLT.h"/>
        <files mask="AMCLIB_ACIMRotFluxObsrv_FLT.h"/>
        <files mask="AMCLIB_ACIMSpeedMRAS_FLT.h"/>
        <files mask="AMCLIB_AngleTrackObsrv_F32.h"/>
        <files mask="AMCLIB_AngleTrackObsrv_FLT.h"/>
        <files mask="AMCLIB_CtrlFluxWkng_A32.h"/>
        <files mask="AMCLIB_CtrlFluxWkng_FLT.h"/>
        <files mask="AMCLIB_PMSMBemfObsrvAB_A32.h"/>
        <files mask="AMCLIB_PMSMBemfObsrvAB_FLT.h"/>
        <files mask="AMCLIB_PMSMBemfObsrvDQ_A32.h"/>
        <files mask="AMCLIB_PMSMBemfObsrvDQ_FLT.h"/>
        <files mask="AMCLIB_TrackObsrv_F32.h"/>
        <files mask="AMCLIB_TrackObsrv_FLT.h"/>
        <files mask="amclib.h"/>
        <files mask="amclib_fp.h"/>
        <files mask="amclib_types.h"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/AMCLIB" target_path="libs" type="lib">
        <files mask="libAMCLIB.a"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/GDFLIB/Include" target_path="rtcesl/gdflib" type="c_include">
        <files mask="GDFLIB_FilterExp_F32.h"/>
        <files mask="GDFLIB_FilterExp_FLT.h"/>
        <files mask="GDFLIB_FilterIIR1_F32.h"/>
        <files mask="GDFLIB_FilterIIR1_F32_Asmi.h"/>
        <files mask="GDFLIB_FilterIIR1_FLT.h"/>
        <files mask="GDFLIB_FilterIIR2_F32.h"/>
        <files mask="GDFLIB_FilterIIR2_FLT.h"/>
        <files mask="GDFLIB_FilterIIR3_F32.h"/>
        <files mask="GDFLIB_FilterIIR3_FLT.h"/>
        <files mask="GDFLIB_FilterIIR4_F32.h"/>
        <files mask="GDFLIB_FilterIIR4_FLT.h"/>
        <files mask="GDFLIB_FilterMA_A32.h"/>
        <files mask="GDFLIB_FilterMA_FLT.h"/>
        <files mask="gdflib.h"/>
        <files mask="gdflib_fp.h"/>
        <files mask="gdflib_types.h"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/GDFLIB" target_path="libs" type="lib">
        <files mask="libGDFLIB.a"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/GFLIB/Include" target_path="rtcesl/gflib" type="c_include">
        <files mask="GFLIB_Acos_F16.h"/>
        <files mask="GFLIB_Acos_FLT.h"/>
        <files mask="GFLIB_Asin_F16.h"/>
        <files mask="GFLIB_Asin_FLT.h"/>
        <files mask="GFLIB_AtanYX_F16.h"/>
        <files mask="GFLIB_AtanYX_FLT.h"/>
        <files mask="GFLIB_Atan_F32.h"/>
        <files mask="GFLIB_Atan_FLT.h"/>
        <files mask="GFLIB_CtrlBetaIPDp_A32.h"/>
        <files mask="GFLIB_CtrlBetaIPDp_FLT.h"/>
        <files mask="GFLIB_CtrlBetaIPp_A32.h"/>
        <files mask="GFLIB_CtrlBetaIPp_FLT.h"/>
        <files mask="GFLIB_CtrlPIDp_A32.h"/>
        <files mask="GFLIB_CtrlPIDp_FLT.h"/>
        <files mask="GFLIB_CtrlPIp_A32.h"/>
        <files mask="GFLIB_CtrlPIp_FLT.h"/>
        <files mask="GFLIB_DFlexRamp_A32.h"/>
        <files mask="GFLIB_DFlexRamp_FLT.h"/>
        <files mask="GFLIB_DRamp_F16.h"/>
        <files mask="GFLIB_DRamp_F32.h"/>
        <files mask="GFLIB_DRamp_FLT.h"/>
        <files mask="GFLIB_FlexRamp_A32.h"/>
        <files mask="GFLIB_FlexRamp_FLT.h"/>
        <files mask="GFLIB_FlexSRamp_A32.h"/>
        <files mask="GFLIB_FlexSRamp_FLT.h"/>
        <files mask="GFLIB_Hyst_F16_Asmi.h"/>
        <files mask="GFLIB_Hyst_FLT.h"/>
        <files mask="GFLIB_Integrator_A32.h"/>
        <files mask="GFLIB_Integrator_FLT.h"/>
        <files mask="GFLIB_Limit_F16.h"/>
        <files mask="GFLIB_Limit_F32.h"/>
        <files mask="GFLIB_Limit_FLT.h"/>
        <files mask="GFLIB_LowerLimit_F16.h"/>
        <files mask="GFLIB_LowerLimit_F32.h"/>
        <files mask="GFLIB_LowerLimit_FLT.h"/>
        <files mask="GFLIB_LutPer_F16_Asmi.h"/>
        <files mask="GFLIB_LutPer_F32.h"/>
        <files mask="GFLIB_LutPer_FLT.h"/>
        <files mask="GFLIB_Lut_F16_Asmi.h"/>
        <files mask="GFLIB_Lut_F32.h"/>
        <files mask="GFLIB_Lut_FLT.h"/>
        <files mask="GFLIB_Ramp_F16.h"/>
        <files mask="GFLIB_Ramp_F32.h"/>
        <files mask="GFLIB_Ramp_FLT.h"/>
        <files mask="GFLIB_SinCos_F32.h"/>
        <files mask="GFLIB_SinCos_FLT.h"/>
        <files mask="GFLIB_Sqrt_F16.h"/>
        <files mask="GFLIB_Sqrt_F32.h"/>
        <files mask="GFLIB_Sqrt_FLT_Asmi.h"/>
        <files mask="GFLIB_Tan_F32.h"/>
        <files mask="GFLIB_Tan_FLT.h"/>
        <files mask="GFLIB_UpperLimit_F16.h"/>
        <files mask="GFLIB_UpperLimit_F32.h"/>
        <files mask="GFLIB_UpperLimit_FLT.h"/>
        <files mask="GFLIB_VectorLimit_F16.h"/>
        <files mask="GFLIB_VectorLimit_FLT.h"/>
        <files mask="gflib.h"/>
        <files mask="gflib_fp.h"/>
        <files mask="gflib_types.h"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/GFLIB" target_path="libs" type="lib">
        <files mask="libGFLIB.a"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/GMCLIB/Include" target_path="rtcesl/gmclib" type="c_include">
        <files mask="GMCLIB_Clark_F16_Asmi.h"/>
        <files mask="GMCLIB_Clark_FLT.h"/>
        <files mask="GMCLIB_Decoupling_A32.h"/>
        <files mask="GMCLIB_Decoupling_FLT.h"/>
        <files mask="GMCLIB_ElimDcBusRip_A32_Asmi.h"/>
        <files mask="GMCLIB_ElimDcBusRip_F16_Asmi.h"/>
        <files mask="GMCLIB_ElimDcBusRip_FLT.h"/>
        <files mask="GMCLIB_Park_F16_Asmi.h"/>
        <files mask="GMCLIB_Park_FLT.h"/>
        <files mask="GMCLIB_Svm_F16.h"/>
        <files mask="gmclib.h"/>
        <files mask="gmclib_fp.h"/>
        <files mask="gmclib_types.h"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/GMCLIB" target_path="libs" type="lib">
        <files mask="libGMCLIB.a"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/MLIB/Include" target_path="rtcesl/mlib" type="c_include">
        <files mask="MLIB_Abs_F16.h"/>
        <files mask="MLIB_Abs_F16_Asmi.h"/>
        <files mask="MLIB_Abs_F32.h"/>
        <files mask="MLIB_Abs_F32_Asmi.h"/>
        <files mask="MLIB_Abs_FLT.h"/>
        <files mask="MLIB_Abs_FLT_Asmi.h"/>
        <files mask="MLIB_Add4_F16_Asmi.h"/>
        <files mask="MLIB_Add4_F32_Asmi.h"/>
        <files mask="MLIB_Add4_FLT.h"/>
        <files mask="MLIB_Add_A32.h"/>
        <files mask="MLIB_Add_F16.h"/>
        <files mask="MLIB_Add_F16_Asmi.h"/>
        <files mask="MLIB_Add_F32.h"/>
        <files mask="MLIB_Add_F32_Asmi.h"/>
        <files mask="MLIB_Add_FLT.h"/>
        <files mask="MLIB_BiShift_F16.h"/>
        <files mask="MLIB_BiShift_F32.h"/>
        <files mask="MLIB_Clb_F16.h"/>
        <files mask="MLIB_Clb_F32.h"/>
        <files mask="MLIB_ConvSc_FLT_Asmi.h"/>
        <files mask="MLIB_Conv_F32.h"/>
        <files mask="MLIB_Conv_FLT_Asmi.h"/>
        <files mask="MLIB_Div1Q_A32.h"/>
        <files mask="MLIB_Div1Q_F16.h"/>
        <files mask="MLIB_Div1Q_F32.h"/>
        <files mask="MLIB_Div_A32.h"/>
        <files mask="MLIB_Div_F16.h"/>
        <files mask="MLIB_Div_F32.h"/>
        <files mask="MLIB_Div_FLT.h"/>
        <files mask="MLIB_Log2_U16.h"/>
        <files mask="MLIB_Mac4Rnd_F16_Asmi.h"/>
        <files mask="MLIB_Mac4Rnd_F32.h"/>
        <files mask="MLIB_Mac4Rnd_F32_Asmi.h"/>
        <files mask="MLIB_Mac4_F32.h"/>
        <files mask="MLIB_Mac4_F32_Asmi.h"/>
        <files mask="MLIB_Mac4_FLT.h"/>
        <files mask="MLIB_MacRnd_A32.h"/>
        <files mask="MLIB_MacRnd_F16_Asmi.h"/>
        <files mask="MLIB_MacRnd_F32.h"/>
        <files mask="MLIB_MacRnd_F32_Asmi.h"/>
        <files mask="MLIB_Mac_A32.h"/>
        <files mask="MLIB_Mac_F16_Asmi.h"/>
        <files mask="MLIB_Mac_F32.h"/>
        <files mask="MLIB_Mac_F32_Asmi.h"/>
        <files mask="MLIB_Mac_FLT.h"/>
        <files mask="MLIB_MnacRnd_A32.h"/>
        <files mask="MLIB_MnacRnd_F16_Asmi.h"/>
        <files mask="MLIB_MnacRnd_F32.h"/>
        <files mask="MLIB_MnacRnd_F32_Asmi.h"/>
        <files mask="MLIB_Mnac_A32.h"/>
        <files mask="MLIB_Mnac_F16_Asmi.h"/>
        <files mask="MLIB_Mnac_F32.h"/>
        <files mask="MLIB_Mnac_F32_Asmi.h"/>
        <files mask="MLIB_Mnac_FLT.h"/>
        <files mask="MLIB_Msu4Rnd_F16.h"/>
        <files mask="MLIB_Msu4Rnd_F16_Asmi.h"/>
        <files mask="MLIB_Msu4Rnd_F32.h"/>
        <files mask="MLIB_Msu4Rnd_F32_Asmi.h"/>
        <files mask="MLIB_Msu4_F32.h"/>
        <files mask="MLIB_Msu4_F32_Asmi.h"/>
        <files mask="MLIB_Msu4_FLT.h"/>
        <files mask="MLIB_MsuRnd_A32.h"/>
        <files mask="MLIB_MsuRnd_F16_Asmi.h"/>
        <files mask="MLIB_MsuRnd_F32.h"/>
        <files mask="MLIB_MsuRnd_F32_Asmi.h"/>
        <files mask="MLIB_Msu_A32.h"/>
        <files mask="MLIB_Msu_F16_Asmi.h"/>
        <files mask="MLIB_Msu_F32_Asmi.h"/>
        <files mask="MLIB_Msu_FLT.h"/>
        <files mask="MLIB_MulRnd_A32.h"/>
        <files mask="MLIB_MulRnd_A32_Asmi.h"/>
        <files mask="MLIB_MulRnd_F16.h"/>
        <files mask="MLIB_MulRnd_F16_Asmi.h"/>
        <files mask="MLIB_MulRnd_F32.h"/>
        <files mask="MLIB_MulRnd_F32_Asmi.h"/>
        <files mask="MLIB_Mul_A32.h"/>
        <files mask="MLIB_Mul_A32_Asmi.h"/>
        <files mask="MLIB_Mul_F16.h"/>
        <files mask="MLIB_Mul_F16_Asmi.h"/>
        <files mask="MLIB_Mul_F32.h"/>
        <files mask="MLIB_Mul_F32_Asmi.h"/>
        <files mask="MLIB_Mul_FLT.h"/>
        <files mask="MLIB_Neg_F16.h"/>
        <files mask="MLIB_Neg_F16_Asmi.h"/>
        <files mask="MLIB_Neg_F32.h"/>
        <files mask="MLIB_Neg_F32_Asmi.h"/>
        <files mask="MLIB_Neg_FLT.h"/>
        <files mask="MLIB_Rcp1Q_A32.h"/>
        <files mask="MLIB_Rcp_A32.h"/>
        <files mask="MLIB_Rnd_F32.h"/>
        <files mask="MLIB_Rnd_F32_Asmi.h"/>
        <files mask="MLIB_Sat_A32_Asmi.h"/>
        <files mask="MLIB_Shift_F16.h"/>
        <files mask="MLIB_Shift_F16_Asmi.h"/>
        <files mask="MLIB_Shift_F32.h"/>
        <files mask="MLIB_Shift_F32_Asmi.h"/>
        <files mask="MLIB_Sign_F16_Asmi.h"/>
        <files mask="MLIB_Sign_F32_Asmi.h"/>
        <files mask="MLIB_Sign_FLT_Asmi.h"/>
        <files mask="MLIB_Sub4_F16_Asmi.h"/>
        <files mask="MLIB_Sub4_F32_Asmi.h"/>
        <files mask="MLIB_Sub4_FLT.h"/>
        <files mask="MLIB_Sub_A32.h"/>
        <files mask="MLIB_Sub_F16.h"/>
        <files mask="MLIB_Sub_F16_Asmi.h"/>
        <files mask="MLIB_Sub_F32.h"/>
        <files mask="MLIB_Sub_F32_Asmi.h"/>
        <files mask="MLIB_Sub_F64.h"/>
        <files mask="MLIB_Sub_FLT.h"/>
        <files mask="RTCESL_cfg.h"/>
        <files mask="asm_mac.h"/>
        <files mask="mlib.h"/>
        <files mask="mlib_fp.h"/>
        <files mask="mlib_types.h"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/rtcesl/CM4F_RTCESL_4.5_MCUX/MLIB" target_path="libs" type="lib">
        <files mask="libMLIB.a"/>
      </source>
      <source path="middleware/rtcesl/CM4F_RTCESL_4.5_doc" target_path="rtcesl/doc" type="doc">
        <files mask="CM4FAMCLIBUG.pdf" hidden="true"/>
        <files mask="CM4FGDFLIBUG.pdf" hidden="true"/>
        <files mask="CM4FGFLIBUG.pdf" hidden="true"/>
        <files mask="CM4FGMCLIBUG.pdf" hidden="true"/>
        <files mask="CM4FMLIBUG.pdf" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MKE18F16" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="utilities"/>
    <component id="platform.utilities.assert.MKE18F16" name="assert" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MKE18F16" name="debug_console" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKE18F16"/>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MKE18F16/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MKE18F16/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MKE18F16/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MKE18F16" name="notifier" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE18F16"/>
      </dependencies>
      <source path="devices/MKE18F16/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MKE18F16/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MKE18F16" name="shell" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MKE18F16"/>
          <component_dependency value="component.lists.MKE18F16"/>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE18F16/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MKE18F16/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
    <component id="project_template.hvpke18f.MKE18F16" name="hvpke18f" version="1.0.0" devices="MKE18F512xxx16" device_cores="core0_MKE18F512xxx16" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE18F16"/>
          <component_dependency value="component.lpuart_adapter.MKE18F16"/>
          <component_dependency value="platform.drivers.port.MKE18F16"/>
          <component_dependency value="platform.drivers.common.MKE18F16"/>
          <component_dependency value="utility.debug_console.MKE18F16"/>
          <component_dependency value="component.serial_manager.MKE18F16"/>
          <component_dependency value="platform.drivers.gpio.MKE18F16"/>
          <component_dependency value="platform.drivers.smc.MKE18F16"/>
          <component_dependency value="device.MKE18F16_startup.MKE18F16"/>
          <component_dependency value="platform.drivers.trgmux.MKE18F16"/>
        </all>
      </dependencies>
      <source path="boards/hvpke18f/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/hvpke18f/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.hvpke18f.MKE18F16" name="hvpke18f" version="1.0.0" devices="MKE18F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="boards/hvpke18f/component_examples/config" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MKE16F16" name="CMSIS" version="5.5.1" devices="MKE16F512xxx16" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKE16F16"/>
          <component_dependency value="platform.Include_dsp.MKE16F16"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.MKE16F16" name="CMSIS_DSP_Lib" version="1.6.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS">
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="configuration">
        <files mask="arm_class_marks_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="project">
        <files mask="arm_class_marks_example.uvoptx"/>
        <files mask="arm_class_marks_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_class_marks_example" target_path="DSP/Examples/ARM/arm_class_marks_example" type="src">
        <files mask="arm_class_marks_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="configuration">
        <files mask="arm_convolution_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="project">
        <files mask="arm_convolution_example.uvoptx"/>
        <files mask="arm_convolution_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="src">
        <files mask="arm_convolution_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_convolution_example" target_path="DSP/Examples/ARM/arm_convolution_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="configuration">
        <files mask="arm_dotproduct_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="project">
        <files mask="arm_dotproduct_example.uvoptx"/>
        <files mask="arm_dotproduct_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_dotproduct_example" target_path="DSP/Examples/ARM/arm_dotproduct_example" type="src">
        <files mask="arm_dotproduct_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="src">
        <files mask="arm_fft_bin_data.c"/>
        <files mask="arm_fft_bin_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="configuration">
        <files mask="arm_fft_bin_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fft_bin_example" target_path="DSP/Examples/ARM/arm_fft_bin_example" type="project">
        <files mask="arm_fft_bin_example.uvoptx"/>
        <files mask="arm_fft_bin_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="src">
        <files mask="arm_fir_data.c"/>
        <files mask="arm_fir_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="configuration">
        <files mask="arm_fir_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="project">
        <files mask="arm_fir_example.uvoptx"/>
        <files mask="arm_fir_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_fir_example" target_path="DSP/Examples/ARM/arm_fir_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="src">
        <files mask="arm_graphic_equalizer_data.c"/>
        <files mask="arm_graphic_equalizer_example_q31.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="configuration">
        <files mask="arm_graphic_equalizer_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="project">
        <files mask="arm_graphic_equalizer_example.uvoptx"/>
        <files mask="arm_graphic_equalizer_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_graphic_equalizer_example" target_path="DSP/Examples/ARM/arm_graphic_equalizer_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="src">
        <files mask="arm_linear_interp_data.c"/>
        <files mask="arm_linear_interp_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="configuration">
        <files mask="arm_linear_interp_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="project">
        <files mask="arm_linear_interp_example.uvoptx"/>
        <files mask="arm_linear_interp_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_linear_interp_example" target_path="DSP/Examples/ARM/arm_linear_interp_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="configuration">
        <files mask="arm_matrix_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="project">
        <files mask="arm_matrix_example.uvoptx"/>
        <files mask="arm_matrix_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="src">
        <files mask="arm_matrix_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_matrix_example" target_path="DSP/Examples/ARM/arm_matrix_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="src">
        <files mask="arm_signal_converge_data.c"/>
        <files mask="arm_signal_converge_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="configuration">
        <files mask="arm_signal_converge_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="project">
        <files mask="arm_signal_converge_example.uvoptx"/>
        <files mask="arm_signal_converge_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_signal_converge_example" target_path="DSP/Examples/ARM/arm_signal_converge_example" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="configuration">
        <files mask="arm_sin_cos_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="project">
        <files mask="arm_sin_cos_example.uvoptx"/>
        <files mask="arm_sin_cos_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_sin_cos_example" target_path="DSP/Examples/ARM/arm_sin_cos_example" type="src">
        <files mask="arm_sin_cos_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" target_path="DSP/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="configuration">
        <files mask="arm_variance_example.ini"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="project">
        <files mask="arm_variance_example.uvoptx"/>
        <files mask="arm_variance_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Examples/ARM/arm_variance_example" target_path="DSP/Examples/ARM/arm_variance_example" type="src">
        <files mask="arm_variance_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARM" target_path="DSP/Projects/ARM" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARM" target_path="DSP/Projects/ARM" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARMCLANG" target_path="DSP/Projects/ARMCLANG" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Projects/ARMCLANG" target_path="DSP/Projects/ARMCLANG" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Projects/GCC" target_path="DSP/Projects/GCC" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP/Projects/GCC" target_path="DSP/Projects/GCC" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Projects/IAR" target_path="DSP/Projects/IAR" type="project">
        <files mask="arm_cortexM_math.ewp"/>
      </source>
      <source path="CMSIS/DSP/Projects/IAR" target_path="DSP/Projects/IAR" type="other">
        <files mask="arm_cortexM_math.eww"/>
      </source>
      <source path="CMSIS/DSP/Projects/IAR" target_path="DSP/Projects/IAR" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP/Source/BasicMathFunctions" target_path="DSP/Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_mult_q7.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_sub_q7.c"/>
      </source>
      <source path="CMSIS/DSP/Source/CommonTables" target_path="DSP/Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
        <files mask="arm_common_tables.c"/>
        <files mask="arm_const_structs.c"/>
      </source>
      <source path="CMSIS/DSP/Source/ComplexMathFunctions" target_path="DSP/Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/ControllerFunctions" target_path="DSP/Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_sin_cos_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/FastMathFunctions" target_path="DSP/Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_cos_q31.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/FilteringFunctions" target_path="DSP/Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_lms_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/MatrixFunctions" target_path="DSP/Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_add_q31.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_trans_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/StatisticsFunctions" target_path="DSP/Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_power_q31.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_var_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/SupportFunctions" target_path="DSP/Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_q7_to_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/TransformFunctions" target_path="DSP/Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_bitreversal2.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_rfft_init_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_rfft_q31.c"/>
      </source>
      <source path="CMSIS/DSP/Source/TransformFunctions" target_path="DSP/Source/TransformFunctions" type="asm_include">
        <files mask="arm_bitreversal2.S"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.arm_cortexM4bf_math.MKE16F16" name="arm_cortexM4bf_math" version="1.6.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_driver">
      <source toolchain="mcuxpresso" path="CMSIS/DSP/Lib/GCC" target_path="libs" type="lib">
        <files mask="libarm_cortexM7l_math.a"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.arm_cortexM4lf_math.MKE16F16" name="arm_cortexM4lf_math" version="1.6.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_driver">
      <source toolchain="mcuxpresso" path="CMSIS/DSP/Lib/GCC" target_path="libs" type="lib">
        <files mask="libarm_cortexM4lf_math.a"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKE16F16" name="CAN" version="1.2.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16" name="Common" version="2.7.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE16F16" name="Ethernet" version="2.1.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKE16F16" name="Ethernet_MAC" version="2.1.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKE16F16" name="Ethernet_PHY" version="2.1.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKE16F16" name="Flash" version="2.2.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE16F16" name="I2C" version="2.3.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKE16F16" name="MCI" version="2.3.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKE16F16" name="NAND" version="2.3.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKE16F16" name="SAI" version="1.1.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE16F16" name="SPI" version="2.2.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE16F16" name="USART" version="2.3.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE16F16" name="USB" version="2.2.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKE16F16" name="USB_Device" version="2.2.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKE16F16" name="USB_Host" version="2.2.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKE16F16" name="WiFi" version="1.0.0" devices="MKE16F512xxx16" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE16F16"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MKE16F16" name="CMSIS_Include_common" version="5.2.1" devices="MKE16F512xxx16" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MKE16F16" name="CMSIS_Include_core_cm4" version="5.2.1" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKE16F16"/>
          <component_dependency value="platform.Include_dsp.MKE16F16"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MKE16F16" name="CMSIS_Include_dsp" version="1.6.0" devices="MKE16F512xxx16" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="project_template.MKE16F16.MKE16F16" name="MKE16F16" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE16F16"/>
          <component_dependency value="component.lpuart_adapter.MKE16F16"/>
          <component_dependency value="platform.drivers.port.MKE16F16"/>
          <component_dependency value="platform.drivers.gpio.MKE16F16"/>
          <component_dependency value="platform.drivers.smc.MKE16F16"/>
          <component_dependency value="device.MKE16F16_startup.MKE16F16"/>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="utility.debug_console.MKE16F16"/>
          <component_dependency value="component.serial_manager.MKE16F16"/>
          <component_dependency value="platform.drivers.clock.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MKE16F16/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MKE16F16" name="RTE_Device" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <component_dependency value="platform.drivers.edma.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MKE16F16" name="cmake_toolchain" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MKE16F16" name="button" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.timer_manager.MKE16F16"/>
          <component_dependency value="component.gpio_adapter.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.common_task.MKE16F16" name="common_task" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.osa.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.crc_adapter.MKE16F16" name="crc_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.crc.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="crc_adapter.c"/>
      </source>
    </component>
    <component id="component.ecspi_adapter.MKE16F16" name="ecspi_adapter" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="ecspi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.flash_adapter.MKE16F16" name="flash_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.flash.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/internal_flash" target_path="component/internal_flash" type="c_include">
        <files mask="flash.h"/>
      </source>
      <source path="components/internal_flash" target_path="component/internal_flash" type="src">
        <files mask="flash_adapter.c"/>
      </source>
    </component>
    <component id="component.ftm_adapter.MKE16F16" name="ftm_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.ftm.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="ftm_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.gpio_adapter.MKE16F16" name="gpio_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MKE16F16"/>
          <component_dependency value="platform.drivers.port.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_adapter.c"/>
      </source>
    </component>
    <component id="component.led.MKE16F16" name="led" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.timer_manager.MKE16F16"/>
          <component_dependency value="component.gpio_adapter.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MKE16F16" name="lists" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lpit_adapter.MKE16F16" name="lpit_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.lpit.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lpit_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpspi_adapter.MKE16F16" name="lpspi_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.lpspi.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="lpspi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.lptmr_adapter.MKE16F16" name="lptmr_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.lptmr.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lptmr_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MKE16F16" name="lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.lpuart.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.mem_manager.MKE16F16" name="mem_manager" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.minispi_adapter.MKE16F16" name="minispi_adapter" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="minispi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.osa.MKE16F16" name="osa" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MKE16F16" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MKE16F16" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.amazon_freertos-kernel.MKE16F16" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source condition="middleware.amazon_freertos-kernel.MKE16F16" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MKE16F16" name="osa_bm" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.osa_free_rtos.MKE16F16" name="osa_free_rtos" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
    </component>
    <component id="component.panic.MKE16F16" name="panic" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="utility.debug_console.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pwm_ftm_adapter.MKE16F16" name="pwm_ftm_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.ftm.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_ftm_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MKE16F16" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MKE16F16"/>
            <component_dependency value="component.serial_manager_swo.MKE16F16"/>
            <component_dependency value="component.serial_manager_usb_cdc_virtual.MKE16F16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_swo.MKE16F16" name="serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.serial_manager.MKE16F16"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_swo.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_swo.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MKE16F16" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.lpuart.MKE16F16"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_virtual.MKE16F16" name="serial_manager_usb_cdc_virtual" version="1.0.0" full_name="Serial Manager USB CDC Virtual" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="false" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_USBCDC_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb_virtual.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb_virtual.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.MKE16F16" name="software_crc_adapter" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MKE16F16" name="timer_manager" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
          <any_of>
            <component_dependency value="component.ftm_adapter.MKE16F16"/>
            <component_dependency value="component.lptmr_adapter.MKE16F16"/>
            <component_dependency value="component.lpit_adapter.MKE16F16"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.vspi_adapter.MKE16F16" name="vspi_adapter" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="vspi_adapter.c"/>
      </source>
    </component>
    <component id="device.MKE16F16_CMSIS.MKE16F16" name="MKE16F16_CMSIS" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16" target_path="device" type="c_include">
        <files mask="MKE16F16.h"/>
        <files mask="MKE16F16_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MKE16F16_debugger.MKE16F16" name="MKE16F16_debugger" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="debugger">
      <source path="devices/MKE16F16" target_path="MKE16F16" type="xml">
        <files mask="MKE16F16.xml"/>
      </source>
    </component>
    <component id="platform.devices.MKE16F16_linker.MKE16F16" name="MKE16F16_linker" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="linker"/>
    <component id="device.MKE16F16_startup.MKE16F16" name="MKE16F16_startup" version="1.0.0" devices="MKE16F512xxx16" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="mcuxpresso" path="devices/MKE16F16/mcuxpresso" target_path="startup" type="src_c">
        <files mask="startup_mke16f16.c"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MKE16F16/mcuxpresso" target_path="startup" type="src_cpp">
        <files mask="startup_mke16f16.cpp"/>
      </source>
      <source path="devices/MKE16F16" target_path="device" type="src">
        <files mask="system_MKE16F16.c"/>
      </source>
      <source path="devices/MKE16F16" target_path="device" type="c_include">
        <files mask="system_MKE16F16.h"/>
      </source>
    </component>
    <component id="docs.images.MKE16F16" name="images" version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="documentation">
      <source path="docs/images" target_path="images" type="image">
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="platform.drivers.acmp.MKE16F16" name="acmp" brief="ACMP Driver" version="2.0.5" full_name="ACMP Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.adc12.MKE16F16" name="adc" brief="ADC12 Driver" version="2.0.4" full_name="ADC12 Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc12.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc12.h"/>
      </source>
    </component>
    <component id="platform.drivers.cache_lmem.MKE16F16" name="cache" brief="CACHE Driver" version="2.0.3" full_name="CACHE Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MKE16F16" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_cmsis.MKE16F16" name="lpi2c_cmsis" brief="LPI2C CMSIS Driver" version="2.0.0" full_name="LPI2C CMSIS EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c_edma.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE16F16"/>
          <component_dependency value="RTE_Device.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_cmsis.c"/>
      </source>
      <source path="devices/MKE16F16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_cmsis.MKE16F16" name="lpspi_cmsis" brief="LPSPI CMSIS Driver" version="2.0.0" full_name="LPSPI CMSIS EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi_edma.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE16F16"/>
          <component_dependency value="RTE_Device.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_cmsis.c"/>
      </source>
      <source path="devices/MKE16F16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_edma.MKE16F16" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" full_name="LPUART CMSIS EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_edma.MKE16F16"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE16F16"/>
          <component_dependency value="RTE_Device.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MKE16F16/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MKE16F16" name="common" brief="COMMON Driver" version="2.2.2" full_name="COMMON Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MKE16F16"/>
          <component_dependency value="device.MKE16F16_CMSIS.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.crc.MKE16F16" name="crc" brief="CRC Driver" version="2.0.2" full_name="CRC Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac32.MKE16F16" name="dac" brief="DAC32 Driver" version="2.0.1" full_name="DAC32 Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac32.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac32.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MKE16F16" name="dmamux" brief="DMAMUX Driver" version="2.0.4" full_name="DMAMUX Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.edma.MKE16F16" name="edma" brief="EDMA Driver" version="2.3.0" full_name="EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
          <component_dependency value="platform.drivers.dmamux.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ewm.MKE16F16" name="ewm" brief="EWM Driver" version="2.0.2" full_name="EWM Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MKE16F16" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan.MKE16F16" name="flexcan" brief="FLEXCAN Driver" version="2.5.0" full_name="FLEXCAN Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan_edma.MKE16F16" name="flexcan_edma" brief="FLEXCAN Driver" version="2.5.0" full_name="FLEXCAN EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE16F16"/>
          <component_dependency value="platform.drivers.flexcan.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MKE16F16" name="flexio" brief="FLEXIO Driver" version="2.0.2" full_name="FLEXIO Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MKE16F16" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.2.0" full_name="FLEXIO I2C Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi.MKE16F16" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.1.3" full_name="FLEXIO SPI Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MKE16F16" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.1.3" full_name="FLEXIO SPI EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE16F16"/>
          <component_dependency value="platform.drivers.flexio_spi.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MKE16F16" name="flexio_uart" brief="FLEXIO UART Driver" version="2.1.6" full_name="FLEXIO UART Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MKE16F16" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.1.6" full_name="FLEXIO UART EDMA Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.MKE16F16"/>
          <component_dependency value="platform.drivers.edma.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.ftm.MKE16F16" name="ftm" brief="FTM Driver" version="2.2.1" full_name="FTM Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MKE16F16" name="gpio" brief="GPIO Driver" version="2.4.1" full_name="GPIO Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.lmem.MKE16F16" name="lmem" brief="LMEM Driver" version="2.1.1" full_name="LMEM Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lmem_cache.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lmem_cache.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c.MKE16F16" name="i2c" brief="LPI2C Driver" version="2.1.10" full_name="LPI2C Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_edma.MKE16F16" name="i2c_edma" brief="LPI2C Driver" version="2.1.10" full_name="LPI2C Edma Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE16F16"/>
          <component_dependency value="platform.drivers.lpi2c.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MKE16F16" name="i2c_freertos" brief="LPI2C Driver" version="2.1.10" full_name="LPI2C Freerto Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MKE16F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpit.MKE16F16" name="lpit" brief="LPIT Driver" version="2.0.1" full_name="LPIT Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi.MKE16F16" name="lpspi" brief="LPSPI Driver" version="2.0.4" full_name="LPSPI Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_edma.MKE16F16" name="lpspi_edma" brief="LPSPI Driver" version="2.0.4" full_name="LPSPI Edma Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE16F16"/>
          <component_dependency value="platform.drivers.lpspi.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_freertos.MKE16F16" name="lpspi_freertos" brief="LPSPI Driver" version="2.0.4" full_name="LPSPI Freertos Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MKE16F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MKE16F16" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MKE16F16" name="lpuart" brief="LPUART Driver" version="2.2.8" full_name="LPUART Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_edma.MKE16F16" name="lpuart_edma" brief="LPUART Driver" version="2.2.8" full_name="LPUART Edma Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE16F16"/>
          <component_dependency value="platform.drivers.lpuart.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_freertos.MKE16F16" name="lpuart_freertos" brief="LPUART Driver" version="2.2.8" full_name="LPUART Freertos Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE16F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdb.MKE16F16" name="pdb" brief="PDB Driver" version="2.0.3" full_name="PDB Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MKE16F16" name="pmc" brief="PMC Driver" version="2.0.2" full_name="PMC Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MKE16F16" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.pwt.MKE16F16" name="pwt" brief="PWT Driver" version="2.0.1" full_name="PWT Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_pwt.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pwt.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MKE16F16" name="rcm" brief="RCM Driver" version="2.0.3" full_name="RCM Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MKE16F16" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MKE16F16" name="sim" brief="SIM Driver" version="2.1.1" full_name="SIM Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MKE16F16" name="smc" brief="SMC Driver" version="2.0.6" full_name="SMC Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sysmpu.MKE16F16" name="sysmpu" brief="SYSMPU Driver" version="2.2.2" full_name="SYSMPU Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_sysmpu.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sysmpu.h"/>
      </source>
    </component>
    <component id="platform.drivers.trgmux.MKE16F16" name="trgmux" brief="TRGMUX Driver" version="2.0.1" full_name="TRGMUX Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog32.MKE16F16" name="wdog" brief="WDOG32 Driver" version="2.0.2" full_name="WDOG32 Driver" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source path="devices/MKE16F16/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.MKE16F16" name="Amazon FreeRTOS kernel" brief="Amazon FreeRTOS kernel" version="201908.00.0" full_name="Amazon FreeRTOS kernel" devices="MKE16F512xxx16" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.amazon_freertos-kernel.extension.MKE16F16"/>
          <component_dependency value="middleware.amazon_freertos-kernel.template.MKE16F16"/>
        </all>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel" target_path="amazon-freertos/freertos_kernel" type="src">
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/include" target_path="amazon-freertos/freertos_kernel/include" type="c_include">
        <files mask="FreeRTOS.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="mcuxpresso" compiler="compiler_gcc" path="rtos/amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" target_path="amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" type="src" device_cores="core0_MKE16F512xxx16">
        <files mask="port.c"/>
      </source>
      <source toolchain="mcuxpresso" compiler="compiler_gcc" path="rtos/amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" target_path="amazon-freertos/freertos_kernel/portable/GCC/ARM_CM4F" type="c_include" device_cores="core0_MKE16F512xxx16">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable" target_path="amazon-freertos/freertos_kernel/portable" type="doc">
        <files mask="readme.txt"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.armv8m.MKE16F16" name="Amazon FreeRTOS port ARMv8M" brief="Amazon FreeRTOS port ARMv8M" version="201908.00.0" full_name="Amazon FreeRTOS port ARMv8M" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/ARMv8M/secure/macros" target_path="amazon-freertos/freertos_kernel/portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.cm33_nonsecure_port_no_trustzone.MKE16F16" name="cm33_nonsecure_port_no_trustzone" brief="Amazon FreeRTOS cm33 nonsecure port" version="201908.00.0" full_name="Amazon FreeRTOS cm33 nonsecure port" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
    </component>
    <component id="middleware.amazon_freertos-kernel.doc.MKE16F16" name="Amazon FreeRTOS doc" brief="Amazon FreeRTOS doc" version="201908.00.0" full_name="Amazon FreeRTOS doc" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/doc" target_path="amazon-freertos/doc" type="doc">
        <files mask="AFQ Developer Guide - Board Qualification Errata.pdf"/>
        <files mask="Amazon FreeRTOS Qualification Developer Guide.pdf"/>
      </source>
      <source path="rtos/amazon-freertos/doc" target_path="amazon-freertos/doc" type="other">
        <files mask="README.md"/>
        <files mask="guidance.md"/>
      </source>
      <source path="rtos/amazon-freertos/doc/config" target_path="amazon-freertos/doc/config" type="other">
        <files mask="atomic"/>
        <files mask="ble"/>
        <files mask="common"/>
        <files mask="defender"/>
        <files mask="https"/>
        <files mask="linear_containers"/>
        <files mask="logging"/>
        <files mask="main"/>
        <files mask="mqtt"/>
        <files mask="platform"/>
        <files mask="secure_sockets"/>
        <files mask="shadow"/>
        <files mask="static_memory"/>
        <files mask="taskpool"/>
        <files mask="wifi"/>
      </source>
      <source path="rtos/amazon-freertos/doc/config/html" target_path="amazon-freertos/doc/config/html" type="doc">
        <files mask="footer.html"/>
        <files mask="header.html"/>
        <files mask="style.css"/>
      </source>
      <source path="rtos/amazon-freertos/doc/config" target_path="amazon-freertos/doc/config" type="xml">
        <files mask="layout_library.xml"/>
        <files mask="layout_main.xml"/>
      </source>
      <source path="rtos/amazon-freertos/doc/extra_files/https" target_path="amazon-freertos/doc/extra_files/https" type="doc">
        <files mask="gettysburg.txt"/>
      </source>
      <source path="rtos/amazon-freertos/doc/freertos_port_qual" target_path="amazon-freertos/doc/freertos_port_qual" type="doc">
        <files mask="aFreeRTOS_Porting_Guide.pdf"/>
        <files mask="aFreeRTOS_Qualification_Guide.pdf"/>
      </source>
      <source path="rtos/amazon-freertos/doc/guide" target_path="amazon-freertos/doc/guide" type="doc">
        <files mask="building.txt"/>
        <files mask="developer.txt"/>
        <files mask="style.txt"/>
      </source>
      <source path="rtos/amazon-freertos/doc/lib" target_path="amazon-freertos/doc/lib" type="doc">
        <files mask="atomic.txt"/>
        <files mask="ble.txt"/>
        <files mask="https.txt"/>
        <files mask="linear_containers.txt"/>
        <files mask="logging.txt"/>
        <files mask="mqtt.txt"/>
        <files mask="platform.txt"/>
        <files mask="secure_sockets.txt"/>
        <files mask="shadow.txt"/>
        <files mask="static_memory.txt"/>
        <files mask="taskpool.txt"/>
        <files mask="wifi.txt"/>
      </source>
      <source path="rtos/amazon-freertos/doc/plantuml" target_path="amazon-freertos/doc/plantuml" type="other">
        <files mask="RecyclableJobStatus.pu"/>
        <files mask="StaticJobStatus.pu"/>
        <files mask="https_client_async_callback_order.pu"/>
        <files mask="mqtt_demo.pu"/>
        <files mask="mqtt_design_typicaloperation.pu"/>
        <files mask="taskpool_design_typicaloperation.pu"/>
      </source>
      <source path="rtos/amazon-freertos/doc/plantuml" target_path="amazon-freertos/doc/plantuml" type="xml">
        <files mask="https_client_async_workflow.xml"/>
        <files mask="https_client_sync_workflow.xml"/>
      </source>
      <source path="rtos/amazon-freertos/doc/plantuml/images" target_path="amazon-freertos/doc/plantuml/images" type="image">
        <files mask="BLE-architecture.png"/>
        <files mask="RecyclableJobStatus.png"/>
        <files mask="StaticJobStatus.png"/>
        <files mask="blediagram.png"/>
        <files mask="https_client_async_callback_order.png"/>
        <files mask="https_client_async_workflow.png"/>
        <files mask="https_client_sync_workflow.png"/>
        <files mask="mqtt_demo.png"/>
        <files mask="mqtt_design_typicaloperation.png"/>
        <files mask="taskpool_design_typicaloperation.png"/>
      </source>
      <source path="rtos/amazon-freertos/doc/tag" target_path="amazon-freertos/doc/tag" type="other">
        <files mask="README.md"/>
      </source>
      <source path="rtos/amazon-freertos/doc/user_guide" target_path="amazon-freertos/doc/user_guide" type="doc">
        <files mask="global_config.txt"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.extension.MKE16F16" name="Amazon FreeRTOS NXP extension" brief="Amazon FreeRTOS NXP extension" version="201908.00.0" full_name="Amazon FreeRTOS NXP extension" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel extensions" user_visible="false" type="other">
      <source path="rtos/amazon-freertos/freertos_kernel/include" target_path="amazon-freertos/freertos_kernel/include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_1.MKE16F16" name="Amazon FreeRTOS heap 1" brief="Amazon FreeRTOS heap 1" version="201908.00.0" full_name="Amazon FreeRTOS heap 1" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_2.MKE16F16" name="Amazon FreeRTOS heap 2" brief="Amazon FreeRTOS heap 2" version="201908.00.0" full_name="Amazon FreeRTOS heap 2" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_3.MKE16F16" name="Amazon FreeRTOS heap 3" brief="Amazon FreeRTOS heap 3" version="201908.00.0" full_name="Amazon FreeRTOS heap_3" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_4.MKE16F16" name="Amazon FreeRTOS heap 4" brief="Amazon FreeRTOS heap 4" version="201908.00.0" full_name="Amazon FreeRTOS heap 4" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_5.MKE16F16" name="Amazon FreeRTOS heap 5" brief="Amazon FreeRTOS heap 5" version="201908.00.0" full_name="Amazon FreeRTOS heap 5" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.heap_newlib.MKE16F16" name="FreeRTOS heap newlib" brief="Amazon FreeRTOS heap newlib" version="201908.00.0" full_name="Amazon FreeRTOS heap newlib" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel extensions" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.mpu_wrappers.MKE16F16" name="Amazon FreeRTOS MPU wrappers" brief="Amazon FreeRTOS MPU wrappers" version="201908.00.0" full_name="Amazon FreeRTOS MPU wrappers" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/Common" target_path="amazon-freertos/freertos_kernel/portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.root_doc.MKE16F16" name="Root Amazon FreeRTOS documents." brief="Amazon FreeRTOS root documents" version="201908.00.0" full_name="Amazon FreeRTOS root documents" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.amazon_freertos-kernel.MKE16F16"/>
      </dependencies>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="other">
        <files mask="CHANGELOG.md"/>
        <files mask="CODE_OF_CONDUCT.md"/>
        <files mask="CONTRIBUTING.md"/>
        <files mask="checksums.json"/>
      </source>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="doc">
        <files mask="CMakeLists.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
        <files mask="directories.txt"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.template.MKE16F16" name="Amazon FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="201908.00.0" full_name="Amazon FreeRTOS configuration template" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="project_template">
      <source exclude="true" path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source path="rtos/amazon-freertos/freertos_kernel/portable/MemMang" target_path="amazon-freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source path="rtos/amazon-freertos/template/ARM_CM4F" target_path="source" type="c_include" device_cores="core0_MKE16F512xxx16">
        <files mask="FreeRTOSConfig.h"/>
      </source>
    </component>
    <component id="middleware.amazon_freertos-kernel.unused.MKE16F16" name="Amazon FreeRTOS unused" brief="Amazon FreeRTOS unused" version="201908.00.0" full_name="Amazon FreeRTOS unused" devices="MKE16F512xxx16" category="Operating System/Amazon FreeRTOS kernel" user_visible="false" type="other">
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="other">
        <files mask="LICENSE"/>
        <files mask="README.md"/>
      </source>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos" type="script">
        <files mask="PreLoad.cmake"/>
      </source>
    </component>
    <component id="middleware.baremetal.MKE16F16" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MKE16F512xxx16" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.fatfs.MKE16F16" name="fatfs" brief="FatFs" version="0.13.3" full_name="FAT File System stack" devices="MKE16F512xxx16" category="File System/FAT File System" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.fatfs.template.MKE16F16"/>
          <component_dependency value="middleware.fatfs.ram.MKE16F16"/>
        </all>
      </dependencies>
      <source path="middleware/fatfs/source" target_path="fatfs/source" type="src">
        <files mask="diskio.c"/>
        <files mask="ff.c"/>
        <files mask="ffsystem.c"/>
        <files mask="ffunicode.c"/>
      </source>
      <source path="middleware/fatfs/source" target_path="fatfs/source" type="c_include">
        <files mask="diskio.h"/>
        <files mask="ff.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.ram.MKE16F16" name="ram" brief="FatFs_RAM" version="0.13.3" full_name="Fatfs RAM layer" devices="MKE16F512xxx16" category="File System/FAT File System" user_visible="true" type="middleware">
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/source/fsl_ram_disk" type="src">
        <files mask="fsl_ram_disk.c"/>
      </source>
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/source/fsl_ram_disk" type="c_include">
        <files mask="fsl_ram_disk.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.template.MKE16F16" name="fatfs" brief="FatFs template" version="0.13.3" full_name="FatFs template configuration" devices="MKE16F512xxx16" category="File System/FAT File System" user_visible="true" type="project_template">
      <source path="middleware/fatfs/template" target_path="source" type="c_include">
        <files mask="ffconf.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.unused_files.MKE16F16" name="unused_files" brief="fatfs files unused by projects" version="0.13.3" devices="MKE16F512xxx16" user_visible="false" type="other">
      <source exclude="true" path="middleware/fatfs" target_path="fatfs" type="doc">
        <files mask="ChangeLogKSDK.txt" hidden="true"/>
        <files mask="LICENSE.txt" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents" target_path="fatfs/documents" type="doc">
        <files mask="00index_e.html" hidden="true"/>
        <files mask="css_e.css" hidden="true"/>
        <files mask="updates.txt" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/doc" target_path="fatfs/documents/doc" type="doc">
        <files mask="appnote.html" hidden="true"/>
        <files mask="chdir.html" hidden="true"/>
        <files mask="chdrive.html" hidden="true"/>
        <files mask="chmod.html" hidden="true"/>
        <files mask="close.html" hidden="true"/>
        <files mask="closedir.html" hidden="true"/>
        <files mask="config.html" hidden="true"/>
        <files mask="dinit.html" hidden="true"/>
        <files mask="dioctl.html" hidden="true"/>
        <files mask="dread.html" hidden="true"/>
        <files mask="dstat.html" hidden="true"/>
        <files mask="dwrite.html" hidden="true"/>
        <files mask="eof.html" hidden="true"/>
        <files mask="error.html" hidden="true"/>
        <files mask="expand.html" hidden="true"/>
        <files mask="fattime.html" hidden="true"/>
        <files mask="fdisk.html" hidden="true"/>
        <files mask="filename.html" hidden="true"/>
        <files mask="findfirst.html" hidden="true"/>
        <files mask="findnext.html" hidden="true"/>
        <files mask="forward.html" hidden="true"/>
        <files mask="getcwd.html" hidden="true"/>
        <files mask="getfree.html" hidden="true"/>
        <files mask="getlabel.html" hidden="true"/>
        <files mask="gets.html" hidden="true"/>
        <files mask="lseek.html" hidden="true"/>
        <files mask="mkdir.html" hidden="true"/>
        <files mask="mkfs.html" hidden="true"/>
        <files mask="mount.html" hidden="true"/>
        <files mask="open.html" hidden="true"/>
        <files mask="opendir.html" hidden="true"/>
        <files mask="printf.html" hidden="true"/>
        <files mask="putc.html" hidden="true"/>
        <files mask="puts.html" hidden="true"/>
        <files mask="rc.html" hidden="true"/>
        <files mask="read.html" hidden="true"/>
        <files mask="readdir.html" hidden="true"/>
        <files mask="rename.html" hidden="true"/>
        <files mask="sdir.html" hidden="true"/>
        <files mask="setcp.html" hidden="true"/>
        <files mask="setlabel.html" hidden="true"/>
        <files mask="sfatfs.html" hidden="true"/>
        <files mask="sfile.html" hidden="true"/>
        <files mask="sfileinfo.html" hidden="true"/>
        <files mask="size.html" hidden="true"/>
        <files mask="stat.html" hidden="true"/>
        <files mask="sync.html" hidden="true"/>
        <files mask="tell.html" hidden="true"/>
        <files mask="truncate.html" hidden="true"/>
        <files mask="unlink.html" hidden="true"/>
        <files mask="utime.html" hidden="true"/>
        <files mask="write.html" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="src">
        <files mask="app1.c" hidden="true"/>
        <files mask="app2.c" hidden="true"/>
        <files mask="app3.c" hidden="true"/>
        <files mask="app4.c" hidden="true"/>
        <files mask="app5.c" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="image">
        <files mask="f1.png" hidden="true"/>
        <files mask="f2.png" hidden="true"/>
        <files mask="f3.png" hidden="true"/>
        <files mask="f4.png" hidden="true"/>
        <files mask="f5.png" hidden="true"/>
        <files mask="f6.png" hidden="true"/>
        <files mask="f7.png" hidden="true"/>
        <files mask="funcs.png" hidden="true"/>
        <files mask="layers.png" hidden="true"/>
        <files mask="layers1.png" hidden="true"/>
        <files mask="layers2.png" hidden="true"/>
        <files mask="layers3.png" hidden="true"/>
        <files mask="modules.png" hidden="true"/>
        <files mask="rwtest1.png" hidden="true"/>
        <files mask="rwtest2.png" hidden="true"/>
        <files mask="rwtest3.png" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="archive">
        <files mask="mkfatimg.zip" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/documents/res" type="doc">
        <files mask="mkfs.xls" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/source" type="doc">
        <files mask="00history.txt" hidden="true"/>
        <files mask="00readme.txt" hidden="true"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/source" type="c_include">
        <files mask="ffconf_template.h" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MKE16F16" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MKE16F512xxx16" user_visible="true" type="utilities"/>
    <component id="platform.utilities.assert.MKE16F16" name="assert" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MKE16F16" name="debug_console" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKE16F16"/>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MKE16F16/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MKE16F16/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MKE16F16/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MKE16F16" name="notifier" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE16F16"/>
      </dependencies>
      <source path="devices/MKE16F16/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MKE16F16/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MKE16F16" name="shell" version="1.0.0" devices="MKE16F512xxx16" device_cores="core0_MKE16F512xxx16" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MKE16F16"/>
          <component_dependency value="component.lists.MKE16F16"/>
          <component_dependency value="platform.drivers.common.MKE16F16"/>
        </all>
      </dependencies>
      <source path="devices/MKE16F16/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MKE16F16/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
