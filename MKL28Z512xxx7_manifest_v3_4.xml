<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MKL28Z512xxx7" name="MKL28Z512xxx7" brief="This is SDK version 2.5.0 manifest file. It describes the content of the MKL28Z512xxx7 and additional settings for tools that support SDK version 2.5.0" format_version="3.4" api_version="2.0.0" configuration="3278c6374a3c08aad3dfc24d0079763c" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.4.xsd">
  <!--Timestamp (UTC): 2019-11-26 14:06:02.727414-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <ksdk id="MCUXpresso250" name="MCUXpresso250" version="2.5.0" revision="150 2018-12-17"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="10.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="10.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="twrkl28z72m" name="TWR-KL28Z72M" href="http://www.nxp.com/twr-kl28z72m" version="1.0.0" package="MKL28Z512VLL7">
      <description>TWR-KL28Z72M: TWR-KL28Z72M: Kinetis KL28 MCU Tower System Module</description>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The TWR-KL28Z72M is a development board for the Kinetis® KL28 32-bit MCUs. Features the Kinetis KL28 MCU with 512KB Flash, 128KB SRAM. Operates as a standalone debug tool and can also be combined and used as part of the modular Tower® System development platform</content>
          </specific>
        </metadata>
      </metadataSet>
      <examples>
        <example id="twrkl28z72m_host_audio_speaker_freertos" name="host_audio_speaker_freertos" brief="The Host Audio example supports the audio speaker device. @n The application prints the audio speaker information when the USB speaker device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_audio_speaker/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_audio_speaker/freertos" type="xml">
            <files mask="host_audio_speaker_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_cdc_freertos" name="host_cdc_freertos" brief="The host CDC project is a simple demonstration program based on the MCUXpresso SDK. It enumerates a COM port and echoes back the data from the UART ." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_cdc/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_cdc/freertos" type="xml">
            <files mask="host_cdc_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_hid_mouse_freertos" name="host_hid_mouse_freertos" brief="The application supports the mouse device. It prints the mouse operation when the mouse device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse/freertos" type="xml">
            <files mask="host_hid_mouse_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_hid_generic_freertos" name="host_hid_generic_freertos" brief="This application implements a simple HID interrupt in-and-out endpoint bi-directional communication.The application sends one test string to the device. The device receives and sends back the string. The application receives the string and prints it." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_hid_generic/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_hid_generic/freertos" type="xml">
            <files mask="host_hid_generic_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_hid_mouse_keyboard_freertos" name="host_hid_mouse_keyboard_freertos" brief="This example supports the mouse device and the keyboard device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse_keyboard/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse_keyboard/freertos" type="xml">
            <files mask="host_hid_mouse_keyboard_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_msd_command_freertos" name="host_msd_command_freertos" brief="This Host MSD example supports the UFI and SCSI U-disk device.  The application prints the attached device information when the U-disk device is attached.The application executes UFI commands to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_msd_command/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_msd_command/freertos" type="xml">
            <files mask="host_msd_command_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_msd_fatfs_freertos" name="host_msd_fatfs_freertos" brief="This Host FatFs example supports UFI and SCSI U-disk device. The application prints the attached device information when U-disk device is attached.The application executes some FatFs APIs to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_msd_fatfs/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_msd_fatfs/freertos" type="xml">
            <files mask="host_msd_fatfs_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_phdc_manager_freertos" name="host_phdc_manager_freertos" brief="The Host PHDC Manager Example is a simple demonstration program based on the MCUXpresso SDK.The application supports the USB weight scale device. It prints out the body mass and body mass index information when the USB weight scale device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_phdc_manager/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_phdc_manager/freertos" type="xml">
            <files mask="host_phdc_manager_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_printer_plain_text_freertos" name="host_printer_plain_text_freertos" brief="The host printer example demonstrates how to get the status of the printer deviceand how to print a certain test string.." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_printer_plain_text/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_printer_plain_text/freertos" type="xml">
            <files mask="host_printer_plain_text_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_audio_speaker_bm" name="host_audio_speaker_bm" brief="The Host Audio example supports the audio speaker device. @n The application prints the audio speaker information when the USB speaker device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_audio_speaker/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_audio_speaker/bm" type="xml">
            <files mask="host_audio_speaker_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_cdc_bm" name="host_cdc_bm" brief="The host CDC project is a simple demonstration program based on the MCUXpresso SDK. It enumerates a COM port and echoes back the data from the UART." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_cdc/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_cdc/bm" type="xml">
            <files mask="host_cdc_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_hid_mouse_bm" name="host_hid_mouse_bm" brief="The application supports the mouse device. It prints the mouse operation when the mouse device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse/bm" type="xml">
            <files mask="host_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_hid_generic_bm" name="host_hid_generic_bm" brief="This application implements a simple HID interrupt in-and-out endpoint bi-directional communication.The application sends one test string to the device. The device receives and sends back the string. The application receives the string and prints it." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_hid_generic/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_hid_generic/bm" type="xml">
            <files mask="host_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_hid_mouse_keyboard_bm" name="host_hid_mouse_keyboard_bm" brief="This example supports the mouse device and the keyboard device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse_keyboard/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_hid_mouse_keyboard/bm" type="xml">
            <files mask="host_hid_mouse_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_msd_command_bm" name="host_msd_command_bm" brief="This Host MSD example supports the UFI and SCSI U-disk device. The application prints the attached device information when the U-disk device is attached.The application executes UFI commands to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_msd_command/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_msd_command/bm" type="xml">
            <files mask="host_msd_command_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_msd_fatfs_bm" name="host_msd_fatfs_bm" brief="This Host FatFs example supports UFI and SCSI U-disk device. The application prints the attached device information when U-disk device is attached.The application executes some FatFs APIs to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_msd_fatfs/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_msd_fatfs/bm" type="xml">
            <files mask="host_msd_fatfs_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_phdc_manager_bm" name="host_phdc_manager_bm" brief="The Host PHDC Manager Example is a simple demonstration program based on the MCUXpresso SDK.The application supports the USB weight scale device. It prints out the body mass and body mass index information when the USB weight scale device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_phdc_manager/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_phdc_manager/bm" type="xml">
            <files mask="host_phdc_manager_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_host_printer_plain_text_bm" name="host_printer_plain_text_bm" brief="The host printer example demonstrates how to get the status of the printer deviceand how to print a certain test string." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_host_printer_plain_text/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_host_printer_plain_text/bm" type="xml">
            <files mask="host_printer_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_mouse_freertos_static" name="dev_hid_mouse_freertos_static" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse/freertos_static">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse/freertos_static" type="xml">
            <files mask="dev_hid_mouse_freertos_static.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_audio_speaker_freertos" name="dev_audio_speaker_freertos" brief="The USB Audio Speaker application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback device and users can play music using the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_audio_speaker/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_audio_speaker/freertos" type="xml">
            <files mask="dev_audio_speaker_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_cdc_vcom_freertos" name="dev_cdc_vcom_freertos" brief="The Virtual COM project is  enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_cdc_vcom/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_cdc_vcom/freertos" type="xml">
            <files mask="dev_cdc_vcom_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_cdc_vcom_cdc_vcom_freertos" name="dev_composite_cdc_vcom_cdc_vcom_freertos" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/freertos" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_cdc_msc_freertos" name="dev_composite_cdc_msc_freertos" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_msc/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_msc/freertos" type="xml">
            <files mask="dev_composite_cdc_msc_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_hid_audio_unified_freertos" name="dev_composite_hid_audio_unified_freertos" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_audio_unified/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_audio_unified/freertos" type="xml">
            <files mask="dev_composite_hid_audio_unified_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_hid_mouse_hid_keyboard_freertos" name="dev_composite_hid_mouse_hid_keyboard_freertos" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/freertos" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_mouse_freertos" name="dev_hid_mouse_freertos" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse/freertos" type="xml">
            <files mask="dev_hid_mouse_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_generic_freertos" name="dev_hid_generic_freertos" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_generic/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_generic/freertos" type="xml">
            <files mask="dev_hid_generic_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_msc_ramdisk_freertos" name="dev_msc_ramdisk_freertos" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_msc_ramdisk/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_msc_ramdisk/freertos" type="xml">
            <files mask="dev_msc_ramdisk_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_video_virtual_camera_freertos" name="dev_video_virtual_camera_freertos" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_video_virtual_camera/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_video_virtual_camera/freertos" type="xml">
            <files mask="dev_video_virtual_camera_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_phdc_weighscale_freertos" name="dev_phdc_weighscale_freertos" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_phdc_weighscale/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_phdc_weighscale/freertos" type="xml">
            <files mask="dev_phdc_weighscale_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_printer_virtual_plain_text_freertos" name="dev_printer_virtual_plain_text_freertos" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_printer_virtual_plain_text/freertos">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_printer_virtual_plain_text/freertos" type="xml">
            <files mask="dev_printer_virtual_plain_text_freertos.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_audio_speaker_bm" name="dev_audio_speaker_bm" brief="The USB Audio Speaker application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback device and users can play music using the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_audio_speaker/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_audio_speaker/bm" type="xml">
            <files mask="dev_audio_speaker_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_audio_speaker_lite_bm" name="dev_audio_speaker_lite_bm" brief="The USB Audio Speaker application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback device and users can play music using the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_audio_speaker_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_audio_speaker_lite/bm" type="xml">
            <files mask="dev_audio_speaker_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_cdc_vcom_cdc_vcom_bm" name="dev_composite_cdc_vcom_cdc_vcom_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_cdc_vcom_cdc_vcom_lite_bm" name="dev_composite_cdc_vcom_cdc_vcom_lite_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_cdc_vcom_bm" name="dev_cdc_vcom_bm" brief="The Virtual COM project is enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_cdc_vcom/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_cdc_vcom/bm" type="xml">
            <files mask="dev_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_cdc_vcom_lite_bm" name="dev_cdc_vcom_lite_bm" brief="The Virtual COM project enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_cdc_vcom_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_cdc_msc_bm" name="dev_composite_cdc_msc_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted.." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_msc/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_msc/bm" type="xml">
            <files mask="dev_composite_cdc_msc_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_cdc_msc_lite_bm" name="dev_composite_cdc_msc_lite_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_msc_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_cdc_msc_lite/bm" type="xml">
            <files mask="dev_composite_cdc_msc_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_hid_audio_unified_bm" name="dev_composite_hid_audio_unified_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_audio_unified/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_audio_unified/bm" type="xml">
            <files mask="dev_composite_hid_audio_unified_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_hid_audio_unified_lite_bm" name="dev_composite_hid_audio_unified_lite_bm" brief="The USB Composite HID and Audio Unified application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback and recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories and play music with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_audio_unified_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_audio_unified_lite/bm" type="xml">
            <files mask="dev_composite_hid_audio_unified_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_hid_mouse_hid_keyboard_bm" name="dev_composite_hid_mouse_hid_keyboard_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_composite_hid_mouse_hid_keyboard_lite_bm" name="dev_composite_hid_mouse_hid_keyboard_lite_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_mouse_bm" name="dev_hid_mouse_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse/bm" type="xml">
            <files mask="dev_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_mouse_lite_bm" name="dev_hid_mouse_lite_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_generic_bm" name="dev_hid_generic_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_generic/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_generic/bm" type="xml">
            <files mask="dev_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_hid_generic_lite_bm" name="dev_hid_generic_lite_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_hid_generic_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_hid_generic_lite/bm" type="xml">
            <files mask="dev_hid_generic_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_msc_ramdisk_bm" name="dev_msc_ramdisk_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_msc_ramdisk/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_msc_ramdisk/bm" type="xml">
            <files mask="dev_msc_ramdisk_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_msc_ramdisk_lite_bm" name="dev_msc_ramdisk_lite_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_msc_ramdisk_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_msc_ramdisk_lite/bm" type="xml">
            <files mask="dev_msc_ramdisk_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_video_virtual_camera_bm" name="dev_video_virtual_camera_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_video_virtual_camera/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_video_virtual_camera/bm" type="xml">
            <files mask="dev_video_virtual_camera_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_video_virtual_camera_lite_bm" name="dev_video_virtual_camera_lite_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_video_virtual_camera_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_video_virtual_camera_lite/bm" type="xml">
            <files mask="dev_video_virtual_camera_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_phdc_weighscale_bm" name="dev_phdc_weighscale_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_phdc_weighscale/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_phdc_weighscale/bm" type="xml">
            <files mask="dev_phdc_weighscale_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_phdc_weighscale_lite_bm" name="dev_phdc_weighscale_lite_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_phdc_weighscale_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_phdc_weighscale_lite/bm" type="xml">
            <files mask="dev_phdc_weighscale_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_printer_virtual_plain_text_bm" name="dev_printer_virtual_plain_text_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_printer_virtual_plain_text/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_printer_virtual_plain_text/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dev_printer_virtual_plain_text_lite_bm" name="dev_printer_virtual_plain_text_lite_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="mcuxpresso" category="usb_examples" path="boards/twrkl28z72m/usb_examples/usb_device_printer_virtual_plain_text_lite/bm">
          <external path="boards/twrkl28z72m/usb_examples/usb_device_printer_virtual_plain_text_lite/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_lite_bm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_led_demo_tower_a000" name="led_demo_tower_a000" brief="The led_demo_tower_a000 is a led blinky application load at offset 0xa000 of the target flash memory on the Tower platform. The led demo project is an example demo firmware applications used to demonstrate how the MCU bootloader can load and launch user applications." toolchain="mcuxpresso" category="bootloader_examples/demo_apps" path="boards/twrkl28z72m/bootloader_examples/demo_apps/led_demo_tower_a000">
          <external path="boards/twrkl28z72m/bootloader_examples/demo_apps/led_demo_tower_a000" type="xml">
            <files mask="led_demo_tower_a000.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tower_bootloader" name="tower_bootloader" brief="The tower_bootloader is a bootloader that executes from target flash memory on the Tower platform. The bootloader is a configurable flash programming utility that operates over a serial connection on MCU devices. It enables quick and easy programming of MCU devices through the entire product life cycle, including application development, final product manufacturing, and more.Host-side command line and GUI tools are available to communicate with the bootloader. Users can utilize host tools to upload and/or download application code via the bootloader." toolchain="mcuxpresso" category="bootloader_examples" path="boards/twrkl28z72m/bootloader_examples/tower_bootloader">
          <external path="boards/twrkl28z72m/bootloader_examples/tower_bootloader" type="xml">
            <files mask="tower_bootloader.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/hello_world">
          <external path="boards/twrkl28z72m/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_hello_world_virtual_com" name="hello_world_virtual_com" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/hello_world_virtual_com">
          <external path="boards/twrkl28z72m/demo_apps/hello_world_virtual_com" type="xml">
            <files mask="hello_world_virtual_com.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_hello">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_event">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_generic">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_lpi2c" name="freertos_lpi2c" brief="The LPI2C Example project is a demonstration program that uses the KSDK software to manipulate the Low Power Inter-Integrated Circuit.The example uses two instances of LPI2C, one in configured as master and the other one as slave.The LPI2C master sends data to LPI2C slave. The slave will check the data it receives and shows the log." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_lpi2c">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_lpi2c" type="xml">
            <files mask="freertos_lpi2c.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_lpspi" name="freertos_lpspi" brief="The lpspi_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_lpspi">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_lpspi" type="xml">
            <files mask="freertos_lpspi.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_lpuart">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_queue">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_sem">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer’s callback SwTimerCallback isperiodically executed and text “Tick.” is printed to terminal." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_swtimer">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_mutex">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="mcuxpresso" category="rtos_examples" path="boards/twrkl28z72m/rtos_examples/freertos_tickless">
          <external path="boards/twrkl28z72m/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="mcuxpresso" category="driver_examples/gpio" path="boards/twrkl28z72m/driver_examples/gpio/led_output">
          <external path="boards/twrkl28z72m/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="mcuxpresso" category="driver_examples/gpio" path="boards/twrkl28z72m/driver_examples/gpio/input_interrupt">
          <external path="boards/twrkl28z72m/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="mcuxpresso" category="driver_examples/adc16" path="boards/twrkl28z72m/driver_examples/adc16/interrupt">
          <external path="boards/twrkl28z72m/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="mcuxpresso" category="driver_examples/adc16" path="boards/twrkl28z72m/driver_examples/adc16/polling">
          <external path="boards/twrkl28z72m/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="mcuxpresso" category="driver_examples/cmp" path="boards/twrkl28z72m/driver_examples/cmp/polling">
          <external path="boards/twrkl28z72m/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="mcuxpresso" category="driver_examples/cmp" path="boards/twrkl28z72m/driver_examples/cmp/interrupt">
          <external path="boards/twrkl28z72m/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="mcuxpresso" category="driver_examples/dac" path="boards/twrkl28z72m/driver_examples/dac/basic">
          <external path="boards/twrkl28z72m/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="mcuxpresso" category="driver_examples/dac" path="boards/twrkl28z72m/driver_examples/dac/buffer_interrupt">
          <external path="boards/twrkl28z72m/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" category="driver_examples/edma" path="boards/twrkl28z72m/driver_examples/edma/memory_to_memory">
          <external path="boards/twrkl28z72m/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" category="driver_examples/edma" path="boards/twrkl28z72m/driver_examples/edma/scatter_gather">
          <external path="boards/twrkl28z72m/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/lptmr">
          <external path="boards/twrkl28z72m/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/rtc">
          <external path="boards/twrkl28z72m/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/crc">
          <external path="boards/twrkl28z72m/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="mcuxpresso" category="driver_examples/flash" path="boards/twrkl28z72m/driver_examples/flash/pflash">
          <external path="boards/twrkl28z72m/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_i2c_read_accel_value_transfer" name="flexio_i2c_read_accel_value_transfer" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/i2c/read_accel_value_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/i2c/read_accel_value_transfer" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_i2c_interrupt_lpi2c_transfer" name="flexio_i2c_interrupt_lpi2c_transfer" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/i2c/interrupt_lpi2c_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/i2c/interrupt_lpi2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_i2s_interrupt_transfer" name="flexio_i2s_interrupt_transfer" brief="The flexio_i2s_interrupt example shows how to use flexio_i2s driver with interrupt:In this example, flexio acts as I2S module to record data from line-in line and playbacks the recorded data at the same time using interrupt." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/i2s/interrupt_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/i2s/interrupt_transfer" type="xml">
            <files mask="flexio_i2s_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_i2s_edma_transfer" name="flexio_i2s_edma_transfer" brief="The flexio_i2s_EDMA example shows how to use flexio_i2s driver with EDMA:In this example, flexio acts as I2S module to record data from line-in line and playbacks the recorded data at the same time using EDMA." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/i2s/edma_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/i2s/edma_transfer" type="xml">
            <files mask="flexio_i2s_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_spi_int_lpspi_transfer_master" name="flexio_spi_int_lpspi_transfer_master" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/spi/int_lpspi_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/flexio/spi/int_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_spi_int_lpspi_transfer_slave" name="flexio_spi_int_lpspi_transfer_slave" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/spi/int_lpspi_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/flexio/spi/int_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_spi_edma_lpspi_transfer_master" name="flexio_spi_edma_lpspi_transfer_master" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/spi/edma_lpspi_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/flexio/spi/edma_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_spi_edma_lpspi_transfer_slave" name="flexio_spi_edma_lpspi_transfer_slave" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/spi/edma_lpspi_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/flexio/spi/edma_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/uart/polling_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/uart/interrupt_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/uart/int_rb_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/twrkl28z72m/driver_examples/flexio/uart/edma_transfer">
          <external path="boards/twrkl28z72m/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_interrupt" name="lpi2c_interrupt" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/interrupt">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/interrupt" type="xml">
            <files mask="lpi2c_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpit" name="lpit" brief="The LPIT project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/lpit">
          <external path="boards/twrkl28z72m/driver_examples/lpit" type="xml">
            <files mask="lpit.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_scg" name="scg" brief="The SCG example shows how to use SCG driver: 1. How to setup the SCG clock source. 2. How to use SCG clock while power mode switch. 3. How to use SCG APIs to get clock frequency.This example prints the clock frequency through the terminal using the SDK driver." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/scg">
          <external path="boards/twrkl28z72m/driver_examples/scg" type="xml">
            <files mask="scg.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/twrkl28z72m/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/twrkl28z72m/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/twrkl28z72m/driver_examples/lpuart/interrupt">
          <external path="boards/twrkl28z72m/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/twrkl28z72m/driver_examples/lpuart/polling">
          <external path="boards/twrkl28z72m/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/twrkl28z72m/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/twrkl28z72m/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/twrkl28z72m/driver_examples/lpuart/edma_transfer">
          <external path="boards/twrkl28z72m/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_interrupt" name="lpspi_interrupt" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/interrupt">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/interrupt" type="xml">
            <files mask="lpspi_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_mmdvsq" name="mmdvsq" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/mmdvsq">
          <external path="boards/twrkl28z72m/driver_examples/mmdvsq" type="xml">
            <files mask="mmdvsq.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_sai_interrupt_transfer" name="sai_interrupt_transfer" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="mcuxpresso" category="driver_examples/sai" path="boards/twrkl28z72m/driver_examples/sai/interrupt_transfer">
          <external path="boards/twrkl28z72m/driver_examples/sai/interrupt_transfer" type="xml">
            <files mask="sai_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_sai_interrupt_record_playback" name="sai_interrupt_record_playback" brief="The sai_interrupt_record_playback example shows how to use sai driver with record and playback features: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="mcuxpresso" category="driver_examples/sai" path="boards/twrkl28z72m/driver_examples/sai/interrupt_record_playback">
          <external path="boards/twrkl28z72m/driver_examples/sai/interrupt_record_playback" type="xml">
            <files mask="sai_interrupt_record_playback.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_sai_edma_transfer" name="sai_edma_transfer" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="mcuxpresso" category="driver_examples/sai" path="boards/twrkl28z72m/driver_examples/sai/edma_transfer">
          <external path="boards/twrkl28z72m/driver_examples/sai/edma_transfer" type="xml">
            <files mask="sai_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_sai_edma_record_playback" name="sai_edma_record_playback" brief="The sai_edma_record_playback example shows how to use sai driver with EDMA: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="mcuxpresso" category="driver_examples/sai" path="boards/twrkl28z72m/driver_examples/sai/edma_record_playback">
          <external path="boards/twrkl28z72m/driver_examples/sai/edma_record_playback" type="xml">
            <files mask="sai_edma_record_playback.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_sai_interrupt" name="sai_interrupt" brief="The sai_interrupt example shows how to use sai fucntional API to implement interrupt playback:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="mcuxpresso" category="driver_examples/sai" path="boards/twrkl28z72m/driver_examples/sai/interrupt">
          <external path="boards/twrkl28z72m/driver_examples/sai/interrupt" type="xml">
            <files mask="sai_interrupt.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tstmr" name="tstmr" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/tstmr">
          <external path="boards/twrkl28z72m/driver_examples/tstmr" type="xml">
            <files mask="tstmr.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="mcuxpresso" category="driver_examples/trng" path="boards/twrkl28z72m/driver_examples/trng/random">
          <external path="boards/twrkl28z72m/driver_examples/trng/random" type="xml">
            <files mask="trng_random.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/wdog32">
          <external path="boards/twrkl28z72m/driver_examples/wdog32" type="xml">
            <files mask="wdog32.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/adc16_low_power">
          <external path="boards/twrkl28z72m/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/rtc_func">
          <external path="boards/twrkl28z72m/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/dac_adc">
          <external path="boards/twrkl28z72m/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_mmcau" name="mmcau" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="mcuxpresso" category="mmcau_examples" path="boards/twrkl28z72m/mmcau_examples/mmcau_api">
          <external path="boards/twrkl28z72m/mmcau_examples/mmcau_api" type="xml">
            <files mask="mmcau.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/power_manager">
          <external path="boards/twrkl28z72m/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/power_mode_switch">
          <external path="boards/twrkl28z72m/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/pwm_twochannel">
          <external path="boards/twrkl28z72m/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/simple_pwm">
          <external path="boards/twrkl28z72m/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/timer">
          <external path="boards/twrkl28z72m/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/combine_pwm">
          <external path="boards/twrkl28z72m/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/output_compare">
          <external path="boards/twrkl28z72m/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/dual_edge_capture">
          <external path="boards/twrkl28z72m/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/twrkl28z72m/driver_examples/tpm/input_capture">
          <external path="boards/twrkl28z72m/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tsi_v4_normal_mode" name="tsi_v4_normal_mode" brief="The tsi_v4_normal example shows how to use TSI_V4 driver in normal modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method." toolchain="mcuxpresso" category="driver_examples/tsi_v4" path="boards/twrkl28z72m/driver_examples/tsi_v4/normal">
          <external path="boards/twrkl28z72m/driver_examples/tsi_v4/normal" type="xml">
            <files mask="tsi_v4_normal_mode.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_tsi_v4_low_power_mode" name="tsi_v4_low_power_mode" brief="The tsi_v4_low_power example shows how to use TSI_V4 driver in low power modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Hardware-Trigger scan using interrupt method to wakeup from low power   modes through pad touch;3. Note: you can select which low power mode you want to enter into." toolchain="mcuxpresso" category="driver_examples/tsi_v4" path="boards/twrkl28z72m/driver_examples/tsi_v4/low_power">
          <external path="boards/twrkl28z72m/driver_examples/tsi_v4/low_power" type="xml">
            <files mask="tsi_v4_low_power_mode.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_bubble" name="bubble" brief="The EEPROM flash demo application demonstrates the use of the LPI2C IP and driver to read and write data from anexternal EEPROM device." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/bubble">
          <external path="boards/twrkl28z72m/demo_apps/bubble" type="xml">
            <files mask="bubble.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="mcuxpresso" category="driver_examples" path="boards/twrkl28z72m/driver_examples/flexio/pwm">
          <external path="boards/twrkl28z72m/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" category="cmsis_driver_examples/lpuart" path="boards/twrkl28z72m/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" category="cmsis_driver_examples/lpuart" path="boards/twrkl28z72m/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/shell">
          <external path="boards/twrkl28z72m/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_polling_b2b_transfer_master" name="lpi2c_polling_b2b_transfer_master" brief="The lpi2c_polling_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/polling_b2b_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/polling_b2b_transfer/master" type="xml">
            <files mask="lpi2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpi2c_polling_b2b_transfer_slave" name="lpi2c_polling_b2b_transfer_slave" brief="The lpi2c_polling_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/twrkl28z72m/driver_examples/lpi2c/polling_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpi2c/polling_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpi2c_int_b2b_transfer_master" name="cmsis_lpi2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/int_b2b_transfer/master">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpi2c_int_b2b_transfer_slave" name="cmsis_lpi2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpi2c_edma_b2b_transfer_master" name="cmsis_lpi2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpi2c_edma_b2b_transfer_slave" name="cmsis_lpi2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b/master">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/twrkl28z72m/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpspi_int_b2b_transfer_master" name="cmsis_lpspi_int_b2b_transfer_master" brief="The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/int_b2b_transfer/master">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpspi_int_b2b_transfer_slave" name="cmsis_lpspi_int_b2b_transfer_slave" brief="The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/int_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpspi_edma_b2b_transfer_master" name="cmsis_lpspi_edma_b2b_transfer_master" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_cmsis_lpspi_edma_b2b_transfer_slave" name="cmsis_lpspi_edma_b2b_transfer_slave" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="boards/twrkl28z72m/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="twrkl28z72m_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="mcuxpresso" category="demo_apps" path="boards/twrkl28z72m/demo_apps/led_blinky">
          <external path="boards/twrkl28z72m/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
      </examples>
    </board>
    <board id="frdmkl28z" name="FRDM-KL28Z" href="http://www.nxp.com/frdm-kl28z" version="1.0.0" package="MKL28Z512VLL7">
      <description>FRDM-KL28Z: Freedom Development Platform for Kinetis KL28MCUs</description>
      <image path="docs/images" type="image">
        <files mask="FRDM-KL28Z.gif"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The FRDM-KL28Z supports power supply voltage range from 1.71V to 3.6V.It features a KL28Z, a device boasting up to 512KB Flash and 128KB SRAM, and numerous analog and digital peripherals. The on-board interfaces include an RGB LED, a 6-axis digital sensor, a 3-axis digital angular rate gyroscope, an ambient light sensor, and a capacitive touch slider.</content>
          </specific>
        </metadata>
        <metadata key="server.APLimit" value="2"/>
      </metadataSet>
      <examples>
        <example id="frdmkl28z_host_audio_speaker_freertos" name="host_audio_speaker_freertos" brief="The Host Audio example supports the audio speaker device. @n The application prints the audio speaker information when the USB speaker device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_audio_speaker/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_audio_speaker/freertos" type="xml">
            <files mask="host_audio_speaker_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_cdc_freertos" name="host_cdc_freertos" brief="The host CDC project is a simple demonstration program based on the MCUXpresso SDK. It enumerates a COM port and echoes back the data from the UART ." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_cdc/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_cdc/freertos" type="xml">
            <files mask="host_cdc_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_hid_mouse_freertos" name="host_hid_mouse_freertos" brief="The application supports the mouse device. It prints the mouse operation when the mouse device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse/freertos" type="xml">
            <files mask="host_hid_mouse_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_hid_generic_freertos" name="host_hid_generic_freertos" brief="This application implements a simple HID interrupt in-and-out endpoint bi-directional communication.The application sends one test string to the device. The device receives and sends back the string. The application receives the string and prints it." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_hid_generic/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_hid_generic/freertos" type="xml">
            <files mask="host_hid_generic_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_hid_mouse_keyboard_freertos" name="host_hid_mouse_keyboard_freertos" brief="This example supports the mouse device and the keyboard device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse_keyboard/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse_keyboard/freertos" type="xml">
            <files mask="host_hid_mouse_keyboard_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_msd_command_freertos" name="host_msd_command_freertos" brief="This Host MSD example supports the UFI and SCSI U-disk device.  The application prints the attached device information when the U-disk device is attached.The application executes UFI commands to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_msd_command/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_msd_command/freertos" type="xml">
            <files mask="host_msd_command_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_msd_fatfs_freertos" name="host_msd_fatfs_freertos" brief="This Host FatFs example supports UFI and SCSI U-disk device. The application prints the attached device information when U-disk device is attached.The application executes some FatFs APIs to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_msd_fatfs/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_msd_fatfs/freertos" type="xml">
            <files mask="host_msd_fatfs_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_phdc_manager_freertos" name="host_phdc_manager_freertos" brief="The Host PHDC Manager Example is a simple demonstration program based on the MCUXpresso SDK.The application supports the USB weight scale device. It prints out the body mass and body mass index information when the USB weight scale device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_phdc_manager/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_phdc_manager/freertos" type="xml">
            <files mask="host_phdc_manager_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_suspend_resume_hid_mouse_freertos" name="host_suspend_resume_hid_mouse_freertos" brief="This is one example support suspend/resume." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_suspend_resume_host_hid_mouse/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_suspend_resume_host_hid_mouse/freertos" type="xml">
            <files mask="host_suspend_resume_hid_mouse_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_printer_plain_text_freertos" name="host_printer_plain_text_freertos" brief="The host printer example demonstrates how to get the status of the printer deviceand how to print a certain test string.." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_printer_plain_text/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_host_printer_plain_text/freertos" type="xml">
            <files mask="host_printer_plain_text_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_audio_speaker_bm" name="host_audio_speaker_bm" brief="The Host Audio example supports the audio speaker device. @n The application prints the audio speaker information when the USB speaker device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_audio_speaker/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_audio_speaker/bm" type="xml">
            <files mask="host_audio_speaker_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_cdc_bm" name="host_cdc_bm" brief="The host CDC project is a simple demonstration program based on the MCUXpresso SDK. It enumerates a COM port and echoes back the data from the UART." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_cdc/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_cdc/bm" type="xml">
            <files mask="host_cdc_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_hid_mouse_bm" name="host_hid_mouse_bm" brief="The application supports the mouse device. It prints the mouse operation when the mouse device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse/bm" type="xml">
            <files mask="host_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_hid_generic_bm" name="host_hid_generic_bm" brief="This application implements a simple HID interrupt in-and-out endpoint bi-directional communication.The application sends one test string to the device. The device receives and sends back the string. The application receives the string and prints it." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_hid_generic/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_hid_generic/bm" type="xml">
            <files mask="host_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_hid_mouse_keyboard_bm" name="host_hid_mouse_keyboard_bm" brief="This example supports the mouse device and the keyboard device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse_keyboard/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_hid_mouse_keyboard/bm" type="xml">
            <files mask="host_hid_mouse_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_msd_command_bm" name="host_msd_command_bm" brief="This Host MSD example supports the UFI and SCSI U-disk device. The application prints the attached device information when the U-disk device is attached.The application executes UFI commands to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_msd_command/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_msd_command/bm" type="xml">
            <files mask="host_msd_command_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_msd_fatfs_bm" name="host_msd_fatfs_bm" brief="This Host FatFs example supports UFI and SCSI U-disk device. The application prints the attached device information when U-disk device is attached.The application executes some FatFs APIs to test the attached device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_msd_fatfs/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_msd_fatfs/bm" type="xml">
            <files mask="host_msd_fatfs_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_phdc_manager_bm" name="host_phdc_manager_bm" brief="The Host PHDC Manager Example is a simple demonstration program based on the MCUXpresso SDK.The application supports the USB weight scale device. It prints out the body mass and body mass index information when the USB weight scale device is attached." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_phdc_manager/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_phdc_manager/bm" type="xml">
            <files mask="host_phdc_manager_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_suspend_resume_hid_mouse_bm" name="host_suspend_resume_hid_mouse_bm" brief="This is one example support suspend/resume." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_suspend_resume_host_hid_mouse/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_suspend_resume_host_hid_mouse/bm" type="xml">
            <files mask="host_suspend_resume_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_host_printer_plain_text_bm" name="host_printer_plain_text_bm" brief="The host printer example demonstrates how to get the status of the printer deviceand how to print a certain test string." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_host_printer_plain_text/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_host_printer_plain_text/bm" type="xml">
            <files mask="host_printer_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_mouse_freertos_static" name="dev_hid_mouse_freertos_static" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse/freertos_static">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse/freertos_static" type="xml">
            <files mask="dev_hid_mouse_freertos_static.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_audio_generator_freertos" name="dev_audio_generator_freertos" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_audio_generator/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_audio_generator/freertos" type="xml">
            <files mask="dev_audio_generator_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_cdc_vcom_freertos" name="dev_cdc_vcom_freertos" brief="The Virtual COM project is  enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_cdc_vcom/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_cdc_vcom/freertos" type="xml">
            <files mask="dev_cdc_vcom_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_cdc_vcom_cdc_vcom_freertos" name="dev_composite_cdc_vcom_cdc_vcom_freertos" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/freertos" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_cdc_msc_freertos" name="dev_composite_cdc_msc_freertos" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_msc/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_msc/freertos" type="xml">
            <files mask="dev_composite_cdc_msc_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_hid_audio_freertos" name="dev_composite_hid_audio_freertos" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_audio/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_audio/freertos" type="xml">
            <files mask="dev_composite_hid_audio_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_hid_mouse_hid_keyboard_freertos" name="dev_composite_hid_mouse_hid_keyboard_freertos" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/freertos" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_mouse_freertos" name="dev_hid_mouse_freertos" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse/freertos" type="xml">
            <files mask="dev_hid_mouse_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_generic_freertos" name="dev_hid_generic_freertos" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_generic/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_generic/freertos" type="xml">
            <files mask="dev_hid_generic_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_msc_ramdisk_freertos" name="dev_msc_ramdisk_freertos" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_msc_ramdisk/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_msc_ramdisk/freertos" type="xml">
            <files mask="dev_msc_ramdisk_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_video_virtual_camera_freertos" name="dev_video_virtual_camera_freertos" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_video_virtual_camera/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_video_virtual_camera/freertos" type="xml">
            <files mask="dev_video_virtual_camera_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_phdc_weighscale_freertos" name="dev_phdc_weighscale_freertos" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_phdc_weighscale/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_phdc_weighscale/freertos" type="xml">
            <files mask="dev_phdc_weighscale_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_suspend_resume_hid_mouse_freertos" name="dev_suspend_resume_hid_mouse_freertos" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_suspend_resume_device_hid_mouse/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_suspend_resume_device_hid_mouse/freertos" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_printer_virtual_plain_text_freertos" name="dev_printer_virtual_plain_text_freertos" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_printer_virtual_plain_text/freertos">
          <external path="boards/frdmkl28z/usb_examples/usb_device_printer_virtual_plain_text/freertos" type="xml">
            <files mask="dev_printer_virtual_plain_text_freertos.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_audio_generator_bm" name="dev_audio_generator_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_audio_generator/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_audio_generator/bm" type="xml">
            <files mask="dev_audio_generator_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_audio_generator_lite_bm" name="dev_audio_generator_lite_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_audio_generator_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_audio_generator_lite/bm" type="xml">
            <files mask="dev_audio_generator_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_cdc_vcom_cdc_vcom_bm" name="dev_composite_cdc_vcom_cdc_vcom_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_cdc_vcom_cdc_vcom_lite_bm" name="dev_composite_cdc_vcom_cdc_vcom_lite_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_cdc_vcom_bm" name="dev_cdc_vcom_bm" brief="The Virtual COM project is enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_cdc_vcom/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_cdc_vcom/bm" type="xml">
            <files mask="dev_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_cdc_vcom_lite_bm" name="dev_cdc_vcom_lite_bm" brief="The Virtual COM project enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_cdc_vcom_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_cdc_msc_bm" name="dev_composite_cdc_msc_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted.." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_msc/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_msc/bm" type="xml">
            <files mask="dev_composite_cdc_msc_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_cdc_msc_lite_bm" name="dev_composite_cdc_msc_lite_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_msc_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_cdc_msc_lite/bm" type="xml">
            <files mask="dev_composite_cdc_msc_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_hid_audio_bm" name="dev_composite_hid_audio_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_audio/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_audio/bm" type="xml">
            <files mask="dev_composite_hid_audio_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_hid_audio_lite_bm" name="dev_composite_hid_audio_lite_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_audio_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_audio_lite/bm" type="xml">
            <files mask="dev_composite_hid_audio_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_hid_mouse_hid_keyboard_bm" name="dev_composite_hid_mouse_hid_keyboard_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_composite_hid_mouse_hid_keyboard_lite_bm" name="dev_composite_hid_mouse_hid_keyboard_lite_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_mouse_bm" name="dev_hid_mouse_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse/bm" type="xml">
            <files mask="dev_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_mouse_lite_bm" name="dev_hid_mouse_lite_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_generic_bm" name="dev_hid_generic_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_generic/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_generic/bm" type="xml">
            <files mask="dev_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_hid_generic_lite_bm" name="dev_hid_generic_lite_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_hid_generic_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_hid_generic_lite/bm" type="xml">
            <files mask="dev_hid_generic_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_msc_ramdisk_bm" name="dev_msc_ramdisk_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_msc_ramdisk/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_msc_ramdisk/bm" type="xml">
            <files mask="dev_msc_ramdisk_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_msc_ramdisk_lite_bm" name="dev_msc_ramdisk_lite_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_msc_ramdisk_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_msc_ramdisk_lite/bm" type="xml">
            <files mask="dev_msc_ramdisk_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_video_virtual_camera_bm" name="dev_video_virtual_camera_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_video_virtual_camera/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_video_virtual_camera/bm" type="xml">
            <files mask="dev_video_virtual_camera_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_video_virtual_camera_lite_bm" name="dev_video_virtual_camera_lite_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_video_virtual_camera_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_video_virtual_camera_lite/bm" type="xml">
            <files mask="dev_video_virtual_camera_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_phdc_weighscale_bm" name="dev_phdc_weighscale_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_phdc_weighscale/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_phdc_weighscale/bm" type="xml">
            <files mask="dev_phdc_weighscale_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_phdc_weighscale_lite_bm" name="dev_phdc_weighscale_lite_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_phdc_weighscale_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_phdc_weighscale_lite/bm" type="xml">
            <files mask="dev_phdc_weighscale_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_suspend_resume_hid_mouse_bm" name="dev_suspend_resume_hid_mouse_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_suspend_resume_device_hid_mouse/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_suspend_resume_device_hid_mouse/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_suspend_resume_hid_mouse_lite_bm" name="dev_suspend_resume_hid_mouse_lite_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_printer_virtual_plain_text_bm" name="dev_printer_virtual_plain_text_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_printer_virtual_plain_text/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_printer_virtual_plain_text/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dev_printer_virtual_plain_text_lite_bm" name="dev_printer_virtual_plain_text_lite_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="mcuxpresso" category="usb_examples" path="boards/frdmkl28z/usb_examples/usb_device_printer_virtual_plain_text_lite/bm">
          <external path="boards/frdmkl28z/usb_examples/usb_device_printer_virtual_plain_text_lite/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_lite_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_led_demo_freedom_a000" name="led_demo_freedom_a000" brief="The led_demo_freedom_a000 is a led blinky application load at offset 0xa000 of the target flash memory on the Freedom platform. The led demo project is an example demo firmware applications used to demonstrate how the MCU bootloader can load and launch user applications." toolchain="mcuxpresso" category="bootloader_examples/demo_apps" path="boards/frdmkl28z/bootloader_examples/demo_apps/led_demo_freedom_a000">
          <external path="boards/frdmkl28z/bootloader_examples/demo_apps/led_demo_freedom_a000" type="xml">
            <files mask="led_demo_freedom_a000.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freedom_bootloader" name="freedom_bootloader" brief="The freedom_bootloader is a bootloader that executes from target flash memory on the Freedom platform. The bootloader is a configurable flash programming utility that operates over a serial connection on MCU devices. It enables quick and easy programming of MCU devices through the entire product life cycle, including application development, final product manufacturing, and more.Host-side command line and GUI tools are available to communicate with the bootloader. Users can utilize host tools to upload and/or download application code via the bootloader." toolchain="mcuxpresso" category="bootloader_examples" path="boards/frdmkl28z/bootloader_examples/freedom_bootloader">
          <external path="boards/frdmkl28z/bootloader_examples/freedom_bootloader" type="xml">
            <files mask="freedom_bootloader.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/hello_world">
          <external path="boards/frdmkl28z/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_hello_world_virtual_com" name="hello_world_virtual_com" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/hello_world_virtual_com">
          <external path="boards/frdmkl28z/demo_apps/hello_world_virtual_com" type="xml">
            <files mask="hello_world_virtual_com.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="mcuxpresso" category="driver_examples/trng" path="boards/frdmkl28z/driver_examples/trng/random">
          <external path="boards/frdmkl28z/driver_examples/trng/random" type="xml">
            <files mask="trng_random.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpit" name="lpit" brief="The LPIT project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/lpit">
          <external path="boards/frdmkl28z/driver_examples/lpit" type="xml">
            <files mask="lpit.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/rtc">
          <external path="boards/frdmkl28z/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_mmdvsq" name="mmdvsq" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/mmdvsq">
          <external path="boards/frdmkl28z/driver_examples/mmdvsq" type="xml">
            <files mask="mmdvsq.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/wdog32">
          <external path="boards/frdmkl28z/driver_examples/wdog32" type="xml">
            <files mask="wdog32.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_hello">
          <external path="boards/frdmkl28z/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_event">
          <external path="boards/frdmkl28z/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_generic">
          <external path="boards/frdmkl28z/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_lpuart">
          <external path="boards/frdmkl28z/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_queue">
          <external path="boards/frdmkl28z/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_sem">
          <external path="boards/frdmkl28z/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer’s callback SwTimerCallback isperiodically executed and text “Tick.” is printed to terminal." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_swtimer">
          <external path="boards/frdmkl28z/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_mutex">
          <external path="boards/frdmkl28z/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_tickless">
          <external path="boards/frdmkl28z/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_lpspi" name="freertos_lpspi" brief="The lpspi_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_lpspi">
          <external path="boards/frdmkl28z/rtos_examples/freertos_lpspi" type="xml">
            <files mask="freertos_lpspi.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_scg" name="scg" brief="The SCG example shows how to use SCG driver: 1. How to setup the SCG clock source. 2. How to use SCG clock while power mode switch. 3. How to use SCG APIs to get clock frequency.This example prints the clock frequency through the terminal using the SDK driver." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/scg">
          <external path="boards/frdmkl28z/driver_examples/scg" type="xml">
            <files mask="scg.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="mcuxpresso" category="driver_examples/gpio" path="boards/frdmkl28z/driver_examples/gpio/led_output">
          <external path="boards/frdmkl28z/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="mcuxpresso" category="driver_examples/gpio" path="boards/frdmkl28z/driver_examples/gpio/input_interrupt">
          <external path="boards/frdmkl28z/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/pwm_twochannel">
          <external path="boards/frdmkl28z/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/simple_pwm">
          <external path="boards/frdmkl28z/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/timer">
          <external path="boards/frdmkl28z/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/combine_pwm">
          <external path="boards/frdmkl28z/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/dual_edge_capture">
          <external path="boards/frdmkl28z/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/output_compare">
          <external path="boards/frdmkl28z/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="mcuxpresso" category="driver_examples/tpm" path="boards/frdmkl28z/driver_examples/tpm/input_capture">
          <external path="boards/frdmkl28z/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/uart/polling_transfer">
          <external path="boards/frdmkl28z/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/uart/interrupt_transfer">
          <external path="boards/frdmkl28z/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/uart/int_rb_transfer">
          <external path="boards/frdmkl28z/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/uart/edma_transfer">
          <external path="boards/frdmkl28z/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_spi_int_lpspi_transfer_master" name="flexio_spi_int_lpspi_transfer_master" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/spi/int_lpspi_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/flexio/spi/int_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_spi_int_lpspi_transfer_slave" name="flexio_spi_int_lpspi_transfer_slave" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/spi/int_lpspi_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/flexio/spi/int_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_spi_edma_lpspi_transfer_master" name="flexio_spi_edma_lpspi_transfer_master" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/spi/edma_lpspi_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/flexio/spi/edma_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_spi_edma_lpspi_transfer_slave" name="flexio_spi_edma_lpspi_transfer_slave" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/spi/edma_lpspi_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/flexio/spi/edma_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/power_mode_switch">
          <external path="boards/frdmkl28z/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/power_manager">
          <external path="boards/frdmkl28z/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="mcuxpresso" category="driver_examples/adc16" path="boards/frdmkl28z/driver_examples/adc16/interrupt">
          <external path="boards/frdmkl28z/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="mcuxpresso" category="driver_examples/adc16" path="boards/frdmkl28z/driver_examples/adc16/polling">
          <external path="boards/frdmkl28z/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="mcuxpresso" category="driver_examples/adc16" path="boards/frdmkl28z/driver_examples/adc16/continuous_edma">
          <external path="boards/frdmkl28z/driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="mcuxpresso" category="driver_examples/dac" path="boards/frdmkl28z/driver_examples/dac/basic">
          <external path="boards/frdmkl28z/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="mcuxpresso" category="driver_examples/dac" path="boards/frdmkl28z/driver_examples/dac/buffer_interrupt">
          <external path="boards/frdmkl28z/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dac_continuous_lptmr_edma" name="dac_continuous_lptmr_edma" brief="The demo shows how to use the LPTMR to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. LPTMR is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by LPTMR and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.While read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="mcuxpresso" category="driver_examples/dac" path="boards/frdmkl28z/driver_examples/dac/continuous_lptmr_edma">
          <external path="boards/frdmkl28z/driver_examples/dac/continuous_lptmr_edma" type="xml">
            <files mask="dac_continuous_lptmr_edma.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/lptmr">
          <external path="boards/frdmkl28z/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tstmr" name="tstmr" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/tstmr">
          <external path="boards/frdmkl28z/driver_examples/tstmr" type="xml">
            <files mask="tstmr.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/crc">
          <external path="boards/frdmkl28z/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/frdmkl28z/driver_examples/lpuart/interrupt">
          <external path="boards/frdmkl28z/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/frdmkl28z/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmkl28z/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/frdmkl28z/driver_examples/lpuart/polling">
          <external path="boards/frdmkl28z/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/frdmkl28z/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/frdmkl28z/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="mcuxpresso" category="driver_examples/lpuart" path="boards/frdmkl28z/driver_examples/lpuart/edma_transfer">
          <external path="boards/frdmkl28z/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_interrupt" name="lpspi_interrupt" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/interrupt">
          <external path="boards/frdmkl28z/driver_examples/lpspi/interrupt" type="xml">
            <files mask="lpspi_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_i2c_interrupt_lpi2c_transfer" name="flexio_i2c_interrupt_lpi2c_transfer" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="mcuxpresso" category="driver_examples/flexio" path="boards/frdmkl28z/driver_examples/flexio/i2c/interrupt_lpi2c_transfer">
          <external path="boards/frdmkl28z/driver_examples/flexio/i2c/interrupt_lpi2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_freertos_lpi2c" name="freertos_lpi2c" brief="The LPI2C Example project is a demonstration program that uses the KSDK software to manipulate the Low Power Inter-Integrated Circuit.The example uses two instances of LPI2C, one in configured as master and the other one as slave.The LPI2C master sends data to LPI2C slave. The slave will check the data it receives and shows the log." toolchain="mcuxpresso" category="rtos_examples" path="boards/frdmkl28z/rtos_examples/freertos_lpi2c">
          <external path="boards/frdmkl28z/rtos_examples/freertos_lpi2c" type="xml">
            <files mask="freertos_lpi2c.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/rtc_func">
          <external path="boards/frdmkl28z/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/adc16_low_power">
          <external path="boards/frdmkl28z/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/dac_adc">
          <external path="boards/frdmkl28z/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" category="driver_examples/edma" path="boards/frdmkl28z/driver_examples/edma/memory_to_memory">
          <external path="boards/frdmkl28z/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="mcuxpresso" category="driver_examples/edma" path="boards/frdmkl28z/driver_examples/edma/scatter_gather">
          <external path="boards/frdmkl28z/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="mcuxpresso" category="driver_examples/flash" path="boards/frdmkl28z/driver_examples/flash/pflash">
          <external path="boards/frdmkl28z/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_mmcau" name="mmcau" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="mcuxpresso" category="mmcau_examples" path="boards/frdmkl28z/mmcau_examples/mmcau_api">
          <external path="boards/frdmkl28z/mmcau_examples/mmcau_api" type="xml">
            <files mask="mmcau.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="mcuxpresso" category="driver_examples/cmp" path="boards/frdmkl28z/driver_examples/cmp/polling">
          <external path="boards/frdmkl28z/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="mcuxpresso" category="driver_examples/cmp" path="boards/frdmkl28z/driver_examples/cmp/interrupt">
          <external path="boards/frdmkl28z/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_bubble" name="bubble" brief="The EEPROM flash demo application demonstrates the use of the LPI2C IP and driver to read and write data from anexternal EEPROM device." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/bubble">
          <external path="boards/frdmkl28z/demo_apps/bubble" type="xml">
            <files mask="bubble.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_interrupt" name="lpi2c_interrupt" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/interrupt">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/interrupt" type="xml">
            <files mask="lpi2c_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/ecompass">
          <external path="boards/frdmkl28z/demo_apps/ecompass" type="xml">
            <files mask="ecompass.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tsi_v4_normal_mode" name="tsi_v4_normal_mode" brief="The tsi_v4_normal example shows how to use TSI_V4 driver in normal modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method." toolchain="mcuxpresso" category="driver_examples/tsi_v4" path="boards/frdmkl28z/driver_examples/tsi_v4/normal">
          <external path="boards/frdmkl28z/driver_examples/tsi_v4/normal" type="xml">
            <files mask="tsi_v4_normal_mode.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_tsi_v4_low_power_mode" name="tsi_v4_low_power_mode" brief="The tsi_v4_low_power example shows how to use TSI_V4 driver in low power modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Hardware-Trigger scan using interrupt method to wakeup from low power   modes through pad touch;3. Note: you can select which low power mode you want to enter into." toolchain="mcuxpresso" category="driver_examples/tsi_v4" path="boards/frdmkl28z/driver_examples/tsi_v4/low_power">
          <external path="boards/frdmkl28z/driver_examples/tsi_v4/low_power" type="xml">
            <files mask="tsi_v4_low_power_mode.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="mcuxpresso" category="driver_examples" path="boards/frdmkl28z/driver_examples/flexio/pwm">
          <external path="boards/frdmkl28z/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" category="cmsis_driver_examples/lpuart" path="boards/frdmkl28z/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="mcuxpresso" category="cmsis_driver_examples/lpuart" path="boards/frdmkl28z/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_qca_demo" name="qca_demo" brief="The qca_demo example provides basic commands to show the functionality of qca_wifi stack.The default IP configuration is &quot;addr: 192.168.1.10 mask: 255.255.255.0 gw: 192.168.1.1&quot;.To obtain a valid IP configuration from DHCP server, press 'd' after WiFi connection is established." toolchain="mcuxpresso" category="wifi_qca_examples" path="boards/frdmkl28z/wifi_qca_examples/qca_demo">
          <external path="boards/frdmkl28z/wifi_qca_examples/qca_demo" type="xml">
            <files mask="qca_demo.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_qca_throughput" name="qca_throughput" brief="The qca_throughput demo tests transfer throughput." toolchain="mcuxpresso" category="wifi_qca_examples" path="boards/frdmkl28z/wifi_qca_examples/qca_throughput">
          <external path="boards/frdmkl28z/wifi_qca_examples/qca_throughput" type="xml">
            <files mask="qca_throughput.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_qca_fwupdate" name="qca_fwupdate" brief="No special requirements/n/n" toolchain="mcuxpresso" category="wifi_qca_examples" path="boards/frdmkl28z/wifi_qca_examples/qca_fwupdate">
          <external path="boards/frdmkl28z/wifi_qca_examples/qca_fwupdate" type="xml">
            <files mask="qca_fwupdate.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/shell">
          <external path="boards/frdmkl28z/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_polling_b2b_transfer_master" name="lpi2c_polling_b2b_transfer_master" brief="The lpi2c_polling_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/polling_b2b_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/polling_b2b_transfer/master" type="xml">
            <files mask="lpi2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpi2c_polling_b2b_transfer_slave" name="lpi2c_polling_b2b_transfer_slave" brief="The lpi2c_polling_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="driver_examples/lpi2c" path="boards/frdmkl28z/driver_examples/lpi2c/polling_b2b_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/lpi2c/polling_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpi2c_int_b2b_transfer_master" name="cmsis_lpi2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/int_b2b_transfer/master">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpi2c_int_b2b_transfer_slave" name="cmsis_lpi2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpi2c_edma_b2b_transfer_master" name="cmsis_lpi2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpi2c_edma_b2b_transfer_slave" name="cmsis_lpi2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="mcuxpresso" category="cmsis_driver_examples/lpi2c" path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b/master">
          <external path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="boards/frdmkl28z/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="mcuxpresso" category="driver_examples/lpspi" path="boards/frdmkl28z/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="boards/frdmkl28z/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpspi_int_b2b_transfer_master" name="cmsis_lpspi_int_b2b_transfer_master" brief="The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/frdmkl28z/cmsis_driver_examples/lpspi/int_b2b_transfer/master">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpspi_int_b2b_transfer_slave" name="cmsis_lpspi_int_b2b_transfer_slave" brief="The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/frdmkl28z/cmsis_driver_examples/lpspi/int_b2b_transfer/slave">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpspi_edma_b2b_transfer_master" name="cmsis_lpspi_edma_b2b_transfer_master" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/frdmkl28z/cmsis_driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_cmsis_lpspi_edma_b2b_transfer_slave" name="cmsis_lpspi_edma_b2b_transfer_slave" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="mcuxpresso" category="cmsis_driver_examples/lpspi" path="boards/frdmkl28z/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="boards/frdmkl28z/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="mcuxpresso" category="demo_apps" path="boards/frdmkl28z/demo_apps/led_blinky">
          <external path="boards/frdmkl28z/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_led_control_bm" name="led_control_bm" brief="The LED demo is used to demonstrate how to use new components. The main function of the demo is to control the led by using the shell or button. For shell, please enter /&quot;help/&quot; to get the help information firstly. Turn on LED by using command /&quot;led on/&quot;. And turn off LED by using command /&quot;led off/&quot;. For button, please press the corresponding button to control LED. Turn on LED when the button is pressed with long press or double click event. And turn off LED when the button is pressed with short press or one click event." toolchain="mcuxpresso" category="component_examples" path="boards/frdmkl28z/component_examples/led_control/bm">
          <external path="boards/frdmkl28z/component_examples/led_control/bm" type="xml">
            <files mask="led_control_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl28z_led_control_freertos" name="led_control_freertos" brief="The LED demo is used to demonstrate how to use new components. The main function of the demo is to control the led by using the shell or button. For shell, please enter /&quot;help/&quot; to get the help information firstly. Turn on LED by using command /&quot;led on/&quot;. And turn off LED by using command /&quot;led off/&quot;. For button, please press the corresponding button to control LED. Turn on LED when the button is pressed with long press or double click event. And turn off LED when the button is pressed with short press or one click event." toolchain="mcuxpresso" category="component_examples" path="boards/frdmkl28z/component_examples/led_control/freertos">
          <external path="boards/frdmkl28z/component_examples/led_control/freertos" type="xml">
            <files mask="led_control_freertos.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MKL28Z512xxx7" name="MKL28Z7" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MKL28Z512xxx7">
      <description>KL28: Kinetis® KL28-72/96 MHz, 512KB Flash, USB, Ultra-Low-Power Microcontrollers (MCUs) based on ARM® Cortex®-M0+ Core</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="USB_KHCI_Controller_number" value="1"/>
        <metadata key="html">
          <specific>
            <content>The Kinetis® KL28 provides the industry the fastest CM0+ MCU, the biggest memory size for CM0+ based MCU, and also provides advanced smart peripherals such as LPI2C, LPSPI, EVSIM and Parallel FlexIO. KL28 will meet IoT application’s requirement on performance, scalability and power efficiency.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
        <metadata key="vendor.device.type" value="Kinetis"/>
        <metadata key="vendor.device.family" value="KL2x"/>
      </metadataSet>
      <core id="core0_MKL28Z512xxx7" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKL28Z512xxx7" name="PROGRAM_FLASH" addr="00000000" size="00080000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKL28Z512xxx7" name="SRAM" addr="1fff8000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_MKL28Z512xxx7" name="USB_RAM" addr="40100000" size="00000800" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="512" ram_size_kb="128"/>
      <package id="MKL28Z512VDC7" name="MKL28Z512VDC7"/>
      <package id="MKL28Z512VLL7" name="MKL28Z512VLL7"/>
      <evaluation_boards>
        <evaluation_board name="frdmkl28z"/>
        <evaluation_board name="twrkl28z72m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKL28Z512xxx7" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKL28Z512xxx7" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKL28Z512xxx7" name="internal.connect.script" value="kinetisconnect.scp"/>
            <params id="internal.Resethandling.debug.MKL28Z512xxx7" name="internal.resethandling" value="VECTRESET"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKL28Z512xxx7">
              <driverBinary path="devices/MKL28Z7/mcuxpresso" type="binary">
                <files mask="FTFA_2K_KL28.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="RTE_Device.MKL28Z7" name="RTE_Device" version="1.0.0" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MKL28Z7/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_edma.MKL28Z7" name="sai_edma" brief="SAI Driver" version="2.1.5" full_name="SAI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.sai.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_edma.MKL28Z7" name="i2c_edma" brief="LPI2C Driver" version="2.1.6" full_name="LPI2C Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpi2c.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_edma.MKL28Z7" name="lpspi_edma" brief="LPSPI Driver" version="2.0.2" full_name="LPSPI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpspi.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_edma.MKL28Z7" name="lpuart_edma" brief="LPUART Driver" version="2.2.6" full_name="LPUART Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpuart.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MKL28Z7" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="utilities"/>
    <component id="platform.utilities.assert.MKL28Z7" name="assert" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.serial_manager.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 utility.debug_console.MKL28Z7" user_visible="true" type="utilities">
      <source path="devices/MKL28Z7/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="middleware.baremetal.MKL28Z7" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MKL28Z512xxx7" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="tools.MKL28Z7" name="cmake_toolchain" version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="src" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="docs.images.MKL28Z7" name="images" version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="documentation">
      <source path="docs/images" target_path="src" type="image">
        <files mask="device.jpg"/>
        <files mask="FRDM-KL28Z.gif"/>
        <files mask="TWR-KL28Z72M.gif"/>
      </source>
    </component>
    <component id="docs.MKL28Z7.MKL28Z7" name="MKL28Z7" version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="documentation">
      <source path="docs" target_path="src" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes_MKL28Z7.pdf"/>
      </source>
    </component>
    <component id="platform.Include_common.MKL28Z7" name="CMSIS_Include_common" version="5.1.1" devices="MKL28Z512xxx7" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm0plus.MKL28Z7" name="CMSIS_Include_core_cm0plus" version="5.1.1" devices="MKL28Z512xxx7" dependency="platform.Include_common.MKL28Z7" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm0plus.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MKL28Z7" name="CMSIS" version="5.1.1" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKL28Z7 platform.Include_common.MKL28Z7" user_visible="true" type="CMSIS">
      <source path="CMSIS" target_path="src" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source path="CMSIS/Include" target_path="src" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm3.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm33.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm0.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="core_cm7.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="core_sc000.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm4.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.MKL28Z7" name="CMSIS_DSP_Lib" version="5.1.1" devices="MKL28Z512xxx7" user_visible="false" type="CMSIS">
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example" target_path="src" type="src">
        <files mask="arm_class_marks_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example" target_path="src" type="configuration">
        <files mask="arm_class_marks_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example" target_path="src" type="project">
        <files mask="arm_class_marks_example.uvoptx"/>
        <files mask="arm_class_marks_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_class_marks_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example" target_path="src" type="src">
        <files mask="arm_convolution_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example" target_path="src" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example" target_path="src" type="configuration">
        <files mask="arm_convolution_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example" target_path="src" type="project">
        <files mask="arm_convolution_example.uvoptx"/>
        <files mask="arm_convolution_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_convolution_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example" target_path="src" type="src">
        <files mask="arm_dotproduct_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example" target_path="src" type="configuration">
        <files mask="arm_dotproduct_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example" target_path="src" type="project">
        <files mask="arm_dotproduct_example.uvoptx"/>
        <files mask="arm_dotproduct_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_dotproduct_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example" target_path="src" type="src">
        <files mask="arm_fft_bin_data.c"/>
        <files mask="arm_fft_bin_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example" target_path="src" type="configuration">
        <files mask="arm_fft_bin_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example" target_path="src" type="project">
        <files mask="arm_fft_bin_example.uvoptx"/>
        <files mask="arm_fft_bin_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fft_bin_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example" target_path="src" type="src">
        <files mask="arm_fir_example_f32.c"/>
        <files mask="arm_fir_data.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example" target_path="src" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example" target_path="src" type="configuration">
        <files mask="arm_fir_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example" target_path="src" type="project">
        <files mask="arm_fir_example.uvoptx"/>
        <files mask="arm_fir_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_fir_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example" target_path="src" type="src">
        <files mask="arm_graphic_equalizer_data.c"/>
        <files mask="arm_graphic_equalizer_example_q31.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example" target_path="src" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example" target_path="src" type="configuration">
        <files mask="arm_graphic_equalizer_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example" target_path="src" type="project">
        <files mask="arm_graphic_equalizer_example.uvoptx"/>
        <files mask="arm_graphic_equalizer_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_graphic_equalizer_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example" target_path="src" type="src">
        <files mask="arm_linear_interp_data.c"/>
        <files mask="math_helper.c"/>
        <files mask="arm_linear_interp_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example" target_path="src" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example" target_path="src" type="configuration">
        <files mask="arm_linear_interp_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example" target_path="src" type="project">
        <files mask="arm_linear_interp_example.uvoptx"/>
        <files mask="arm_linear_interp_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_linear_interp_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example" target_path="src" type="src">
        <files mask="arm_matrix_example_f32.c"/>
        <files mask="math_helper.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example" target_path="src" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example" target_path="src" type="configuration">
        <files mask="arm_matrix_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example" target_path="src" type="project">
        <files mask="arm_matrix_example.uvoptx"/>
        <files mask="arm_matrix_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_matrix_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example" target_path="src" type="src">
        <files mask="arm_signal_converge_example_f32.c"/>
        <files mask="math_helper.c"/>
        <files mask="arm_signal_converge_data.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example" target_path="src" type="c_include">
        <files mask="math_helper.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example" target_path="src" type="configuration">
        <files mask="arm_signal_converge_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example" target_path="src" type="project">
        <files mask="arm_signal_converge_example.uvoptx"/>
        <files mask="arm_signal_converge_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_signal_converge_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example" target_path="src" type="src">
        <files mask="arm_sin_cos_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example" target_path="src" type="configuration">
        <files mask="arm_sin_cos_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example" target_path="src" type="project">
        <files mask="arm_sin_cos_example.uvoptx"/>
        <files mask="arm_sin_cos_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_sin_cos_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example" target_path="src" type="src">
        <files mask="arm_variance_example_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example" target_path="src" type="configuration">
        <files mask="arm_variance_example.ini"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example" target_path="src" type="doc">
        <files mask="Abstract.txt"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example" target_path="src" type="project">
        <files mask="arm_variance_example.uvoptx"/>
        <files mask="arm_variance_example.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE" target_path="src" type="c_include">
        <files mask="RTE_Components.h"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" target_path="src" type="src">
        <files mask="system_ARMCM0.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM0" target_path="src" type="asm_include">
        <files mask="startup_ARMCM0.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" target_path="src" type="src">
        <files mask="system_ARMCM3.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM3" target_path="src" type="asm_include">
        <files mask="startup_ARMCM3.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" target_path="src" type="src">
        <files mask="system_ARMCM4.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM4_FP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM4.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" target_path="src" type="src">
        <files mask="system_ARMCM7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Examples/ARM/arm_variance_example/RTE/Device/ARMCM7_SP" target_path="src" type="asm_include">
        <files mask="startup_ARMCM7.s"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/ARM" target_path="src" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/ARM" target_path="src" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/BasicMathFunctions" target_path="src" type="src">
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_sub_q7.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_mult_q7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/CommonTables" target_path="src" type="src">
        <files mask="arm_const_structs.c"/>
        <files mask="arm_common_tables.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/ComplexMathFunctions" target_path="src" type="src">
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/ControllerFunctions" target_path="src" type="src">
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_sin_cos_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/FastMathFunctions" target_path="src" type="src">
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_cos_q31.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/FilteringFunctions" target_path="src" type="src">
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_lms_q31.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/GCC" target_path="src" type="script">
        <files mask="arm_cortexM_math_Build.bat"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/GCC" target_path="src" type="project">
        <files mask="arm_cortexM_math.uvoptx"/>
        <files mask="arm_cortexM_math.uvprojx"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/MatrixFunctions" target_path="src" type="src">
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_trans_q31.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q31.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/StatisticsFunctions" target_path="src" type="src">
        <files mask="arm_var_q31.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_power_q31.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/SupportFunctions" target_path="src" type="src">
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q7_to_q31.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/TransformFunctions" target_path="src" type="src">
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_q31.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_rfft_init_f32.c"/>
      </source>
      <source path="CMSIS/DSP_Lib/Source/TransformFunctions" target_path="src" type="asm_include">
        <files mask="arm_bitreversal2.S"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" version="5.1.1" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="src" type="src">
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_SAI.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" name="Common" version="5.1.1" devices="MKL28Z512xxx7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKL28Z7" name="CAN" version="1.2.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL28Z7" name="Ethernet" version="2.1.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKL28Z7" name="Ethernet_MAC" version="2.1.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKL28Z7" name="Ethernet_PHY" version="2.1.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKL28Z7" name="Flash" version="2.1.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL28Z7" name="I2C" version="2.3.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKL28Z7" name="MCI" version="2.3.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKL28Z7" name="NAND" version="2.3.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKL28Z7" name="SAI" version="1.1.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL28Z7" name="SPI" version="2.2.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL28Z7" name="USART" version="2.3.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL28Z7" name="USB" version="2.2.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKL28Z7" name="USB_Device" version="2.2.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKL28Z7" name="USB_Host" version="2.2.0" devices="MKL28Z512xxx7" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL28Z7" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.arm_cortexM0l_math.MKL28Z7" name="arm_cortexM0l_math" version="1.5.2" devices="MKL28Z512xxx7" user_visible="true" type="CMSIS_driver">
      <source toolchain="mcuxpresso" path="CMSIS/Lib/GCC" target_path="libs" type="lib">
        <files mask="libarm_cortexM0l_math.a"/>
      </source>
    </component>
    <component id="platform.CMSIS_DSP_Lib.arm_cortexM0b_math.MKL28Z7" name="arm_cortexM0b_math" version="1.5.2" devices="MKL28Z512xxx7" user_visible="true" type="CMSIS_driver"/>
    <component id="middleware.template_application.freertos.MKL28Z7" name="freertos" brief="FreeRTOS template application" version="10.0.1" full_name="FreeRTOS template" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="project_template">
      <source path="rtos/template_application/ARM_CM0" target_path="source" type="c_include" device_cores="core0_MKL28Z512xxx7">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
      </source>
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_4.c"/>
      </source>
    </component>
    <component id="middleware.freertos.MKL28Z7" name="Amazon-FreeRTOS" brief="Amazon FreeRTOS, Real Time Operating System" version="10.0.1" full_name="Amazon-FreeRTOS Kernel" devices="MKL28Z512xxx7" dependency="middleware.template_application.freertos.MKL28Z7" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <source path="rtos/amazon-freertos" target_path="amazon-freertos/license" type="other">
        <files mask="LICENSE"/>
      </source>
      <source path="rtos/amazon-freertos/lib/include" target_path="amazon-freertos/include" type="c_include">
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="message_buffer.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source path="rtos/amazon-freertos/lib/include/private" target_path="amazon-freertos/include" type="c_include">
        <files mask="deprecated_definitions.h"/>
        <files mask="list.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="stack_macros.h"/>
      </source>
      <source path="rtos/amazon-freertos/lib/FreeRTOS" target_path="amazon-freertos/FreeRTOS" type="src">
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable" target_path="amazon-freertos/FreeRTOS/portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="mcuxpresso" path="rtos/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CM0" target_path="amazon-freertos/FreeRTOS/portable" type="src" device_cores="core0_MKL28Z512xxx7">
        <files mask="fsl_tickless_systick.c"/>
        <files mask="port.c"/>
      </source>
      <source toolchain="mcuxpresso" path="rtos/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CM0" target_path="amazon-freertos/FreeRTOS/portable" type="c_include" device_cores="core0_MKL28Z512xxx7">
        <files mask="fsl_tickless_generic.h"/>
        <files mask="portmacro.h"/>
      </source>
    </component>
    <component id="middleware.freertos.heap.heap_1.MKL28Z7" name="heap_1" brief="FreeRTOS heap_1 allocator" version="10.0.1" full_name="FreeRTOS_heap_1" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos.heap.heap_2.MKL28Z7" name="heap_2" brief="FreeRTOS heap_2 allocator" version="10.0.1" full_name="FreeRTOS_heap_2" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos.heap.heap_3.MKL28Z7" name="heap_3" brief="FreeRTOS heap_3 allocator" version="10.0.1" full_name="FreeRTOS_heap_3" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 platform.utilities.misc_utilities.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos.heap.heap_4.MKL28Z7" name="heap_4" brief="FreeRTOS heap_4 allocator" version="10.0.1" full_name="FreeRTOS_heap_4" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_4.c"/>
      </source>
    </component>
    <component id="middleware.freertos.heap.heap_5.MKL28Z7" name="heap_5" brief="FreeRTOS heap_5 allocator" version="10.0.1" full_name="FreeRTOS_heap_5" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/MemMang" target_path="amazon-freertos/FreeRTOS/portable" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos.freertos_tickless_lptmr.MKL28Z7" name="freertos_tickless_lptmr" brief="FreeRTOS lptmr tickless" version="10.0.1" full_name="FreeRTOS_lptmr_tickless" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lptmr.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/low_power_tickless" target_path="amazon-freertos/FreeRTOS/portable" type="src" device_cores="core0_MKL28Z512xxx7">
        <files mask="fsl_tickless_lptmr.c"/>
      </source>
    </component>
    <component id="middleware.freertos.freertos_tickless_lpit.MKL28Z7" name="freertos_tickless_lpit" brief="FreeRTOS lpit tickless" version="10.0.1" full_name="FreeRTOS_lpit_tickless" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lpit.MKL28Z7" category="Operating System/FreeRTOS Operating System" user_visible="true" type="other">
      <source path="rtos/amazon-freertos/lib/FreeRTOS/portable/low_power_tickless" target_path="amazon-freertos/FreeRTOS/portable" type="src" device_cores="core0_MKL28Z512xxx7">
        <files mask="fsl_tickless_lpit.c"/>
      </source>
    </component>
    <component id="middleware.usb.host.MKL28Z7" name="common driver" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_hci.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_framework.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_hci.c"/>
        <files mask="usb_host_devices.c"/>
        <files mask="usb_host_framework.c"/>
      </source>
    </component>
    <component id="middleware.usb.host_controller_khci.MKL28Z7" name="KHCI driver(FS)" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_khci.c"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host_khci.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.freertos.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_freertos.h"/>
      </source>
      <source condition="middleware.freertos.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_freertos.c"/>
      </source>
    </component>
    <component id="middleware.usb.host_audio.MKL28Z7" name="Audio class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_audio.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_audio.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_cdc.MKL28Z7" name="CDC class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_cdc.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_cdc.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_cdc_rndis.MKL28Z7" name="CDC RNDIS class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_cdc_rndis.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_cdc_rndis.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_hid.MKL28Z7" name="Hid class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_hid.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_hid.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_hub.MKL28Z7" name="Hub class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_hub.c"/>
        <files mask="usb_host_hub_app.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_hub.h"/>
        <files mask="usb_host_hub_app.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_msd.MKL28Z7" name="Mass Storage class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_msd.c"/>
        <files mask="usb_host_msd_ufi.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_msd.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_phdc.MKL28Z7" name="PHDC class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_phdc.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_phdc.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_printer.MKL28Z7" name="Printer class" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_printer.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_printer.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_config_template.MKL28Z7" name="USB host config template" brief="USB host config template" version="2.1.0" full_name="USB host config template" devices="MKL28Z512xxx7" category="Board Support/SDK Project Template" user_visible="false" type="project_template">
      <source path="middleware/usb/templates/config" target_path="source/generated" type="c_include">
        <files mask="usb_host_config.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_stack.MKL28Z7" name="USB host" brief="USB host stack" version="2.1.0" full_name="USB host stack" devices="MKL28Z512xxx7" dependency="middleware.usb.host_config_template.MKL28Z7 middleware.usb.stack_common.MKL28Z7" user_visible="true" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_audio.c"/>
        <files mask="usb_host_cdc.c"/>
        <files mask="usb_host_hid.c"/>
        <files mask="usb_host_hub.c"/>
        <files mask="usb_host_hub_app.c"/>
        <files mask="usb_host_msd.c"/>
        <files mask="usb_host_msd_ufi.c"/>
        <files mask="usb_host_phdc.c"/>
        <files mask="usb_host_printer.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_audio.h"/>
        <files mask="usb_host_cdc.h"/>
        <files mask="usb_host_hid.h"/>
        <files mask="usb_host_hub.h"/>
        <files mask="usb_host_hub_app.h"/>
        <files mask="usb_host_msd.h"/>
        <files mask="usb_host_phdc.h"/>
        <files mask="usb_host_printer.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_framework.h"/>
        <files mask="usb_host_hci.h"/>
        <files mask="usb_host_ehci.h"/>
        <files mask="usb_host_khci.h"/>
        <files mask="usb_host_ohci.h"/>
        <files mask="usb_host_ip3516hs.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_devices.c"/>
        <files mask="usb_host_framework.c"/>
        <files mask="usb_host_hci.c"/>
        <files mask="usb_host_ehci.c"/>
        <files mask="usb_host_khci.c"/>
        <files mask="usb_host_ohci.c"/>
        <files mask="usb_host_ip3516hs.c"/>
      </source>
    </component>
    <component id="middleware.usb.device.MKL28Z7" name="common driver" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_controller_khci.MKL28Z7" name="KHCI driver(FS)" version="1.0.0" full_name="USB stack" devices="MKL28Z512xxx7" dependency="middleware.usb.device.MKL28Z7" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="src">
        <files mask="usb_device_khci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="c_include">
        <files mask="usb_device_khci.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.freertos.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_freertos.h"/>
      </source>
      <source condition="middleware.freertos.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_freertos.c"/>
      </source>
    </component>
    <component id="middleware.usb.stack_common.MKL28Z7" name="USB common" brief="USB common" version="2.1.0" full_name="USB common" devices="MKL28Z512xxx7" user_visible="true" type="middleware">
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="src">
        <files mask="usb_phy.c"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="c_include">
        <files mask="usb_phy.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
      <source condition="middleware.freertos.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_freertos.h"/>
      </source>
      <source condition="middleware.freertos.MKL28Z7" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_freertos.c"/>
      </source>
    </component>
    <component id="middleware.usb.device_config_template.MKL28Z7" name="USB device config template" brief="USB device config template" version="2.1.0" full_name="USB device config template" devices="MKL28Z512xxx7" category="Board Support/SDK Project Template" user_visible="false" type="project_template">
      <source path="middleware/usb/templates/config" target_path="source/generated" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_stack.MKL28Z7" name="USB device" brief="USB device stack" version="2.1.0" full_name="USB device stack" devices="MKL28Z512xxx7" dependency="middleware.usb.device_config_template.MKL28Z7 middleware.usb.stack_common.MKL28Z7" user_visible="true" type="middleware">
      <source path="middleware/usb/templates/device/class" target_path="usb/device/class" type="src">
        <files mask="usb_device_class.c"/>
        <files mask="usb_device_audio.c"/>
        <files mask="usb_device_ccid.c"/>
        <files mask="usb_device_cdc_acm.c"/>
        <files mask="usb_device_cdc_rndis.c"/>
        <files mask="usb_device_hid.c"/>
        <files mask="usb_device_msc.c"/>
        <files mask="usb_device_msc_ufi.c"/>
        <files mask="usb_device_phdc.c"/>
        <files mask="usb_device_video.c"/>
        <files mask="usb_device_printer.c"/>
      </source>
      <source path="middleware/usb/templates/device/class" target_path="usb/device/class" type="c_include">
        <files mask="usb_device_class.h"/>
        <files mask="usb_device_audio.h"/>
        <files mask="usb_device_ccid.h"/>
        <files mask="usb_device_cdc_acm.h"/>
        <files mask="usb_device_cdc_rndis.h"/>
        <files mask="usb_device_hid.h"/>
        <files mask="usb_device_msc.h"/>
        <files mask="usb_device_msc_ufi.h"/>
        <files mask="usb_device_phdc.h"/>
        <files mask="usb_device_video.h"/>
        <files mask="usb_device_printer.h"/>
      </source>
      <source path="middleware/usb/templates/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_ch9.c"/>
      </source>
      <source path="middleware/usb/templates/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_ch9.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="src">
        <files mask="usb_device_ehci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="c_include">
        <files mask="usb_device_ehci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="src">
        <files mask="usb_device_khci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="c_include">
        <files mask="usb_device_khci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="src">
        <files mask="usb_device_lpcip3511.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="c_include">
        <files mask="usb_device_lpcip3511.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MKL28Z7" name="notifier" version="1.0.0" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="utilities">
      <source path="devices/MKL28Z7/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MKL28Z7/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MKL28Z7" name="shell" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.lists.MKL28Z7 component.serial_manager.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 utility.debug_console.MKL28Z7" user_visible="true" type="utilities">
      <source path="devices/MKL28Z7/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MKL28Z7/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
    <component id="driver.sgtl5000.MKL28Z7" name="sgtl5000" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/codec/sgtl5000" target_path="codec" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
      <source path="components/codec/sgtl5000" target_path="codec" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <source path="components/codec" target_path="codec" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source path="components/codec" target_path="codec" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
    </component>
    <component id="middleware.template_application.mbedtls.MKL28Z7" name="mbedtls" brief="mbedtls template" version="2.12.0" full_name="mbedtls template application" devices="MKL28Z512xxx7" dependency="middleware.mbedtls.MKL28Z7" category="Security/mbedTLS library" user_visible="true" type="middleware"/>
    <component id="middleware.mbedtls.MKL28Z7" name="mbedtls" brief="mbedTLS library" version="2.12.0" devices="MKL28Z512xxx7" dependency="middleware.template_application.mbedtls.MKL28Z7" category="Security/mbedTLS library" user_visible="true" type="middleware">
      <source path="middleware/mbedtls/include/mbedtls" target_path="mbedtls/include/mbedtls" type="c_include">
        <files mask="aes.h"/>
        <files mask="aesni.h"/>
        <files mask="arc4.h"/>
        <files mask="aria.h"/>
        <files mask="asn1.h"/>
        <files mask="asn1write.h"/>
        <files mask="base64.h"/>
        <files mask="bignum.h"/>
        <files mask="blowfish.h"/>
        <files mask="bn_mul.h"/>
        <files mask="camellia.h"/>
        <files mask="ccm.h"/>
        <files mask="certs.h"/>
        <files mask="chacha20.h"/>
        <files mask="chachapoly.h"/>
        <files mask="check_config.h"/>
        <files mask="cipher.h"/>
        <files mask="cipher_internal.h"/>
        <files mask="cmac.h"/>
        <files mask="compat-1.3.h"/>
        <files mask="config.h"/>
        <files mask="ctr_drbg.h"/>
        <files mask="debug.h"/>
        <files mask="des.h"/>
        <files mask="dhm.h"/>
        <files mask="ecdh.h"/>
        <files mask="ecdsa.h"/>
        <files mask="ecjpake.h"/>
        <files mask="ecp.h"/>
        <files mask="ecp_internal.h"/>
        <files mask="entropy.h"/>
        <files mask="entropy_poll.h"/>
        <files mask="error.h"/>
        <files mask="gcm.h"/>
        <files mask="havege.h"/>
        <files mask="hkdf.h"/>
        <files mask="hmac_drbg.h"/>
        <files mask="md.h"/>
        <files mask="md_internal.h"/>
        <files mask="md2.h"/>
        <files mask="md4.h"/>
        <files mask="md5.h"/>
        <files mask="memory_buffer_alloc.h"/>
        <files mask="net.h"/>
        <files mask="net_sockets.h"/>
        <files mask="nist_kw.h"/>
        <files mask="oid.h"/>
        <files mask="padlock.h"/>
        <files mask="pem.h"/>
        <files mask="pk.h"/>
        <files mask="pk_internal.h"/>
        <files mask="pkcs5.h"/>
        <files mask="pkcs11.h"/>
        <files mask="pkcs12.h"/>
        <files mask="platform.h"/>
        <files mask="platform_time.h"/>
        <files mask="platform_util.h"/>
        <files mask="poly1305.h"/>
        <files mask="ripemd160.h"/>
        <files mask="rsa.h"/>
        <files mask="rsa_internal.h"/>
        <files mask="sha1.h"/>
        <files mask="sha256.h"/>
        <files mask="sha512.h"/>
        <files mask="ssl.h"/>
        <files mask="ssl_cache.h"/>
        <files mask="ssl_ciphersuites.h"/>
        <files mask="ssl_cookie.h"/>
        <files mask="ssl_internal.h"/>
        <files mask="ssl_ticket.h"/>
        <files mask="threading.h"/>
        <files mask="timing.h"/>
        <files mask="version.h"/>
        <files mask="x509.h"/>
        <files mask="x509_crl.h"/>
        <files mask="x509_crt.h"/>
        <files mask="x509_csr.h"/>
        <files mask="xtea.h"/>
      </source>
      <source path="middleware/mbedtls/library" target_path="mbedtls/library" type="src">
        <files mask="aes.c"/>
        <files mask="aesni.c"/>
        <files mask="arc4.c"/>
        <files mask="aria.c"/>
        <files mask="asn1parse.c"/>
        <files mask="asn1write.c"/>
        <files mask="base64.c"/>
        <files mask="bignum.c"/>
        <files mask="blowfish.c"/>
        <files mask="camellia.c"/>
        <files mask="ccm.c"/>
        <files mask="certs.c"/>
        <files mask="cipher.c"/>
        <files mask="cipher_wrap.c"/>
        <files mask="chacha20.c"/>
        <files mask="chachapoly.c"/>
        <files mask="cmac.c"/>
        <files mask="ctr_drbg.c"/>
        <files mask="debug.c"/>
        <files mask="des.c"/>
        <files mask="dhm.c"/>
        <files mask="ecdh.c"/>
        <files mask="ecdsa.c"/>
        <files mask="ecjpake.c"/>
        <files mask="ecp.c"/>
        <files mask="ecp_curves.c"/>
        <files mask="entropy.c"/>
        <files mask="entropy_poll.c"/>
        <files mask="error.c"/>
        <files mask="gcm.c"/>
        <files mask="havege.c"/>
        <files mask="hkdf.c"/>
        <files mask="hmac_drbg.c"/>
        <files mask="md.c"/>
        <files mask="md_wrap.c"/>
        <files mask="md2.c"/>
        <files mask="md4.c"/>
        <files mask="md5.c"/>
        <files mask="memory_buffer_alloc.c"/>
        <files mask="net_sockets.c"/>
        <files mask="nist_kw.c"/>
        <files mask="oid.c"/>
        <files mask="padlock.c"/>
        <files mask="pem.c"/>
        <files mask="pk.c"/>
        <files mask="pk_wrap.c"/>
        <files mask="pkcs5.c"/>
        <files mask="pkcs12.c"/>
        <files mask="pkparse.c"/>
        <files mask="pkwrite.c"/>
        <files mask="platform.c"/>
        <files mask="platform_util.c"/>
        <files mask="poly1305.c"/>
        <files mask="ripemd160.c"/>
        <files mask="rsa.c"/>
        <files mask="rsa_internal.c"/>
        <files mask="sha1.c"/>
        <files mask="sha256.c"/>
        <files mask="sha512.c"/>
        <files mask="ssl_cache.c"/>
        <files mask="ssl_ciphersuites.c"/>
        <files mask="ssl_cli.c"/>
        <files mask="ssl_cookie.c"/>
        <files mask="ssl_srv.c"/>
        <files mask="ssl_ticket.c"/>
        <files mask="ssl_tls.c"/>
        <files mask="threading.c"/>
        <files mask="timing.c"/>
        <files mask="version.c"/>
        <files mask="version_features.c"/>
        <files mask="x509.c"/>
        <files mask="x509_create.c"/>
        <files mask="x509_crl.c"/>
        <files mask="x509_crt.c"/>
        <files mask="x509_csr.c"/>
        <files mask="x509write_crt.c"/>
        <files mask="x509write_csr.c"/>
        <files mask="xtea.c"/>
      </source>
      <source path="middleware/mbedtls/port/ksdk" target_path="mbedtls/port/ksdk" type="src">
        <files mask="ksdk_mbedtls.c"/>
        <files mask="des_alt.c"/>
        <files mask="aes_alt.c"/>
      </source>
      <source path="middleware/mbedtls/port/ksdk" target_path="mbedtls/port/ksdk" type="c_include">
        <files mask="ksdk_mbedtls.h"/>
        <files mask="ksdk_mbedtls_config.h"/>
        <files mask="sha1_alt.h"/>
        <files mask="sha256_alt.h"/>
        <files mask="des_alt.h"/>
        <files mask="aes_alt.h"/>
      </source>
      <include_paths>
        <include_path path="mbedtls/include"/>
      </include_paths>
    </component>
    <component id="middleware.mbedtls.pkcs11.MKL28Z7" name="mbedtls_pkcs11" brief="PKCS11" version="2.12.0" devices="MKL28Z512xxx7" dependency="middleware.mbedtls.MKL28Z7 middleware.template_application.mbedtls.MKL28Z7" category="Security/mbedTLS library" user_visible="false" type="other">
      <source path="middleware/mbedtls/library" target_path="mbedtls/library" type="src">
        <files mask="pkcs11.c"/>
      </source>
    </component>
    <component id="middleware.mbedtls.unused_files.MKL28Z7" name="unused_files" brief="mbedTLS files unused by projects" version="2.12.0" devices="MKL28Z512xxx7" category="Security/mbedTLS library" user_visible="false" type="other">
      <source exclude="true" path="middleware/mbedtls/configs" target_path="mbedtls/configs" type="c_include">
        <files mask="config-suite-b.h"/>
        <files mask="config-mini-tls1_1.h"/>
        <files mask="config-no-entropy.h"/>
        <files mask="config-ccm-psk-tls1_2.h"/>
        <files mask="config-thread.h"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/configs" target_path="mbedtls/configs" type="doc">
        <files mask="README.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/doxygen" target_path="mbedtls/doxygen" type="other">
        <files mask="mbedtls.doxyfile"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/doxygen/input" target_path="mbedtls/doxygen/input" type="c_include">
        <files mask="doc_mainpage.h"/>
        <files mask="doc_encdec.h"/>
        <files mask="doc_tcpip.h"/>
        <files mask="doc_x509.h"/>
        <files mask="doc_rng.h"/>
        <files mask="doc_ssltls.h"/>
        <files mask="doc_hashing.h"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/include" target_path="mbedtls/include" type="other">
        <files mask=".gitignore"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/include" target_path="mbedtls/include" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/library" target_path="mbedtls/library" type="other">
        <files mask=".gitignore"/>
        <files mask="Makefile"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/library" target_path="mbedtls/library" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs" target_path="mbedtls/programs" type="other">
        <files mask="Makefile"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/aes" target_path="mbedtls/programs/aes" type="src">
        <files mask="crypt_and_hash.c"/>
        <files mask="aescrypt2.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/aes" target_path="mbedtls/programs/aes" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/hash" target_path="mbedtls/programs/hash" type="src">
        <files mask="hello.c"/>
        <files mask="generic_sum.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/hash" target_path="mbedtls/programs/hash" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/pkey" target_path="mbedtls/programs/pkey" type="src">
        <files mask="rsa_genkey.c"/>
        <files mask="pk_verify.c"/>
        <files mask="rsa_encrypt.c"/>
        <files mask="dh_genprime.c"/>
        <files mask="key_app_writer.c"/>
        <files mask="rsa_decrypt.c"/>
        <files mask="pk_encrypt.c"/>
        <files mask="ecdh_curve25519.c"/>
        <files mask="rsa_sign.c"/>
        <files mask="pk_sign.c"/>
        <files mask="dh_client.c"/>
        <files mask="gen_key.c"/>
        <files mask="rsa_verify_pss.c"/>
        <files mask="pk_decrypt.c"/>
        <files mask="mpi_demo.c"/>
        <files mask="dh_server.c"/>
        <files mask="rsa_sign_pss.c"/>
        <files mask="ecdsa.c"/>
        <files mask="rsa_verify.c"/>
        <files mask="key_app.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/pkey" target_path="mbedtls/programs/pkey" type="doc">
        <files mask="rsa_pub.txt"/>
        <files mask="rsa_priv.txt"/>
        <files mask="CMakeLists.txt"/>
        <files mask="dh_prime.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/random" target_path="mbedtls/programs/random" type="src">
        <files mask="gen_entropy.c"/>
        <files mask="gen_random_havege.c"/>
        <files mask="gen_random_ctr_drbg.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/random" target_path="mbedtls/programs/random" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/ssl" target_path="mbedtls/programs/ssl" type="src">
        <files mask="ssl_mail_client.c"/>
        <files mask="ssl_pthread_server.c"/>
        <files mask="ssl_server.c"/>
        <files mask="mini_client.c"/>
        <files mask="dtls_server.c"/>
        <files mask="ssl_client1.c"/>
        <files mask="ssl_fork_server.c"/>
        <files mask="dtls_client.c"/>
        <files mask="ssl_server2.c"/>
        <files mask="ssl_client2.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/ssl" target_path="mbedtls/programs/ssl" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/test" target_path="mbedtls/programs/test" type="script">
        <files mask="udp_proxy_wrapper.sh"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/test" target_path="mbedtls/programs/test" type="src">
        <files mask="selftest.c"/>
        <files mask="udp_proxy.c"/>
        <files mask="zeroize.c"/>
        <files mask="ssl_cert_test.c"/>
        <files mask="benchmark.c"/>
        <files mask="cpp_dummy_build.cpp"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/test" target_path="mbedtls/programs/test" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/util" target_path="mbedtls/programs/util" type="src">
        <files mask="pem2der.c"/>
        <files mask="strerror.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/util" target_path="mbedtls/programs/util" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/x509" target_path="mbedtls/programs/x509" type="src">
        <files mask="cert_req.c"/>
        <files mask="cert_app.c"/>
        <files mask="cert_write.c"/>
        <files mask="req_app.c"/>
        <files mask="crl_app.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/programs/x509" target_path="mbedtls/programs/x509" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/scripts" target_path="mbedtls/scripts" type="other">
        <files mask="massif_max.pl"/>
        <files mask="rename.pl"/>
        <files mask="rm-calloc-cast.cocci"/>
        <files mask="generate_features.pl"/>
        <files mask="generate_errors.pl"/>
        <files mask="config.pl"/>
        <files mask="generate_visualc_files.pl"/>
        <files mask="find-mem-leak.cocci"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/scripts" target_path="mbedtls/scripts" type="script">
        <files mask="abi_check.py"/>
        <files mask="footprint.sh"/>
        <files mask="apidoc_full.sh"/>
        <files mask="ecc-heap.sh"/>
        <files mask="tmp_ignore_makefiles.sh"/>
        <files mask="bump_version.sh"/>
        <files mask="memory.sh"/>
        <files mask="output_env.sh"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/scripts/data_files" target_path="mbedtls/scripts/data_files" type="other">
        <files mask="vs2010-main-template.vcxproj"/>
        <files mask="vs2010-sln-template.sln"/>
        <files mask="vs6-workspace-template.dsw"/>
        <files mask="error.fmt"/>
        <files mask="version_features.fmt"/>
        <files mask="vs6-app-template.dsp"/>
        <files mask="vs6-main-template.dsp"/>
        <files mask="vs2010-app-template.vcxproj"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/scripts/data_files" target_path="mbedtls/scripts/data_files" type="doc">
        <files mask="rename-1.3-2.0.txt"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests" target_path="mbedtls/tests" type="other">
        <files mask="Makefile"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/data_files" target_path="mbedtls/tests/data_files" type="other">
        <files mask="hash_file_1"/>
        <files mask="hash_file_2"/>
        <files mask="hash_file_5"/>
        <files mask="Makefile"/>
        <files mask="hash_file_4"/>
        <files mask="hash_file_3"/>
        <files mask="mpi_10"/>
        <files mask="mpi_too_big"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/data_files/dir3" target_path="mbedtls/tests/data_files/dir3" type="other">
        <files mask="Readme"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/data_files/dir4" target_path="mbedtls/tests/data_files/dir4" type="other">
        <files mask="Readme"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/scripts" target_path="mbedtls/tests/scripts" type="script">
        <files mask="basic-build-test.sh"/>
        <files mask="list-identifiers.sh"/>
        <files mask="check-names.sh"/>
        <files mask="list-macros.sh"/>
        <files mask="check-files.py"/>
        <files mask="generate-afl-tests.sh"/>
        <files mask="doxygen.sh"/>
        <files mask="list-symbols.sh"/>
        <files mask="travis-log-failure.sh"/>
        <files mask="check-generated-files.sh"/>
        <files mask="all.sh"/>
        <files mask="yotta-build.sh"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/scripts" target_path="mbedtls/tests/scripts" type="other">
        <files mask="test-ref-configs.pl"/>
        <files mask="recursion.pl"/>
        <files mask="gen_ctr_drbg.pl"/>
        <files mask="run-test-suites.pl"/>
        <files mask="gen_gcm_decrypt.pl"/>
        <files mask="key-exchanges.pl"/>
        <files mask="tcp_client.pl"/>
        <files mask="gen_pkcs1_v21_sign_verify.pl"/>
        <files mask="curves.pl"/>
        <files mask="depends-pkalgs.pl"/>
        <files mask="list-enum-consts.pl"/>
        <files mask="generate_code.pl"/>
        <files mask="gen_gcm_encrypt.pl"/>
        <files mask="check-doxy-blocks.pl"/>
        <files mask="depends-hashes.pl"/>
        <files mask="test_zeroize.gdb"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/suites" target_path="mbedtls/tests/suites" type="other">
        <files mask="test_suite_chacha20.function"/>
        <files mask="test_suite_ecp.function"/>
        <files mask="test_suite_memory_buffer_alloc.function"/>
        <files mask="test_suite_cmac.data"/>
        <files mask="test_suite_hmac_drbg.pr.data"/>
        <files mask="test_suite_asn1write.data"/>
        <files mask="test_suite_pkcs5.function"/>
        <files mask="test_suite_shax.function"/>
        <files mask="test_suite_cipher.camellia.data"/>
        <files mask="test_suite_gcm.function"/>
        <files mask="test_suite_gcm.aes256_en.data"/>
        <files mask="test_suite_md.data"/>
        <files mask="test_suite_dhm.data"/>
        <files mask="test_suite_ecdsa.data"/>
        <files mask="test_suite_cipher.null.data"/>
        <files mask="test_suite_xtea.data"/>
        <files mask="test_suite_rsa.function"/>
        <files mask="test_suite_aes.cfb.data"/>
        <files mask="test_suite_gcm.aes192_en.data"/>
        <files mask="test_suite_pk.data"/>
        <files mask="test_suite_aes.cbc.data"/>
        <files mask="test_suite_ecdh.function"/>
        <files mask="test_suite_timing.function"/>
        <files mask="test_suite_ccm.function"/>
        <files mask="test_suite_aes.rest.data"/>
        <files mask="test_suite_ecdh.data"/>
        <files mask="test_suite_pkcs1_v21.data"/>
        <files mask="test_suite_aria.data"/>
        <files mask="test_suite_chachapoly.function"/>
        <files mask="test_suite_arc4.data"/>
        <files mask="test_suite_cipher.blowfish.data"/>
        <files mask="test_suite_blowfish.function"/>
        <files mask="helpers.function"/>
        <files mask="test_suite_entropy.function"/>
        <files mask="test_suite_aria.function"/>
        <files mask="test_suite_dhm.function"/>
        <files mask="test_suite_entropy.data"/>
        <files mask="test_suite_x509parse.data"/>
        <files mask="test_suite_cipher.function"/>
        <files mask="test_suite_mdx.data"/>
        <files mask="test_suite_aes.ofb.data"/>
        <files mask="test_suite_hmac_drbg.nopr.data"/>
        <files mask="test_suite_pkcs1_v21.function"/>
        <files mask="test_suite_blowfish.data"/>
        <files mask="test_suite_hmac_drbg.no_reseed.data"/>
        <files mask="test_suite_debug.data"/>
        <files mask="test_suite_rsa.data"/>
        <files mask="test_suite_mpi.function"/>
        <files mask="test_suite_gcm.camellia.data"/>
        <files mask="test_suite_ssl.function"/>
        <files mask="test_suite_des.function"/>
        <files mask="test_suite_ecdsa.function"/>
        <files mask="test_suite_poly1305.data"/>
        <files mask="test_suite_nist_kw.function"/>
        <files mask="test_suite_ecjpake.data"/>
        <files mask="test_suite_mpi.data"/>
        <files mask="test_suite_pkcs1_v15.function"/>
        <files mask="test_suite_ecp.data"/>
        <files mask="test_suite_memory_buffer_alloc.data"/>
        <files mask="test_suite_cipher.aes.data"/>
        <files mask="test_suite_version.function"/>
        <files mask="test_suite_md.function"/>
        <files mask="test_suite_version.data"/>
        <files mask="test_suite_aes.xts.data"/>
        <files mask="test_suite_arc4.function"/>
        <files mask="test_suite_pkcs1_v15.data"/>
        <files mask="test_suite_des.data"/>
        <files mask="test_suite_x509write.function"/>
        <files mask="test_suite_x509write.data"/>
        <files mask="test_suite_ccm.data"/>
        <files mask="test_suite_asn1write.function"/>
        <files mask="test_suite_cipher.chacha20.data"/>
        <files mask="test_suite_camellia.data"/>
        <files mask="test_suite_pkparse.function"/>
        <files mask="test_suite_pk.function"/>
        <files mask="test_suite_pkparse.data"/>
        <files mask="test_suite_cmac.function"/>
        <files mask="test_suite_cipher.des.data"/>
        <files mask="test_suite_camellia.function"/>
        <files mask="test_suite_cipher.ccm.data"/>
        <files mask="test_suite_base64.data"/>
        <files mask="test_suite_hmac_drbg.function"/>
        <files mask="test_suite_ssl.data"/>
        <files mask="test_suite_pkwrite.function"/>
        <files mask="test_suite_gcm.aes128_de.data"/>
        <files mask="test_suite_chachapoly.data"/>
        <files mask="test_suite_hmac_drbg.misc.data"/>
        <files mask="test_suite_cipher.arc4.data"/>
        <files mask="test_suite_hkdf.data"/>
        <files mask="test_suite_aes.function"/>
        <files mask="test_suite_chacha20.data"/>
        <files mask="test_suite_aes.ecb.data"/>
        <files mask="test_suite_cipher.gcm.data"/>
        <files mask="main_test.function"/>
        <files mask="test_suite_debug.function"/>
        <files mask="test_suite_pkwrite.data"/>
        <files mask="test_suite_pem.data"/>
        <files mask="test_suite_error.data"/>
        <files mask="test_suite_ctr_drbg.data"/>
        <files mask="test_suite_nist_kw.data"/>
        <files mask="test_suite_pkcs5.data"/>
        <files mask="test_suite_ctr_drbg.function"/>
        <files mask="test_suite_cipher.padding.data"/>
        <files mask="test_suite_gcm.aes192_de.data"/>
        <files mask="test_suite_gcm.aes256_de.data"/>
        <files mask="test_suite_timing.data"/>
        <files mask="test_suite_poly1305.function"/>
        <files mask="test_suite_pem.function"/>
        <files mask="test_suite_gcm.aes128_en.data"/>
        <files mask="test_suite_mdx.function"/>
        <files mask="test_suite_cipher.chachapoly.data"/>
        <files mask="test_suite_xtea.function"/>
        <files mask="test_suite_x509parse.function"/>
        <files mask="test_suite_hkdf.function"/>
        <files mask="test_suite_ecjpake.function"/>
        <files mask="test_suite_base64.function"/>
        <files mask="test_suite_error.function"/>
        <files mask="test_suite_shax.data"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/git-scripts" target_path="mbedtls/tests/git-scripts" type="other">
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/tests/git-scripts" target_path="mbedtls/tests/git-scripts" type="script">
        <files mask="pre-push.sh"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/visualc/VS2010" target_path="mbedtls/visualc/VS2010" type="other">
        <files mask="pk_encrypt.vcxproj"/>
        <files mask="ssl_server2.vcxproj"/>
        <files mask="sha2sum.vcxproj"/>
        <files mask="mbedTLS.vcxproj"/>
        <files mask="ssl_client2.vcxproj"/>
        <files mask="md5sum.vcxproj"/>
        <files mask="key_app.vcxproj"/>
        <files mask="gen_random_havege.vcxproj"/>
        <files mask="crypt_and_hash.vcxproj"/>
        <files mask="rsa_sign_pss.vcxproj"/>
        <files mask="sha1sum.vcxproj"/>
        <files mask="strerror.vcxproj"/>
        <files mask="rsa_genkey.vcxproj"/>
        <files mask="pk_verify.vcxproj"/>
        <files mask="cert_app.vcxproj"/>
        <files mask="ecdsa.vcxproj"/>
        <files mask="rsa_encrypt.vcxproj"/>
        <files mask="ssl_mail_client.vcxproj"/>
        <files mask="dh_client.vcxproj"/>
        <files mask="key_app_writer.vcxproj"/>
        <files mask="benchmark.vcxproj"/>
        <files mask="rsa_verify.vcxproj"/>
        <files mask="hello.vcxproj"/>
        <files mask="rsa_sign.vcxproj"/>
        <files mask="req_app.vcxproj"/>
        <files mask="ecdh_curve25519.vcxproj"/>
        <files mask="gen_key.vcxproj"/>
        <files mask="ssl_client1.vcxproj"/>
        <files mask="zeroize.vcxproj"/>
        <files mask="gen_random_ctr_drbg.vcxproj"/>
        <files mask="gen_entropy.vcxproj"/>
        <files mask="mini_client.vcxproj"/>
        <files mask="dtls_client.vcxproj"/>
        <files mask="cert_req.vcxproj"/>
        <files mask="ssl_server.vcxproj"/>
        <files mask="ssl_fork_server.vcxproj"/>
        <files mask="mbedTLS.sln"/>
        <files mask="cert_write.vcxproj"/>
        <files mask="udp_proxy.vcxproj"/>
        <files mask="dh_genprime.vcxproj"/>
        <files mask="rsa_verify_pss.vcxproj"/>
        <files mask="generic_sum.vcxproj"/>
        <files mask="crl_app.vcxproj"/>
        <files mask="pk_sign.vcxproj"/>
        <files mask="pem2der.vcxproj"/>
        <files mask="mpi_demo.vcxproj"/>
        <files mask="rsa_decrypt.vcxproj"/>
        <files mask="selftest.vcxproj"/>
        <files mask="pk_decrypt.vcxproj"/>
        <files mask="dtls_server.vcxproj"/>
        <files mask="aescrypt2.vcxproj"/>
        <files mask="ssl_cert_test.vcxproj"/>
        <files mask="dh_server.vcxproj"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data" target_path="mbedtls/yotta/data" type="c_include">
        <files mask="target_config.h"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data" target_path="mbedtls/yotta/data" type="src">
        <files mask="entropy_hardware_poll.c"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data" target_path="mbedtls/yotta/data" type="script">
        <files mask="adjust-config.sh"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data" target_path="mbedtls/yotta/data" type="other">
        <files mask="module.json"/>
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-authcrypt" target_path="mbedtls/yotta/data/example-authcrypt" type="src">
        <files mask="main.cpp"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-authcrypt" target_path="mbedtls/yotta/data/example-authcrypt" type="other">
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-benchmark" target_path="mbedtls/yotta/data/example-benchmark" type="src">
        <files mask="main.cpp"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-benchmark" target_path="mbedtls/yotta/data/example-benchmark" type="other">
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-hashing" target_path="mbedtls/yotta/data/example-hashing" type="src">
        <files mask="main.cpp"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-hashing" target_path="mbedtls/yotta/data/example-hashing" type="other">
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-selftest" target_path="mbedtls/yotta/data/example-selftest" type="src">
        <files mask="main.cpp"/>
      </source>
      <source exclude="true" path="middleware/mbedtls/yotta/data/example-selftest" target_path="mbedtls/yotta/data/example-selftest" type="other">
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls" target_path="mbedtls" type="other">
        <files mask=".gitignore"/>
        <files mask=".travis.yml"/>
        <files mask="ChangeLog"/>
        <files mask="circle.yml"/>
        <files mask="DartConfiguration.tcl"/>
        <files mask="LICENSE"/>
        <files mask="Makefile"/>
        <files mask="README.md"/>
      </source>
      <source exclude="true" path="middleware/mbedtls" target_path="mbedtls" type="doc">
        <files mask="apache-2.0.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
        <files mask="CMakeLists.txt"/>
        <files mask="mbeTLS_for_Kinetis_SDK_v2.0_readme.txt"/>
      </source>
    </component>
    <component id="middleware.mmcau_cm0p.MKL28Z7" name="mmcau_cm0p" brief="mmcau" version="2.0.1" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" category="Security/MMCAU library" user_visible="true" type="middleware">
      <source path="middleware/mmcau" target_path="mmcau/mmcau_include" type="c_include">
        <files mask="cau_api.h"/>
        <files mask="fsl_mmcau.h"/>
      </source>
      <source path="middleware/mmcau" target_path="mmcau/mmcau_source" type="src">
        <files mask="fsl_mmcau.c"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/mmcau/asm-cm0p" target_path="libs" type="lib">
        <files mask="lib_mmcau-cm0p.a"/>
      </source>
    </component>
    <component id="middleware.mmcau.mmcau_files.MKL28Z7" name="mmcau" version="2.0.1" devices="MKL28Z512xxx7" user_visible="true" type="other">
      <source path="middleware/mmcau" target_path="src" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
        <files mask="README.txt"/>
      </source>
      <source path="middleware/mmcau/asm-cm0p/src" target_path="src" type="other" device_cores="core0_MKL28Z512xxx7">
        <files mask="cau2_defines.hdr"/>
      </source>
      <source path="middleware/mmcau/asm-cm0p/src" target_path="src" type="asm_include" device_cores="core0_MKL28Z512xxx7">
        <files mask="mmcau_des_functions.s"/>
        <files mask="mmcau_sha1_functions.s"/>
        <files mask="mmcau_md5_functions.s"/>
        <files mask="mmcau_sha256_functions.s"/>
        <files mask="mmcau_aes_functions.s"/>
      </source>
    </component>
    <component id="driver.mma8451q.MKL28Z7" name="mma8451q" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/mma8451q" target_path="accel" type="c_include">
        <files mask="fsl_mma.h"/>
      </source>
      <source path="components/mma8451q" target_path="accel" type="src">
        <files mask="fsl_mma.c"/>
      </source>
    </component>
    <component id="driver.fxos8700cq.MKL28Z7" name="fxos8700cq" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/fxos8700cq" target_path="accel" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source path="components/fxos8700cq" target_path="accel" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MKL28Z7" name="lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lpuart.MKL28Z7" user_visible="true" type="utilities">
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
    </component>
    <component id="component.gpio_kinetis.MKL28Z7" name="gpio_kinetis" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_kinetis.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MKL28Z7" name="timer_manager" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
    </component>
    <component id="component.panic.MKL28Z7" name="panic" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
    </component>
    <component id="component.lpit_adapter.MKL28Z7" name="lpit_adapter" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lpit_adapter.c"/>
      </source>
    </component>
    <component id="component.osa_bm.MKL28Z7" name="osa_bm" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.osa_free_rtos.MKL28Z7" name="osa_free_rtos" version="1.0.0" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
    </component>
    <component id="component.lists.MKL28Z7" name="lists" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MKL28Z7" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKL28Z512xxx7" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MKL28Z7" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lpuart.MKL28Z7" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.MKL28Z7" name="serial_manager_usb_cdc_device_config" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Utilities" user_visible="true" type="other">
      <source path="devices/MKL28Z7/utilities" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc.MKL28Z7" name="serial_manager_usb_cdc" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.serial_manager_usb_cdc_device_config.MKL28Z7 middleware.usb.device.MKL28Z7" category="Device/SDK Utilities" user_visible="true" type="other">
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb.h"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb.c"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_descriptor.h"/>
        <files mask="usb_device_cdc_acm.h"/>
        <files mask="usb_device_class.h"/>
        <files mask="usb_device_ch9.h"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter" target_path="component/serial_manager/usb_cdc_adapter" type="src">
        <files mask="usb_device_descriptor.c"/>
        <files mask="usb_device_cdc_acm.c"/>
        <files mask="usb_device_class.c"/>
        <files mask="usb_device_ch9.c"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter/inf" target_path="src" type="configuration">
        <files mask="fsl_ucwxp.inf"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter/inf" target_path="src" type="other">
        <files mask="cdc.cat"/>
      </source>
    </component>
    <component id="component.led.MKL28Z7" name="led" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
    </component>
    <component id="component.button.MKL28Z7" name="button" version="1.0.0" devices="MKL28Z512xxx7" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MKL28Z7" name="debug_console" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.serial_manager.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="utilities">
      <source path="devices/MKL28Z7/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MKL28Z7/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source path="devices/MKL28Z7/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MKL28Z7/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
    </component>
    <component id="middleware.wifi_qca.MKL28Z7" name="wifi_qca" version="2.0.0" revision="1" full_name="QCA400x WiFi" devices="MKL28Z512xxx7" category="WiFi/QCA400x WiFi" user_visible="true" type="middleware">
      <source path="middleware/wifi_qca/common_src/wmi" target_path="wifi_qca/common_src/wmi" type="src">
        <files mask="wmi.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/storerecall" target_path="wifi_qca/common_src/stack_common" type="src">
        <files mask="dset_api.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/stack_common" target_path="wifi_qca/common_src/stack_common" type="c_include">
        <files mask="common_stack_offload.h"/>
      </source>
      <source path="middleware/wifi_qca/common_src/stack_common" target_path="wifi_qca/common_src/qapi" type="src">
        <files mask="api_stack_offload.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/qapi" target_path="wifi_qca/common_src/qapi" type="src">
        <files mask="qcom_api.c"/>
        <files mask="qcom_dns.c"/>
        <files mask="qcom_legacy.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/include" target_path="wifi_qca/common_src/include" type="c_include">
        <files mask="dset_api.h"/>
        <files mask="driver_cxt.h"/>
        <files mask="a_drv_api.h"/>
        <files mask="wlan_api.h"/>
        <files mask="wmi_api.h"/>
        <files mask="hif_internal.h"/>
        <files mask="dset.h"/>
        <files mask="dbglog_api.h"/>
        <files mask="common_api.h"/>
        <files mask="bmi.h"/>
        <files mask="aggr_recv_api.h"/>
        <files mask="a_drv.h"/>
        <files mask="a_debug.h"/>
        <files mask="spi_hcd_if.h"/>
        <files mask="netbuf.h"/>
        <files mask="ieee80211.h"/>
        <files mask="htc_api.h"/>
      </source>
      <source path="middleware/wifi_qca/common_src/htc" target_path="wifi_qca/common_src/htc" type="src">
        <files mask="htc.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/hcd" target_path="wifi_qca/common_src/htc" type="src">
        <files mask="spi_hcd.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/driver" target_path="wifi_qca/common_src/driver" type="src">
        <files mask="driver_main.c"/>
        <files mask="driver_txrx.c"/>
        <files mask="driver_netbuf.c"/>
        <files mask="driver_init.c"/>
        <files mask="driver_diag.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/api_interface" target_path="wifi_qca/common_src/api_interface" type="src">
        <files mask="api_wmi_rx.c"/>
        <files mask="api_ioctl.c"/>
        <files mask="api_txrx.c"/>
        <files mask="api_init.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/hw_interface" target_path="wifi_qca/common_src/hw_interface" type="src">
        <files mask="hw_api.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/storerecall" target_path="wifi_qca/common_src/storerecall" type="src">
        <files mask="dset.c"/>
        <files mask="storerecall.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/hcd" target_path="wifi_qca/common_src/hcd" type="c_include">
        <files mask="hcd_api.h"/>
      </source>
      <source path="middleware/wifi_qca/common_src/bmi" target_path="wifi_qca/common_src/bmi" type="src">
        <files mask="bmi.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/wmi" target_path="wifi_qca/common_src/wmi" type="c_include">
        <files mask="wmi_host.h"/>
      </source>
      <source path="middleware/wifi_qca/common_src/util" target_path="wifi_qca/common_src/util" type="src">
        <files mask="util.c"/>
      </source>
      <source path="middleware/wifi_qca/common_src/reorder" target_path="wifi_qca/common_src/reorder" type="src">
        <files mask="rcv_aggr.c"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/stack_custom" target_path="wifi_qca/custom_src/stack_custom" type="src">
        <files mask="cust_api_stack_offload.c"/>
        <files mask="cust_api_stack_txrx.c"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/qapi" target_path="wifi_qca/custom_src/qapi" type="src">
        <files mask="custom_qcom_api.c"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/include" target_path="wifi_qca/custom_src/include" type="c_include">
        <files mask="cust_netbuf.h"/>
        <files mask="a_osapi.h"/>
        <files mask="a_config.h"/>
        <files mask="wlan_config.h"/>
        <files mask="custom_wlan_api.h"/>
        <files mask="a_types.h"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/api_interface" target_path="wifi_qca/custom_src/api_interface" type="src">
        <files mask="cust_api_wmi_rx.c"/>
        <files mask="cust_api_ioctl.c"/>
        <files mask="cust_api_txrx.c"/>
        <files mask="cust_api_init.c"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/driver" target_path="wifi_qca/custom_src/driver" type="src">
        <files mask="cust_driver_netbuf.c"/>
        <files mask="cust_driver_main.c"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/stack_custom" target_path="wifi_qca/custom_src/stack_custom" type="c_include">
        <files mask="qca_structs.h"/>
        <files mask="custom_stack_offload.h"/>
      </source>
      <source path="middleware/wifi_qca/custom_src/hw_interface" target_path="wifi_qca/custom_src/hw_interface" type="src">
        <files mask="cust_spi_hcd.c"/>
      </source>
      <source path="middleware/wifi_qca/include" target_path="wifi_qca/include" type="c_include">
        <files mask="wmi.h"/>
        <files mask="dbglog.h"/>
        <files mask="athdefs.h"/>
        <files mask="dbglog_id.h"/>
        <files mask="bmi_msg.h"/>
        <files mask="wlan_defs.h"/>
        <files mask="targaddrs.h"/>
        <files mask="pmu.h"/>
        <files mask="pkt_log.h"/>
        <files mask="p2p.h"/>
        <files mask="htc_services.h"/>
        <files mask="htc.h"/>
      </source>
      <source path="middleware/wifi_qca/include/AR6002/hw2.0/hw" target_path="wifi_qca/include/AR6002/hw2.0/hw" type="c_include">
        <files mask="hw20_gpio_reg.h"/>
        <files mask="hw20_apb_map.h"/>
        <files mask="hw20_vmc_reg.h"/>
        <files mask="hw20_uart_reg.h"/>
        <files mask="hw20_si_reg.h"/>
        <files mask="hw20_rtc_reg.h"/>
        <files mask="hw20_mbox_reg.h"/>
        <files mask="hw20_mbox_host_reg.h"/>
      </source>
      <source path="middleware/wifi_qca/include/AR6002" target_path="wifi_qca/include/AR6002" type="c_include">
        <files mask="AR6K_version.h"/>
      </source>
      <source path="middleware/wifi_qca/include/AR6002/hw4.0/hw" target_path="wifi_qca/include/AR6002/hw4.0/hw" type="c_include">
        <files mask="hw40_rtc_wlan_reg.h"/>
        <files mask="hw40_rtc_reg.h"/>
      </source>
      <source path="middleware/wifi_qca/port" target_path="wifi_qca/port" type="c_include">
        <files mask="wifi_common.h"/>
      </source>
      <source path="middleware/wifi_qca" target_path="wifi_qca/include" type="c_include">
        <files mask="qcom_api.h"/>
        <files mask="atheros_stack_offload.h"/>
        <files mask="atheros_wifi_internal.h"/>
        <files mask="atheros_wifi_api.h"/>
        <files mask="atheros_wifi.h"/>
      </source>
    </component>
    <component id="middleware.wifi_qca.freertos.MKL28Z7" name="freertos" version="1.0.0" devices="MKL28Z512xxx7" dependency="middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 middleware.wifi_qca.MKL28Z7" category="WiFi/QCA400x WiFi" user_visible="false" type="other">
      <source path="middleware/wifi_qca/port/env/freertos" target_path="wifi_qca/port/env/freertos" type="c_include">
        <files mask="wifi_port.h"/>
        <files mask="wifi_env_port.h"/>
        <files mask="wifi_env.h"/>
      </source>
      <source path="middleware/wifi_qca/port/env/freertos" target_path="wifi_qca/port/env/freertos" type="src">
        <files mask="wifi_env.c"/>
      </source>
    </component>
    <component id="middleware.wifi_qca.freertos.drivers.lpspi_edma.MKL28Z7" name="lpspi_edma" version="1.0.0" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 middleware.wifi_qca.MKL28Z7 middleware.wifi_qca.freertos.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpspi.MKL28Z7 platform.drivers.lpspi_edma.MKL28Z7" category="WiFi/QCA400x WiFi" user_visible="false" type="other">
      <source path="middleware/wifi_qca/port/drivers/lpspi_edma_freertos" target_path="wifi_qca/port/drivers/lpspi_edma_freertos" type="c_include">
        <files mask="wifi_spi.h"/>
      </source>
      <source path="middleware/wifi_qca/port/drivers/lpspi_edma_freertos" target_path="wifi_qca/port/drivers/lpspi_edma_freertos" type="src">
        <files mask="wifi_spi.c"/>
      </source>
    </component>
    <component id="middleware.wifi_qca.frdmkl28z.freertos.shields.MKL28Z7" name="shields" version="1.0.0" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 middleware.wifi_qca.MKL28Z7 middleware.wifi_qca.freertos.MKL28Z7 middleware.wifi_qca.freertos.drivers.lpspi_edma.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.gpio.MKL28Z7 platform.drivers.intmux.MKL28Z7 platform.drivers.lpspi.MKL28Z7 platform.drivers.lpspi_edma.MKL28Z7 platform.drivers.port.MKL28Z7" user_visible="true" type="other">
      <source path="middleware/wifi_qca/port/boards/frdmkl28z/freertos" target_path="wifi_qca/port/shields" type="c_include">
        <files mask="wifi_shield.h"/>
      </source>
      <source path="middleware/wifi_qca/port/boards/frdmkl28z/freertos" target_path="wifi_qca/port/shields" type="src">
        <files mask="wifi_shield.c"/>
      </source>
    </component>
    <component id="middleware.wifi_qca.frdmkl28z.freertos.shields.gt202.MKL28Z7" name="gt202" version="1.0.0" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 middleware.wifi_qca.MKL28Z7 middleware.wifi_qca.frdmkl28z.freertos.shields.MKL28Z7 middleware.wifi_qca.freertos.MKL28Z7 middleware.wifi_qca.freertos.drivers.lpspi_edma.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.gpio.MKL28Z7 platform.drivers.intmux.MKL28Z7 platform.drivers.lpspi.MKL28Z7 platform.drivers.lpspi_edma.MKL28Z7 platform.drivers.port.MKL28Z7" category="WiFi/QCA400x WiFi" user_visible="false" type="other">
      <source path="middleware/wifi_qca/port/boards/frdmkl28z/freertos/gt202" target_path="wifi_qca/port/shields/gt202" type="c_include">
        <files mask="wifi_shield_gt202.h"/>
      </source>
    </component>
    <component id="middleware.wifi_qca.frdmkl28z.freertos.shields.silex2401.MKL28Z7" name="silex2401" version="1.0.0" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 middleware.wifi_qca.MKL28Z7 middleware.wifi_qca.frdmkl28z.freertos.shields.MKL28Z7 middleware.wifi_qca.freertos.MKL28Z7 middleware.wifi_qca.freertos.drivers.lpspi_edma.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.gpio.MKL28Z7 platform.drivers.intmux.MKL28Z7 platform.drivers.lpspi.MKL28Z7 platform.drivers.lpspi_edma.MKL28Z7 platform.drivers.port.MKL28Z7" category="WiFi/QCA400x WiFi" user_visible="false" type="other">
      <source path="middleware/wifi_qca/port/boards/frdmkl28z/freertos/silex2401" target_path="wifi_qca/port/shields/silex2401" type="c_include">
        <files mask="wifi_shield_silex2401.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.MKL28Z7" name="fatfs" brief="FatFs" version="0.13.1" revision="0" full_name="FAT File System stack" devices="MKL28Z512xxx7" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source" target_path="fatfs/fatfs_source" type="src">
        <files mask="diskio.c"/>
        <files mask="ff.c"/>
        <files mask="ffsystem.c"/>
        <files mask="ffunicode.c"/>
      </source>
      <source path="middleware/fatfs/source" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="diskio.h"/>
        <files mask="ff.h"/>
        <files mask="integer.h"/>
      </source>
    </component>
    <component id="middleware.fatfs.ram.MKL28Z7" name="ram" brief="FatFs_RAM" version="0.13" full_name="Fatfs RAM layer" devices="MKL28Z512xxx7" dependency="middleware.fatfs.MKL28Z7" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_ram_disk.h"/>
      </source>
      <source path="middleware/fatfs/source/fsl_ram_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_ram_disk.c"/>
      </source>
    </component>
    <component id="middleware.fatfs.usb_bm.MKL28Z7" name="usb_bm" brief="FatFs_USB_baremetal" version="0.13" full_name="Fatfs USB baremetal layer" devices="MKL28Z512xxx7" dependency="middleware.fatfs.MKL28Z7 middleware.usb.host.MKL28Z7 middleware.usb.host_hub.MKL28Z7 middleware.usb.host_msd.MKL28Z7" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_usb_disk.h"/>
      </source>
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_usb_disk_bm.c"/>
      </source>
    </component>
    <component id="middleware.fatfs.usb_freertos.MKL28Z7" name="usb_freertos" brief="FatFs_USB_freertos" version="0.13" full_name="Fatfs USB freertos layer" devices="MKL28Z512xxx7" dependency="middleware.fatfs.MKL28Z7 middleware.usb.host.MKL28Z7 middleware.usb.host_hub.MKL28Z7 middleware.usb.host_msd.MKL28Z7" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_usb_disk.h"/>
      </source>
      <source path="middleware/fatfs/source/fsl_usb_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_usb_disk_freertos.c"/>
      </source>
    </component>
    <component id="middleware.fatfs.nand.MKL28Z7" name="nand" brief="FatFs_NAND" version="0.13" full_name="Fatfs NAND layer" devices="MKL28Z512xxx7" dependency="middleware.fatfs.MKL28Z7" category="File System/FAT File System" user_visible="false" type="middleware">
      <source path="middleware/fatfs/source/fsl_nand_disk" target_path="fatfs/fatfs_include" type="c_include">
        <files mask="fsl_nand_disk.h"/>
      </source>
      <source path="middleware/fatfs/source/fsl_nand_disk" target_path="fatfs/fatfs_source" type="src">
        <files mask="fsl_nand_disk.c"/>
      </source>
    </component>
    <component id="middleware.fatfs.unused_files.MKL28Z7" name="unused_files" brief="fatfs files unused by projects" version="3.9.8" revision="3" devices="MKL28Z512xxx7" user_visible="false" type="other">
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/fatfs_files" type="c_include">
        <files mask="ffconf_template.h"/>
      </source>
      <source exclude="true" path="middleware/fatfs/source" target_path="fatfs/fatfs_files" type="doc">
        <files mask="00history.txt"/>
        <files mask="00readme.txt"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents" target_path="fatfs/fatfs_files" type="doc">
        <files mask="00index_e.html"/>
        <files mask="updates.txt"/>
        <files mask="css_e.css"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/doc" target_path="fatfs/fatfs_files" type="doc">
        <files mask="getlabel.html"/>
        <files mask="forward.html"/>
        <files mask="getfree.html"/>
        <files mask="size.html"/>
        <files mask="close.html"/>
        <files mask="tell.html"/>
        <files mask="open.html"/>
        <files mask="error.html"/>
        <files mask="dwrite.html"/>
        <files mask="write.html"/>
        <files mask="closedir.html"/>
        <files mask="mkdir.html"/>
        <files mask="rename.html"/>
        <files mask="mkfs.html"/>
        <files mask="sync.html"/>
        <files mask="unlink.html"/>
        <files mask="lseek.html"/>
        <files mask="printf.html"/>
        <files mask="chdrive.html"/>
        <files mask="sdir.html"/>
        <files mask="chmod.html"/>
        <files mask="filename.html"/>
        <files mask="setlabel.html"/>
        <files mask="sfatfs.html"/>
        <files mask="sfileinfo.html"/>
        <files mask="expand.html"/>
        <files mask="dread.html"/>
        <files mask="setcp.html"/>
        <files mask="gets.html"/>
        <files mask="opendir.html"/>
        <files mask="rc.html"/>
        <files mask="stat.html"/>
        <files mask="findfirst.html"/>
        <files mask="fattime.html"/>
        <files mask="readdir.html"/>
        <files mask="fdisk.html"/>
        <files mask="sfile.html"/>
        <files mask="mount.html"/>
        <files mask="dinit.html"/>
        <files mask="config.html"/>
        <files mask="findnext.html"/>
        <files mask="dioctl.html"/>
        <files mask="eof.html"/>
        <files mask="chdir.html"/>
        <files mask="putc.html"/>
        <files mask="puts.html"/>
        <files mask="dstat.html"/>
        <files mask="getcwd.html"/>
        <files mask="appnote.html"/>
        <files mask="truncate.html"/>
        <files mask="read.html"/>
        <files mask="utime.html"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="image">
        <files mask="f4.png"/>
        <files mask="layers3.png"/>
        <files mask="funcs.png"/>
        <files mask="rwtest1.png"/>
        <files mask="rwtest3.png"/>
        <files mask="f1.png"/>
        <files mask="f6.png"/>
        <files mask="layers1.png"/>
        <files mask="layers2.png"/>
        <files mask="modules.png"/>
        <files mask="rwtest2.png"/>
        <files mask="layers.png"/>
        <files mask="f2.png"/>
        <files mask="f7.png"/>
        <files mask="f3.png"/>
        <files mask="f5.png"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="doc">
        <files mask="mkfs.xls"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="archive">
        <files mask="mkfatimg.zip"/>
      </source>
      <source exclude="true" path="middleware/fatfs/documents/res" target_path="fatfs/fatfs_files" type="src">
        <files mask="app1.c"/>
        <files mask="app4.c"/>
        <files mask="app5.c"/>
        <files mask="app3.c"/>
        <files mask="app2.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_edma.MKL28Z7" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" devices="MKL28Z512xxx7" dependency="RTE_Device.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpuart.MKL28Z7 platform.drivers.lpuart_edma.MKL28Z7" user_visible="true" type="CMSIS_driver">
      <source path="devices/MKL28Z7/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
      <source path="devices/MKL28Z7/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_cmsis.MKL28Z7" name="lpspi_cmsis" brief="LPSPI CMSIS Driver" version="2.0.0" devices="MKL28Z512xxx7" dependency="RTE_Device.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpspi.MKL28Z7 platform.drivers.lpspi_edma.MKL28Z7" user_visible="true" type="CMSIS_driver">
      <source path="devices/MKL28Z7/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_cmsis.h"/>
      </source>
      <source path="devices/MKL28Z7/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_cmsis.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_cmsis.MKL28Z7" name="lpi2c_cmsis" brief="LPI2C CMSIS Driver" version="2.0.0" devices="MKL28Z512xxx7" dependency="RTE_Device.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL28Z7 platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.lpi2c.MKL28Z7 platform.drivers.lpi2c_edma.MKL28Z7" user_visible="true" type="CMSIS_driver">
      <source path="devices/MKL28Z7/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_cmsis.h"/>
      </source>
      <source path="devices/MKL28Z7/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_cmsis.c"/>
      </source>
    </component>
    <component id="platform.drivers.wdog32.MKL28Z7" name="wdog" brief="WDOG32 Driver" version="2.0.1" full_name="WDOG32 Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
    </component>
    <component id="platform.drivers.vref.MKL28Z7" name="vref" brief="VREF Driver" version="2.1.0" full_name="VREF Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_vref.c"/>
      </source>
    </component>
    <component id="platform.drivers.tstmr.MKL28Z7" name="tstmr" brief="TSTMR Driver" version="2.0.0" full_name="TSTMR Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tstmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.tsi_v4.MKL28Z7" name="tsi_v4" brief="TSI Driver" version="2.1.2" full_name="TSI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tsi_v4.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_tsi_v4.c"/>
      </source>
    </component>
    <component id="platform.drivers.trng.MKL28Z7" name="trng" brief="TRNG Driver" version="2.0.3" full_name="TRNG Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
    </component>
    <component id="platform.drivers.trgmux.MKL28Z7" name="trgmux" brief="TRGMUX Driver" version="2.0.0" full_name="TRGMUX Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MKL28Z7" name="tpm" brief="TPM Driver" version="2.0.2" full_name="TPM Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MKL28Z7" name="smc" brief="SMC Driver" version="2.0.4" full_name="SMC Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
    </component>
    <component id="platform.drivers.smartcard_phy_emvsim.MKL28Z7" name="smartcard_phy_emvsim" brief="SMARTCARD PHY EMVSIM, use only one SMARTCARD PHY in the project" version="2.2.0" full_name="SMARTCARD PHY EMVSIM" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.smartcard_emvsim.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smartcard_phy.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_smartcard_phy_emvsim.c"/>
      </source>
    </component>
    <component id="platform.drivers.smartcard_emvsim.MKL28Z7" name="smartcard_emvsim" brief="SMARTCARD EMVSIM Driver" version="2.2.0" full_name="SMARTCARD EMVSIM Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smartcard.h"/>
        <files mask="fsl_smartcard_emvsim.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_smartcard_emvsim.c"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MKL28Z7" name="sim" brief="SIM Driver" version="2.1.0" full_name="SIM Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MKL28Z7" name="sai" brief="SAI Driver" version="2.1.7" full_name="SAI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MKL28Z7" name="rtc" brief="RTC Driver" version="2.1.0" full_name="RTC Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MKL28Z7" name="rcm" brief="RCM Driver" version="2.0.1" full_name="RCM Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MKL28Z7" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MKL28Z7" name="pmc" brief="PMC Driver" version="2.0.0" full_name="PMC Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
    </component>
    <component id="platform.drivers.mmdvsq.MKL28Z7" name="mmdvsq" brief="MMDVSQ Driver" version="2.0.2" full_name="MMDVSQ Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mmdvsq.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_mmdvsq.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_freertos.MKL28Z7" name="lpuart_freertos" brief="LPUART Driver" version="2.2.6" full_name="LPUART Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lpuart.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MKL28Z7" name="lpuart" brief="LPUART Driver" version="2.2.6" full_name="LPUART Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MKL28Z7" name="lptmr" brief="LPTMR Driver" version="2.0.1" full_name="LPTMR Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpit.MKL28Z7" name="lpit" brief="LPIT Driver" version="2.0.0" full_name="LPIT Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c.MKL28Z7" name="i2c" brief="LPI2C Driver" version="2.1.6" full_name="LPI2C Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_freertos.MKL28Z7" name="lpspi_freertos" brief="LPSPI Driver" version="2.0.2" full_name="LPSPI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lpspi.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi.MKL28Z7" name="lpspi" brief="LPSPI Driver" version="2.0.3" full_name="LPSPI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.llwu.MKL28Z7" name="llwu" brief="LLWU Driver" version="2.0.2" full_name="LLWU Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
    </component>
    <component id="platform.drivers.intmux.MKL28Z7" name="intmux" brief="INTMUX Driver" version="2.0.1" full_name="INTMUX Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_intmux.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_intmux.c"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MKL28Z7" name="gpio" brief="GPIO Driver" version="2.3.1" full_name="GPIO Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MKL28Z7" name="i2c_freertos" brief="LPI2C Driver" version="2.1.6" full_name="LPI2C Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 middleware.freertos.MKL28Z7 middleware.template_application.freertos.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.lpi2c.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MKL28Z7" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.1.5" full_name="FLEXIO UART EDMA Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.flexio.MKL28Z7 platform.drivers.flexio_uart.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MKL28Z7" name="flexio_uart" brief="FLEXIO UART Driver" version="2.1.5" full_name="FLEXIO UART Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flexio.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MKL28Z7" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.1.3" full_name="FLEXIO SPI EDMA Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.flexio.MKL28Z7 platform.drivers.flexio_spi.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi.MKL28Z7" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.1.3" full_name="FLEXIO SPI Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flexio.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s_edma.MKL28Z7" name="flexio_i2s_edma" brief="FLEXIO I2S EDMA Driver" version="2.1.5" full_name="FLEXIO I2S EDMA Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7 platform.drivers.edma.MKL28Z7 platform.drivers.flexio.MKL28Z7 platform.drivers.flexio_i2s.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s_edma.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s.MKL28Z7" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.1.5" full_name="FLEXIO I2S Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flexio.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MKL28Z7" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.1.6" full_name="FLEXIO I2C Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flexio.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MKL28Z7" name="flexio" brief="FLEXIO Driver" version="2.0.2" full_name="FLEXIO Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MKL28Z7" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKL28Z512xxx7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.edma.MKL28Z7" name="edma" brief="EDMA Driver" version="2.1.4" full_name="EDMA Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.dmamux.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MKL28Z7" name="dmamux" brief="DMAMUX Driver" version="2.0.2" full_name="DMAMUX Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
    </component>
    <component id="platform.drivers.dac.MKL28Z7" name="dac" brief="DAC Driver" version="2.0.1" full_name="DAC Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
    </component>
    <component id="platform.drivers.crc.MKL28Z7" name="crc" brief="CRC Driver" version="2.0.1" full_name="CRC Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp.MKL28Z7" name="cmp" brief="CMP Driver" version="2.0.0" full_name="CMP Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MKL28Z7" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MKL28Z7" name="adc" brief="ADC16 Driver" version="2.0.0" full_name="ADC16 Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MKL28Z7" name="common" brief="COMMON Driver" version="2.0.1" full_name="COMMON Driver" devices="MKL28Z512xxx7" dependency="device.MKL28Z7_CMSIS.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7" user_visible="true" type="driver">
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source path="devices/MKL28Z7/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.MKL28Z7_startup.MKL28Z7" name="MCUBOOT_MKL28Z7_startup" brief="MCUBOOT MKL28Z7 startup sources" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source toolchain="mcuxpresso" path="middleware/mcu-boot/targets/MKL28Z7/src/startup/gcc" target_path="startup" type="asm_include">
        <files mask="startup_MKL28Z7.S"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.MKL28Z7_sources.MKL28Z7" name="MCUBOOT_MKL28Z7_sources" brief="MCUBOOT MKL28Z7 sources" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/targets/MKL28Z7/src" target_path="MKL28Z7" type="c_include">
        <files mask="bootloader_config.h"/>
        <files mask="peripherals_pinmux.h"/>
        <files mask="target_config.h"/>
      </source>
      <source path="middleware/mcu-boot/targets/MKL28Z7/src" target_path="MKL28Z7" type="src">
        <files mask="clock_config_MKL28Z7.c"/>
        <files mask="hardware_init_MKL28Z7.c"/>
        <files mask="memory_map_MKL28Z7.c"/>
        <files mask="peripherals_MKL28Z7.c"/>
        <files mask="bl_lpspi_irq_config_MKL28Z7.c"/>
        <files mask="bl_lpi2c_irq_config_MKL28Z7.c"/>
        <files mask="bl_lpuart_irq_config_MKL28Z7.c"/>
      </source>
      <source path="middleware/mcu-boot/targets/MKL28Z7/src" target_path="source/usb/bm_composite" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
      <source path="middleware/mcu-boot/targets/common/src" target_path="MKL28Z7" type="src">
        <files mask="pinmux_utility_common.c"/>
        <files mask="bl_intmux_irq.c"/>
      </source>
      <source path="middleware/mcu-boot/src/bootloader/src" target_path="source/bootloader/src" type="src">
        <files mask="lpuart_peripheral_interface.c"/>
        <files mask="lpspi_peripheral_interface.c"/>
        <files mask="lpi2c_peripheral_interface.c"/>
        <files mask="usb_hid_msc_peripheral_interface.c"/>
      </source>
      <source path="middleware/mcu-boot/src/memory/src" target_path="source/memory/src" type="src">
        <files mask="sram_init_cm0plus.c"/>
      </source>
      <source path="middleware/mcu-boot/src/drivers/ltc" target_path="source" type="c_include">
        <files mask="ltc.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.drv_microseconds.MKL28Z7" name="MCUBOOT_microseconds_sysclk" brief="MCUBOOT microseconds sysclk" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/drivers/microseconds" target_path="source/drivers/microseconds" type="c_include">
        <files mask="microseconds.h"/>
      </source>
      <source path="middleware/mcu-boot/src/drivers/microseconds/src" target_path="source/drivers/microseconds" type="src">
        <files mask="microseconds_sysclk.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.drv_microseconds_pit.MKL28Z7" name="MCUBOOT_microseconds_pit" brief="MCUBOOT microseconds pit" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/drivers/microseconds" target_path="source/drivers/microseconds" type="c_include">
        <files mask="microseconds.h"/>
      </source>
      <source path="middleware/mcu-boot/src/drivers/microseconds/src" target_path="source/drivers/microseconds" type="src">
        <files mask="microseconds_pit.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.drv_mmcau.MKL28Z7" name="MCUBOOT_mmcau" brief="MCUBOOT mmcau driver" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/drivers/mmcau" target_path="source/drivers/mmcau" type="c_include">
        <files mask="mmcau.h"/>
      </source>
      <source path="middleware/mcu-boot/src/drivers/mmcau/src" target_path="source/drivers/mmcau" type="src">
        <files mask="mmcau_aes_functions.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.bootsources.MKL28Z7" name="MCUBOOT_common_sources" brief="Bootloader common sources" version="2.7.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/autobaud" target_path="source/autobaud" type="c_include">
        <files mask="autobaud.h"/>
      </source>
      <source path="middleware/mcu-boot/src/autobaud/src" target_path="source/autobaud" type="src">
        <files mask="autobaud_irq.c"/>
      </source>
      <source path="middleware/mcu-boot/src/bootloader" target_path="source/bootloader" type="c_include">
        <files mask="bl_peripheral_interface.h"/>
        <files mask="bl_user_entry.h"/>
        <files mask="bl_version.h"/>
        <files mask="bootloader.h"/>
        <files mask="bl_command.h"/>
        <files mask="bl_context.h"/>
        <files mask="bl_peripheral.h"/>
        <files mask="bl_shutdown_cleanup.h"/>
        <files mask="bl_irq_common.h"/>
        <files mask="bl_app_crc_check.h"/>
      </source>
      <source path="middleware/mcu-boot/src/bootloader/src" target_path="source/bootloader/src" type="src">
        <files mask="bl_user_entry.c"/>
        <files mask="bl_main.c"/>
        <files mask="bl_context.c"/>
        <files mask="bl_exception_handler.c"/>
        <files mask="bl_tree_root.c"/>
        <files mask="bl_command.c"/>
        <files mask="bl_shutdown_cleanup.c"/>
        <files mask="bl_app_crc_check.c"/>
        <files mask="bl_misc.c"/>
      </source>
      <source path="middleware/mcu-boot/src/crc" target_path="source/crc" type="c_include">
        <files mask="crc16.h"/>
        <files mask="crc32.h"/>
      </source>
      <source path="middleware/mcu-boot/src/crc/src" target_path="source/crc" type="src">
        <files mask="crc16.c"/>
        <files mask="crc32.c"/>
      </source>
      <source path="middleware/mcu-boot/src/include" target_path="source/include" type="c_include">
        <files mask="bootloader_common.h"/>
      </source>
      <source path="middleware/mcu-boot/src/memory" target_path="source/memory" type="c_include">
        <files mask="memory.h"/>
      </source>
      <source path="middleware/mcu-boot/src/memory/src" target_path="source/memory/src" type="c_include">
        <files mask="sram_init.h"/>
        <files mask="device_memory.h"/>
        <files mask="normal_memory.h"/>
        <files mask="pattern_fill.h"/>
      </source>
      <source path="middleware/mcu-boot/src/memory/src" target_path="source/memory/src" type="src">
        <files mask="memory.c"/>
        <files mask="device_memory.c"/>
        <files mask="normal_memory.c"/>
      </source>
      <source toolchain="mcuxpresso" path="middleware/mcu-boot/src/memory/src" target_path="source/memory/src" type="asm_include">
        <files mask="pattern_fill_gcc.S"/>
      </source>
      <source path="middleware/mcu-boot/src/startup" target_path="startup" type="c_include">
        <files mask="ar_asm_macros.h"/>
      </source>
      <source path="middleware/mcu-boot/src/packet" target_path="source/packet" type="c_include">
        <files mask="command_packet.h"/>
        <files mask="serial_packet.h"/>
      </source>
      <source path="middleware/mcu-boot/src/packet/src" target_path="source/packet/src" type="src">
        <files mask="serial_packet.c"/>
      </source>
      <source path="middleware/mcu-boot/src/property" target_path="source/property" type="c_include">
        <files mask="property.h"/>
      </source>
      <source path="middleware/mcu-boot/src/sbloader" target_path="source/sbloader" type="c_include">
        <files mask="sbloader.h"/>
        <files mask="sb_file_format.h"/>
      </source>
      <source path="middleware/mcu-boot/src/sbloader/src" target_path="source/sbloader/src" type="src">
        <files mask="sbloader.c"/>
      </source>
      <source path="middleware/mcu-boot/src/utilities" target_path="source/utilities" type="c_include">
        <files mask="fsl_rtos_abstraction.h"/>
        <files mask="fsl_assert.h"/>
        <files mask="vector_table_info.h"/>
      </source>
      <source path="middleware/mcu-boot/src/utilities/src" target_path="source/utilities/src" type="src">
        <files mask="fsl_assert.c"/>
        <files mask="fsl_rtos_abstraction.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.bootsources_kinetis.MKL28Z7" name="MCUBOOT_kinetis_sources" brief="Bootloader sources for Kinetis devices" version="2.7.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/drivers/smc" target_path="source/drivers/smc" type="src">
        <files mask="smc.c"/>
      </source>
      <source path="middleware/mcu-boot/src/drivers/smc" target_path="source/drivers/smc" type="c_include">
        <files mask="smc.h"/>
      </source>
      <source path="middleware/mcu-boot/src/memory/src" target_path="source/memory/src" type="c_include">
        <files mask="flash_memory.h"/>
      </source>
      <source path="middleware/mcu-boot/src/memory/src" target_path="source/memory/src" type="src">
        <files mask="flash_memory.c"/>
      </source>
      <source path="middleware/mcu-boot/src/property/src" target_path="source/property/src" type="src">
        <files mask="property_kinetis.c"/>
      </source>
      <source path="middleware/mcu-boot/src/utilities" target_path="source/utilities" type="c_include">
        <files mask="kinetis_family.h"/>
      </source>
      <source path="middleware/mcu-boot/src/bootloader" target_path="source/bootloader" type="c_include">
        <files mask="bl_reliable_update.h"/>
      </source>
      <source path="middleware/mcu-boot/src/bootloader/src" target_path="source/bootloader/src" type="src">
        <files mask="bl_reliable_update.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.loadersources.MKL28Z7" name="MCUBOOT_loader_loader_sources" brief="Flashloader_loader sources" version="2.7.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/bootloader" target_path="source/bootloader" type="c_include">
        <files mask="flashloader_image.h"/>
      </source>
      <source path="middleware/mcu-boot/src/bootloader/src" target_path="source/bootloader" type="src">
        <files mask="bl_flashloader.c"/>
        <files mask="bl_exception_handler.c"/>
      </source>
      <source path="middleware/mcu-boot/src/include" target_path="source/include" type="c_include">
        <files mask="bootloader_common.h"/>
      </source>
      <source path="middleware/mcu-boot/src/utilities" target_path="source/utilities" type="c_include">
        <files mask="vector_table_info.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.CMSIS_cm4_headers.MKL28Z7" name="CMSIS_cm4_headers" brief="CMSIS cm4 headers" version="2.5.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source toolchain="mcuxpresso" path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.CMSIS_cm4_mpu_headers.MKL28Z7" name="CMSIS_cm4_mpu_headers" brief="CMSIS cm4 mpu headers" version="2.5.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source toolchain="mcuxpresso" path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.CMSIS_cm0p_headers.MKL28Z7" name="CMSIS_cm0p_headers" brief="CMSIS cm0p headers" version="2.5.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source toolchain="mcuxpresso" path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.CMSIS_cm7_headers.MKL28Z7" name="CMSIS_cm7_headers" brief="CMSIS cm7 headers" version="2.5.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source toolchain="mcuxpresso" path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="mpu_armv7.h"/>
        <files mask="core_cm7.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.src_startup.MKL28Z7" name="MCUBOOT_startup_sources" brief="Bootloader startup sources" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/startup" target_path="startup" type="src">
        <files mask="startup.c"/>
      </source>
      <source path="middleware/mcu-boot/src/include" target_path="source/include" type="c_include">
        <files mask="bootloader_core.h"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.src_security.MKL28Z7" name="MCUBOOT_security_sources" brief="Bootloader security sources" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/security" target_path="source/security" type="c_include">
        <files mask="aes_security.h"/>
        <files mask="aes128_key_wrap_unwrap.h"/>
        <files mask="cbc_mac.h"/>
      </source>
      <source path="middleware/mcu-boot/src/security/src" target_path="source/security/src" type="src">
        <files mask="aes_security.c"/>
        <files mask="aes128_key_wrap_unwrap.c"/>
        <files mask="cbc_mac.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.src_bm_usb.MKL28Z7" name="MCUBOOT_bm_usb_sources" brief="Bootloader bm usb sources" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source path="middleware/mcu-boot/src/bm_usb" target_path="source/usb/bm_composite" type="c_include">
        <files mask="bootloader_hid_report_ids.h"/>
        <files mask="fat_directory_entry.h"/>
        <files mask="composite.h"/>
        <files mask="hid_bootloader.h"/>
        <files mask="msc_disk.h"/>
        <files mask="usb_descriptor.h"/>
      </source>
      <source path="middleware/mcu-boot/src/bm_usb" target_path="source/usb/bm_composite" type="src">
        <files mask="composite.c"/>
        <files mask="hid_bootloader.c"/>
        <files mask="msc_disk.c"/>
        <files mask="usb_descriptor.c"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.postaction.MKL28Z7" name="MCUBOOT_postaction_scripts" brief="Postaction scripts for flashloader" version="1.0.0" devices="MKL28Z512xxx7" user_visible="false" type="middleware">
      <source toolchain="mcuxpresso" exclude="true" path="middleware/mcu-boot/bin" target_path="postaction" type="script">
        <files mask="elf.py"/>
        <files mask="create_fl_image_mcux.py"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.all_files.MKL28Z7" name="all_files" brief="mcu-boot files" version="2.7.0" devices="MKL28Z512xxx7" user_visible="false" type="other">
      <source exclude="true" path="middleware/mcu-boot/tools/tools/common/blfwk" target_path="middleware/mcu-boot" type="other">
        <files mask="blfwk.vcxproj"/>
        <files mask="blfwk.vcxproj.filters"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/common/blfwkdll" target_path="middleware/mcu-boot" type="other">
        <files mask="blfwk.vcxproj"/>
        <files mask="blfwk.vcxproj.filters"/>
        <files mask="blfwk.vcxproj.user"/>
        <files mask="blfwkdll.vcxproj"/>
        <files mask="blfwkdll.vcxproj.filters"/>
        <files mask="blfwkdll.vcxproj.user"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/common/blfwkdll" target_path="middleware/mcu-boot" type="src">
        <files mask="blfwkdll.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/common/blfwkdll" target_path="middleware/mcu-boot" type="c_include">
        <files mask="blfwkdll.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb" target_path="middleware/mcu-boot" type="other">
        <files mask="elftosb_all.sln"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb" target_path="middleware/mcu-boot" type="c_include">
        <files mask="stdafx.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/common" target_path="middleware/mcu-boot" type="src">
        <files mask="bytes_aes.c"/>
        <files mask="aes128_key_wrap_unwrap.c"/>
        <files mask="SHA1.cpp"/>
        <files mask="stdafx.cpp"/>
        <files mask="EncoreBootImage.cpp"/>
        <files mask="GlobMatcher.cpp"/>
        <files mask="format_string.cpp"/>
        <files mask="HexValues.cpp"/>
        <files mask="Keyblob.cpp"/>
        <files mask="Value.cpp"/>
        <files mask="DataTarget.cpp"/>
        <files mask="DataSource.cpp"/>
        <files mask="StSRecordFile.cpp"/>
        <files mask="ExcludesListMatcher.cpp"/>
        <files mask="Operation.cpp"/>
        <files mask="EvalContext.cpp"/>
        <files mask="Version.cpp"/>
        <files mask="SearchPath.cpp"/>
        <files mask="rijndael.cpp"/>
        <files mask="OutputSection.cpp"/>
        <files mask="SourceFile.cpp"/>
        <files mask="StExecutableImage.cpp"/>
        <files mask="StELFFile.cpp"/>
        <files mask="crc.cpp"/>
        <files mask="SB2Image.cpp"/>
        <files mask="Blob.cpp"/>
        <files mask="AESKey.cpp"/>
        <files mask="DataSourceImager.cpp"/>
        <files mask="iMXImage.cpp"/>
        <files mask="IVTDataSource.cpp"/>
        <files mask="options.cpp"/>
        <files mask="SRecordSourceFile.cpp"/>
        <files mask="Random.cpp"/>
        <files mask="RijndaelCTR.cpp"/>
        <files mask="ELFSourceFile.cpp"/>
        <files mask="OptionDictionary.cpp"/>
        <files mask="EncoreBootImageReader.cpp"/>
        <files mask="GHSSecInfo.cpp"/>
        <files mask="RijndaelCBCMAC.cpp"/>
        <files mask="Logging.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/common" target_path="middleware/mcu-boot" type="c_include">
        <files mask="StELFFile.h"/>
        <files mask="RijndaelCBCMAC.h"/>
        <files mask="StringMatcher.h"/>
        <files mask="EncoreBootImage.h"/>
        <files mask="SRecordSourceFile.h"/>
        <files mask="RijndaelCTR.h"/>
        <files mask="KeyblobEntry.h"/>
        <files mask="crc.h"/>
        <files mask="OutputSection.h"/>
        <files mask="aes128_key_wrap_unwrap.h"/>
        <files mask="Operation.h"/>
        <files mask="GlobMatcher.h"/>
        <files mask="AESCounter.h"/>
        <files mask="Blob.h"/>
        <files mask="ELFSourceFile.h"/>
        <files mask="Logging.h"/>
        <files mask="DataTarget.h"/>
        <files mask="EndianUtilities.h"/>
        <files mask="EncoreBootImageReader.h"/>
        <files mask="BootImage.h"/>
        <files mask="options.h"/>
        <files mask="format_string.h"/>
        <files mask="smart_ptr.h"/>
        <files mask="StSRecordFile.h"/>
        <files mask="SearchPath.h"/>
        <files mask="SHA1.h"/>
        <files mask="iMXImage.h"/>
        <files mask="ELF.h"/>
        <files mask="OptionDictionary.h"/>
        <files mask="HexValues.h"/>
        <files mask="OptionContext.h"/>
        <files mask="IVTDataSource.h"/>
        <files mask="DataSource.h"/>
        <files mask="Version.h"/>
        <files mask="ExcludesListMatcher.h"/>
        <files mask="Random.h"/>
        <files mask="EvalContext.h"/>
        <files mask="GHSSecInfo.h"/>
        <files mask="stdafx.h"/>
        <files mask="AESKey.h"/>
        <files mask="SB2Image.h"/>
        <files mask="rijndael.h"/>
        <files mask="int_size.h"/>
        <files mask="StExecutableImage.h"/>
        <files mask="Value.h"/>
        <files mask="SourceFile.h"/>
        <files mask="DataSourceImager.h"/>
        <files mask="Keyblob.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/winsupport" target_path="middleware/mcu-boot" type="c_include">
        <files mask="unistd.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/elftosb2" target_path="middleware/mcu-boot" type="c_include">
        <files mask="EncoreBootImageGenerator.h"/>
        <files mask="ElftosbAST.h"/>
        <files mask="ElftosbLexer.h"/>
        <files mask="iMXImageGenerator.h"/>
        <files mask="SB2ImageGenerator.h"/>
        <files mask="BootImageGenerator.h"/>
        <files mask="ElftosbErrors.h"/>
        <files mask="ConversionController.h"/>
        <files mask="FlexLexer.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/elftosb2" target_path="middleware/mcu-boot" type="other">
        <files mask="elftosb_parser.tab.hpp"/>
        <files mask="elftosb2.vcproj"/>
        <files mask="elftosb2.vcxproj"/>
        <files mask="elftosb2.vcxproj.filters"/>
        <files mask="elftosb_lexer.l"/>
        <files mask="elftosb_parser.y"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/elftosb2" target_path="middleware/mcu-boot" type="src">
        <files mask="BootImageGenerator.cpp"/>
        <files mask="ElftosbAST.cpp"/>
        <files mask="ElftosbLexer.cpp"/>
        <files mask="SB2ImageGenerator.cpp"/>
        <files mask="iMXImageGenerator.cpp"/>
        <files mask="elftosb_lexer.cpp"/>
        <files mask="EncoreBootImageGenerator.cpp"/>
        <files mask="ConversionController.cpp"/>
        <files mask="elftosb.cpp"/>
        <files mask="elftosb_parser.tab.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/encryptgpk" target_path="middleware/mcu-boot" type="src">
        <files mask="encryptgpk.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/encryptgpk" target_path="middleware/mcu-boot" type="other">
        <files mask="encryptgpk.vcproj"/>
        <files mask="encryptgpk.vcxproj"/>
        <files mask="encryptgpk.vcxproj.filters"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/keygen" target_path="middleware/mcu-boot" type="src">
        <files mask="keygen.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/keygen" target_path="middleware/mcu-boot" type="other">
        <files mask="keygen.vcproj"/>
        <files mask="keygen.vcxproj"/>
        <files mask="keygen.vcxproj.filters"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/sbtool" target_path="middleware/mcu-boot" type="c_include">
        <files mask="EncoreBootImageReader.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/sbtool" target_path="middleware/mcu-boot" type="src">
        <files mask="sbtool.cpp"/>
        <files mask="EncoreBootImageReader.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/sbtool" target_path="middleware/mcu-boot" type="other">
        <files mask="sbtool.vcproj"/>
        <files mask="sbtool.vcxproj"/>
        <files mask="sbtool.vcxproj.filters"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/configs" target_path="middleware/mcu-boot" type="c_include">
        <files mask="config-suite-b.h"/>
        <files mask="config-picocoin.h"/>
        <files mask="config-mini-tls1_1.h"/>
        <files mask="config-ccm-psk-tls1_2.h"/>
        <files mask="config-thread.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/configs" target_path="middleware/mcu-boot" type="doc">
        <files mask="README.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/include" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/include/mbedtls" target_path="middleware/mcu-boot" type="c_include">
        <files mask="sha1.h"/>
        <files mask="md.h"/>
        <files mask="pkcs5.h"/>
        <files mask="cipher_internal.h"/>
        <files mask="sha256.h"/>
        <files mask="des.h"/>
        <files mask="aesni.h"/>
        <files mask="x509_crt.h"/>
        <files mask="ssl_ticket.h"/>
        <files mask="ssl_cookie.h"/>
        <files mask="ctr_drbg.h"/>
        <files mask="config.h"/>
        <files mask="oid.h"/>
        <files mask="md2.h"/>
        <files mask="md5.h"/>
        <files mask="ecjpake.h"/>
        <files mask="ccm.h"/>
        <files mask="ripemd160.h"/>
        <files mask="x509.h"/>
        <files mask="version.h"/>
        <files mask="entropy.h"/>
        <files mask="aes.h"/>
        <files mask="ecdsa.h"/>
        <files mask="xtea.h"/>
        <files mask="cipher.h"/>
        <files mask="pkcs12.h"/>
        <files mask="ssl_cache.h"/>
        <files mask="error.h"/>
        <files mask="ssl_ciphersuites.h"/>
        <files mask="padlock.h"/>
        <files mask="x509_csr.h"/>
        <files mask="net.h"/>
        <files mask="check_config.h"/>
        <files mask="pkcs11.h"/>
        <files mask="sha512.h"/>
        <files mask="camellia.h"/>
        <files mask="havege.h"/>
        <files mask="entropy_poll.h"/>
        <files mask="threading.h"/>
        <files mask="memory_buffer_alloc.h"/>
        <files mask="pk.h"/>
        <files mask="asn1write.h"/>
        <files mask="ecp.h"/>
        <files mask="blowfish.h"/>
        <files mask="bn_mul.h"/>
        <files mask="bignum.h"/>
        <files mask="ssl_internal.h"/>
        <files mask="md4.h"/>
        <files mask="base64.h"/>
        <files mask="x509_crl.h"/>
        <files mask="arc4.h"/>
        <files mask="timing.h"/>
        <files mask="ecdh.h"/>
        <files mask="gcm.h"/>
        <files mask="hmac_drbg.h"/>
        <files mask="md_internal.h"/>
        <files mask="compat-1.3.h"/>
        <files mask="pem.h"/>
        <files mask="debug.h"/>
        <files mask="ssl.h"/>
        <files mask="dhm.h"/>
        <files mask="certs.h"/>
        <files mask="asn1.h"/>
        <files mask="pk_internal.h"/>
        <files mask="platform.h"/>
        <files mask="rsa.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/library" target_path="middleware/mcu-boot" type="src">
        <files mask="net.c"/>
        <files mask="pkcs11.c"/>
        <files mask="version_features.c"/>
        <files mask="camellia.c"/>
        <files mask="havege.c"/>
        <files mask="timing.c"/>
        <files mask="ecdh.c"/>
        <files mask="padlock.c"/>
        <files mask="threading.c"/>
        <files mask="debug.c"/>
        <files mask="gcm.c"/>
        <files mask="pkwrite.c"/>
        <files mask="entropy.c"/>
        <files mask="x509_crl.c"/>
        <files mask="asn1write.c"/>
        <files mask="oid.c"/>
        <files mask="arc4.c"/>
        <files mask="x509_csr.c"/>
        <files mask="x509_crt.c"/>
        <files mask="entropy_poll.c"/>
        <files mask="base64.c"/>
        <files mask="asn1parse.c"/>
        <files mask="ccm.c"/>
        <files mask="md2.c"/>
        <files mask="pem.c"/>
        <files mask="ecjpake.c"/>
        <files mask="ecp.c"/>
        <files mask="pkcs12.c"/>
        <files mask="dhm.c"/>
        <files mask="aes.c"/>
        <files mask="cipher.c"/>
        <files mask="md4.c"/>
        <files mask="md_wrap.c"/>
        <files mask="hmac_drbg.c"/>
        <files mask="ssl_cli.c"/>
        <files mask="des.c"/>
        <files mask="x509.c"/>
        <files mask="rsa.c"/>
        <files mask="md5.c"/>
        <files mask="sha256.c"/>
        <files mask="xtea.c"/>
        <files mask="ecp_curves.c"/>
        <files mask="md.c"/>
        <files mask="ssl_ticket.c"/>
        <files mask="certs.c"/>
        <files mask="x509write_csr.c"/>
        <files mask="cipher_wrap.c"/>
        <files mask="pk_wrap.c"/>
        <files mask="ssl_cache.c"/>
        <files mask="platform.c"/>
        <files mask="ssl_cookie.c"/>
        <files mask="ctr_drbg.c"/>
        <files mask="version.c"/>
        <files mask="x509write_crt.c"/>
        <files mask="sha1.c"/>
        <files mask="blowfish.c"/>
        <files mask="ssl_tls.c"/>
        <files mask="bignum.c"/>
        <files mask="ssl_ciphersuites.c"/>
        <files mask="pk.c"/>
        <files mask="memory_buffer_alloc.c"/>
        <files mask="pkcs5.c"/>
        <files mask="aesni.c"/>
        <files mask="ecdsa.c"/>
        <files mask="x509_create.c"/>
        <files mask="sha512.c"/>
        <files mask="ripemd160.c"/>
        <files mask="error.c"/>
        <files mask="pkparse.c"/>
        <files mask="ssl_srv.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/library" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/aes" target_path="middleware/mcu-boot" type="src">
        <files mask="crypt_and_hash.c"/>
        <files mask="aescrypt2.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/aes" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/hash" target_path="middleware/mcu-boot" type="src">
        <files mask="hello.c"/>
        <files mask="generic_sum.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/hash" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/pkey" target_path="middleware/mcu-boot" type="src">
        <files mask="rsa_genkey.c"/>
        <files mask="pk_verify.c"/>
        <files mask="rsa_encrypt.c"/>
        <files mask="dh_genprime.c"/>
        <files mask="key_app_writer.c"/>
        <files mask="rsa_decrypt.c"/>
        <files mask="pk_encrypt.c"/>
        <files mask="ecdh_curve25519.c"/>
        <files mask="rsa_sign.c"/>
        <files mask="pk_sign.c"/>
        <files mask="dh_client.c"/>
        <files mask="gen_key.c"/>
        <files mask="rsa_verify_pss.c"/>
        <files mask="pk_decrypt.c"/>
        <files mask="mpi_demo.c"/>
        <files mask="dh_server.c"/>
        <files mask="rsa_sign_pss.c"/>
        <files mask="ecdsa.c"/>
        <files mask="rsa_verify.c"/>
        <files mask="key_app.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/pkey" target_path="middleware/mcu-boot" type="doc">
        <files mask="rsa_pub.txt"/>
        <files mask="rsa_priv.txt"/>
        <files mask="CMakeLists.txt"/>
        <files mask="dh_prime.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/random" target_path="middleware/mcu-boot" type="src">
        <files mask="gen_entropy.c"/>
        <files mask="gen_random_havege.c"/>
        <files mask="gen_random_ctr_drbg.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/random" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/ssl" target_path="middleware/mcu-boot" type="src">
        <files mask="ssl_mail_client.c"/>
        <files mask="ssl_pthread_server.c"/>
        <files mask="ssl_server.c"/>
        <files mask="mini_client.c"/>
        <files mask="dtls_server.c"/>
        <files mask="ssl_client1.c"/>
        <files mask="ssl_fork_server.c"/>
        <files mask="dtls_client.c"/>
        <files mask="ssl_server2.c"/>
        <files mask="ssl_client2.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/ssl" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/test" target_path="middleware/mcu-boot" type="src">
        <files mask="selftest.c"/>
        <files mask="udp_proxy.c"/>
        <files mask="ssl_cert_test.c"/>
        <files mask="benchmark.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/test" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/util" target_path="middleware/mcu-boot" type="src">
        <files mask="pem2der.c"/>
        <files mask="strerror.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/util" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/x509" target_path="middleware/mcu-boot" type="src">
        <files mask="cert_req.c"/>
        <files mask="cert_app.c"/>
        <files mask="cert_write.c"/>
        <files mask="req_app.c"/>
        <files mask="crl_app.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs/x509" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs" target_path="middleware/mcu-boot" type="src">
        <files mask="wince_main.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/programs" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/scripts" target_path="middleware/mcu-boot" type="other">
        <files mask="massif_max.pl"/>
        <files mask="rename.pl"/>
        <files mask="malloc-init.pl"/>
        <files mask="generate_features.pl"/>
        <files mask="generate_errors.pl"/>
        <files mask="config.pl"/>
        <files mask="rm-malloc-cast.cocci"/>
        <files mask="generate_visualc_files.pl"/>
        <files mask="find-mem-leak.cocci"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/scripts" target_path="middleware/mcu-boot" type="script">
        <files mask="footprint.sh"/>
        <files mask="apidoc_full.sh"/>
        <files mask="ecc-heap.sh"/>
        <files mask="tmp_ignore_makefiles.sh"/>
        <files mask="bump_version.sh"/>
        <files mask="memory.sh"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/scripts/data_files" target_path="middleware/mcu-boot" type="other">
        <files mask="vs2010-main-template.vcxproj"/>
        <files mask="vs2010-sln-template.sln"/>
        <files mask="vs6-workspace-template.dsw"/>
        <files mask="error.fmt"/>
        <files mask="version_features.fmt"/>
        <files mask="vs6-app-template.dsp"/>
        <files mask="vs6-main-template.dsp"/>
        <files mask="vs2010-app-template.vcxproj"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/scripts/data_files" target_path="middleware/mcu-boot" type="doc">
        <files mask="rename-1.3-2.0.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/data_files" target_path="middleware/mcu-boot" type="other">
        <files mask="server1.crt"/>
        <files mask="server1.req.ku-ct"/>
        <files mask="server2-v1-chain.crt"/>
        <files mask="ec_prv.pk8.der"/>
        <files mask="server5.eku-cli.crt"/>
        <files mask="server5.req.sha384"/>
        <files mask="crl.pem"/>
        <files mask="dh.1000.pem"/>
        <files mask="server5.crt"/>
        <files mask="crl-future.pem"/>
        <files mask="crt_cat_rsaexp-ec.pem"/>
        <files mask="test-ca2.ku-crl.crt"/>
        <files mask="rsa4096_prv.pem"/>
        <files mask="cert_sha384.crt"/>
        <files mask="server9.req.sha224"/>
        <files mask="server4.crt"/>
        <files mask="server5-der1a.crt"/>
        <files mask="server10.key"/>
        <files mask="server10_int3_int-ca2_ca.crt"/>
        <files mask="crl-rsa-pss-sha256.pem"/>
        <files mask="server2.crt"/>
        <files mask="server5-sha224.crt"/>
        <files mask="cert_v1_with_ext.crt"/>
        <files mask="server9.req.sha512"/>
        <files mask="pkcs8_pbe_sha1_rc4_128.key"/>
        <files mask="test-ca2.key"/>
        <files mask="server8.key"/>
        <files mask="server5-der1b.crt"/>
        <files mask="server1.req.md5"/>
        <files mask="crl-ec-sha512.pem"/>
        <files mask="test-ca2.ku-crt.crt"/>
        <files mask="test-ca2.crt"/>
        <files mask="server9-defaults.crt"/>
        <files mask="crl_expired.pem"/>
        <files mask="test-int-ca.crt"/>
        <files mask="server1.pubkey"/>
        <files mask="crl-rsa-pss-sha384.pem"/>
        <files mask="server5.eku-cs.crt"/>
        <files mask="test-ca2.ku-ds.crt"/>
        <files mask="ec_pub.der"/>
        <files mask="test-ca.key"/>
        <files mask="server5-future.crt"/>
        <files mask="server9.req.sha384"/>
        <files mask="keyfile.aes192"/>
        <files mask="cert_sha512.crt"/>
        <files mask="cert_sha1.crt"/>
        <files mask="server1.cert_type.crt"/>
        <files mask="crl-rsa-pss-sha1.pem"/>
        <files mask="server7.key"/>
        <files mask="crl-rsa-pss-sha512.pem"/>
        <files mask="cert_example_multi.crt"/>
        <files mask="keyUsage.decipherOnly.crt"/>
        <files mask="server5-der8.crt"/>
        <files mask="server9-sha384.crt"/>
        <files mask="crl_sha256.pem"/>
        <files mask="cert_example_wildcard.crt"/>
        <files mask="keyfile.aes128"/>
        <files mask="ec_prv.sec1.pw.pem"/>
        <files mask="server1.ext_ku.crt"/>
        <files mask="server5.eku-cs_any.crt"/>
        <files mask="passwd.psk"/>
        <files mask="server9-sha256.crt"/>
        <files mask="test-int-ca3.key"/>
        <files mask="ec_prv.noopt.der"/>
        <files mask="crl_sha224.pem"/>
        <files mask="server5-der2.crt"/>
        <files mask="cert_md2.crt"/>
        <files mask="ec_prv.pk8.pem"/>
        <files mask="test-ca.crt"/>
        <files mask="server2-v1.crt"/>
        <files mask="server1-nospace.crt"/>
        <files mask="cert_example_multi_nocn.crt"/>
        <files mask="server5.ku-ds.crt"/>
        <files mask="ec_256_pub.pem"/>
        <files mask="format_pkcs12.fmt"/>
        <files mask="ec_384_prv.pem"/>
        <files mask="pkcs8_pbe_sha1_3des.key"/>
        <files mask="crl-ec-sha224.pem"/>
        <files mask="server5-der0.crt"/>
        <files mask="server8_int-ca2.crt"/>
        <files mask="test-int-ca.key"/>
        <files mask="server5.eku-srv_cli.crt"/>
        <files mask="pkcs8_pbes2_pbkdf2_3des.key"/>
        <files mask="ec_prv.pk8.pw.der"/>
        <files mask="ec_bp384_pub.pem"/>
        <files mask="ec_256_prv.pem"/>
        <files mask="format_gen.key"/>
        <files mask="server6-ss-child.crt"/>
        <files mask="cli2.crt"/>
        <files mask="server5.eku-srv.crt"/>
        <files mask="server6.key"/>
        <files mask="crl-ec-sha256.pem"/>
        <files mask="crl-ec-sha1.pem"/>
        <files mask="server7_int-ca.crt"/>
        <files mask="ec_384_pub.pem"/>
        <files mask="server1.req.sha512"/>
        <files mask="pkcs8_pbes2_pbkdf2_3des.der"/>
        <files mask="server5-sha1.crt"/>
        <files mask="ec_prv.specdom.der"/>
        <files mask="crl_sha384.pem"/>
        <files mask="test-ca2.ku-crt_crl.crt"/>
        <files mask="server2.ku-ds.crt"/>
        <files mask="crl_cat_rsabadpem-ec.pem"/>
        <files mask="bitstring-in-dn.pem"/>
        <files mask="crl_md5.pem"/>
        <files mask="test-ca-v1.crt"/>
        <files mask="dh.optlen.pem"/>
        <files mask="pkcs8_pbe_sha1_2des.key"/>
        <files mask="server5.req.sha256"/>
        <files mask="server7_int-ca_ca2.crt"/>
        <files mask="cert_md4.crt"/>
        <files mask="test-ca_cat21.crt"/>
        <files mask="server1.req.key_usage"/>
        <files mask="server1_ca.crt"/>
        <files mask="ec_bp384_prv.pem"/>
        <files mask="server7.crt"/>
        <files mask="server9-sha224.crt"/>
        <files mask="server1.req.sha224"/>
        <files mask="server1.v1.crt"/>
        <files mask="server6.crt"/>
        <files mask="server2.ku-ds_ke.crt"/>
        <files mask="ec_prv.pk8.pw.pem"/>
        <files mask="ec_bp256_prv.pem"/>
        <files mask="server5-sha384.crt"/>
        <files mask="cli2.key"/>
        <files mask="server1.req.cert_type"/>
        <files mask="ec_pub.pem"/>
        <files mask="server5-sha512.crt"/>
        <files mask="server5.req.ku.sha1"/>
        <files mask="rsa4096_pub.pem"/>
        <files mask="server5.req.sha224"/>
        <files mask="server3.key"/>
        <files mask="server9-bad-mgfhash.crt"/>
        <files mask="crl-rsa-pss-sha224.pem"/>
        <files mask="crl_cat_rsa-ec.pem"/>
        <files mask="pkcs8_pbes2_pbkdf2_des.key"/>
        <files mask="test-ca2_cat-present-future.crt"/>
        <files mask="server5.ku-ke.crt"/>
        <files mask="pkcs8_pbe_sha1_3des.der"/>
        <files mask="ec_prv.sec1.der"/>
        <files mask="server8.crt"/>
        <files mask="server9.key"/>
        <files mask="ec_bp256_pub.pem"/>
        <files mask="server9-badsign.crt"/>
        <files mask="server9-with-ca.crt"/>
        <files mask="test-int-ca2.key"/>
        <files mask="server4.key"/>
        <files mask="server9-bad-saltlen.crt"/>
        <files mask="server5.req.sha512"/>
        <files mask="server5.ku-ka.crt"/>
        <files mask="test-int-ca2.crt"/>
        <files mask="server5.key"/>
        <files mask="crl_sha512.pem"/>
        <files mask="server2.key"/>
        <files mask="keyfile.3des"/>
        <files mask="server2.ku-ke.crt"/>
        <files mask="cert_md5.crt"/>
        <files mask="server1-v1.crt"/>
        <files mask="keyfile.aes256"/>
        <files mask="server5-selfsigned.crt"/>
        <files mask="server5-der9.crt"/>
        <files mask="enco-ca-prstr.pem"/>
        <files mask="server5-der4.crt"/>
        <files mask="server10_int3_int-ca2.crt"/>
        <files mask="server9.req.sha1"/>
        <files mask="ec_bp512_prv.pem"/>
        <files mask="crl-rsa-pss-sha1-badsign.pem"/>
        <files mask="server5-expired.crt"/>
        <files mask="server3.crt"/>
        <files mask="server1.req.md4"/>
        <files mask="server9.crt"/>
        <files mask="enco-cert-utf8str.pem"/>
        <files mask="crl-ec-sha384.pem"/>
        <files mask="dhparams.pem"/>
        <files mask="keyfile.des"/>
        <files mask="server2.ku-ka.crt"/>
        <files mask="server1.key"/>
        <files mask="server9-sha512.crt"/>
        <files mask="format_gen.pub"/>
        <files mask="test-ca2_cat-past-present.crt"/>
        <files mask="test-int-ca3.crt"/>
        <files mask="test-ca_cat12.crt"/>
        <files mask="test-ca2_cat-present-past.crt"/>
        <files mask="crl_md2.pem"/>
        <files mask="ec_224_pub.pem"/>
        <files mask="test-ca2_cat-future-present.crt"/>
        <files mask="server5.req.sha1"/>
        <files mask="format_rsa.key"/>
        <files mask="cert_sha224.crt"/>
        <files mask="crl_cat_ecfut-rsa.pem"/>
        <files mask="server1.key_usage.crt"/>
        <files mask="server7_all_space.crt"/>
        <files mask="ec_521_prv.pem"/>
        <files mask="server1.req.sha1"/>
        <files mask="ec_bp512_pub.pem"/>
        <files mask="crl_sha1.pem"/>
        <files mask="crl_md4.pem"/>
        <files mask="ec_prv.sec1.pem"/>
        <files mask="server1.req.sha384"/>
        <files mask="crl_cat_ec-rsa.pem"/>
        <files mask="ec_521_pub.pem"/>
        <files mask="server2-badsign.crt"/>
        <files mask="ec_224_prv.pem"/>
        <files mask="cert_sha256.crt"/>
        <files mask="server9.req.sha256"/>
        <files mask="server7_trailing_space.crt"/>
        <files mask="server5-badsign.crt"/>
        <files mask="server1.req.sha256"/>
        <files mask="server7_pem_space.crt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/data_files" target_path="middleware/mcu-boot" type="doc">
        <files mask="Readme-x509.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/data_files/dir1" target_path="middleware/mcu-boot" type="other">
        <files mask="test-ca.crt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/data_files/dir2" target_path="middleware/mcu-boot" type="other">
        <files mask="test-ca2.crt"/>
        <files mask="test-ca.crt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/data_files/dir3" target_path="middleware/mcu-boot" type="other">
        <files mask="test-ca2.crt"/>
        <files mask="test-ca.crt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/data_files/dir4" target_path="middleware/mcu-boot" type="other">
        <files mask="cert72.crt"/>
        <files mask="cert44.crt"/>
        <files mask="cert74.crt"/>
        <files mask="cert45.crt"/>
        <files mask="cert12.crt"/>
        <files mask="cert54.crt"/>
        <files mask="cert52.crt"/>
        <files mask="cert53.crt"/>
        <files mask="cert81.crt"/>
        <files mask="cert32.crt"/>
        <files mask="cert92.crt"/>
        <files mask="cert22.crt"/>
        <files mask="cert83.crt"/>
        <files mask="cert62.crt"/>
        <files mask="cert71.crt"/>
        <files mask="cert14.crt"/>
        <files mask="cert23.crt"/>
        <files mask="cert33.crt"/>
        <files mask="cert31.crt"/>
        <files mask="cert34.crt"/>
        <files mask="cert63.crt"/>
        <files mask="cert43.crt"/>
        <files mask="cert51.crt"/>
        <files mask="cert41.crt"/>
        <files mask="cert11.crt"/>
        <files mask="cert42.crt"/>
        <files mask="cert21.crt"/>
        <files mask="cert82.crt"/>
        <files mask="cert13.crt"/>
        <files mask="cert61.crt"/>
        <files mask="cert91.crt"/>
        <files mask="cert73.crt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/suites" target_path="middleware/mcu-boot" type="other">
        <files mask="test_suite_ecp.function"/>
        <files mask="test_suite_memory_buffer_alloc.function"/>
        <files mask="test_suite_hmac_drbg.pr.data"/>
        <files mask="test_suite_asn1write.data"/>
        <files mask="test_suite_pkcs5.function"/>
        <files mask="test_suite_shax.function"/>
        <files mask="test_suite_cipher.camellia.data"/>
        <files mask="test_suite_gcm.function"/>
        <files mask="test_suite_gcm.aes256_en.data"/>
        <files mask="test_suite_md.data"/>
        <files mask="test_suite_dhm.data"/>
        <files mask="test_suite_ecdsa.data"/>
        <files mask="test_suite_cipher.null.data"/>
        <files mask="test_suite_xtea.data"/>
        <files mask="test_suite_rsa.function"/>
        <files mask="test_suite_aes.cfb.data"/>
        <files mask="test_suite_gcm.aes192_en.data"/>
        <files mask="test_suite_pk.data"/>
        <files mask="test_suite_aes.cbc.data"/>
        <files mask="test_suite_ecdh.function"/>
        <files mask="test_suite_ccm.function"/>
        <files mask="test_suite_aes.rest.data"/>
        <files mask="test_suite_ecdh.data"/>
        <files mask="test_suite_pkcs1_v21.data"/>
        <files mask="test_suite_arc4.data"/>
        <files mask="test_suite_cipher.blowfish.data"/>
        <files mask="test_suite_blowfish.function"/>
        <files mask="helpers.function"/>
        <files mask="test_suite_entropy.function"/>
        <files mask="test_suite_dhm.function"/>
        <files mask="test_suite_entropy.data"/>
        <files mask="test_suite_x509parse.data"/>
        <files mask="test_suite_cipher.function"/>
        <files mask="test_suite_mdx.data"/>
        <files mask="test_suite_hmac_drbg.nopr.data"/>
        <files mask="test_suite_pkcs1_v21.function"/>
        <files mask="test_suite_blowfish.data"/>
        <files mask="test_suite_hmac_drbg.no_reseed.data"/>
        <files mask="test_suite_debug.data"/>
        <files mask="test_suite_rsa.data"/>
        <files mask="test_suite_mpi.function"/>
        <files mask="test_suite_gcm.camellia.data"/>
        <files mask="test_suite_ssl.function"/>
        <files mask="test_suite_des.function"/>
        <files mask="test_suite_ecdsa.function"/>
        <files mask="test_suite_ecjpake.data"/>
        <files mask="test_suite_mpi.data"/>
        <files mask="test_suite_pkcs1_v15.function"/>
        <files mask="test_suite_ecp.data"/>
        <files mask="test_suite_memory_buffer_alloc.data"/>
        <files mask="test_suite_cipher.aes.data"/>
        <files mask="test_suite_version.function"/>
        <files mask="test_suite_md.function"/>
        <files mask="test_suite_version.data"/>
        <files mask="test_suite_arc4.function"/>
        <files mask="test_suite_pkcs1_v15.data"/>
        <files mask="test_suite_des.data"/>
        <files mask="test_suite_x509write.function"/>
        <files mask="test_suite_x509write.data"/>
        <files mask="test_suite_ccm.data"/>
        <files mask="test_suite_asn1write.function"/>
        <files mask="test_suite_camellia.data"/>
        <files mask="test_suite_pkparse.function"/>
        <files mask="test_suite_pk.function"/>
        <files mask="test_suite_pkparse.data"/>
        <files mask="test_suite_cipher.des.data"/>
        <files mask="test_suite_camellia.function"/>
        <files mask="test_suite_cipher.ccm.data"/>
        <files mask="test_suite_base64.data"/>
        <files mask="test_suite_hmac_drbg.function"/>
        <files mask="test_suite_ssl.data"/>
        <files mask="test_suite_pkwrite.function"/>
        <files mask="test_suite_gcm.aes128_de.data"/>
        <files mask="test_suite_hmac_drbg.misc.data"/>
        <files mask="test_suite_cipher.arc4.data"/>
        <files mask="test_suite_aes.function"/>
        <files mask="test_suite_aes.ecb.data"/>
        <files mask="test_suite_cipher.gcm.data"/>
        <files mask="main_test.function"/>
        <files mask="test_suite_debug.function"/>
        <files mask="test_suite_pkwrite.data"/>
        <files mask="test_suite_pem.data"/>
        <files mask="test_suite_error.data"/>
        <files mask="test_suite_ctr_drbg.data"/>
        <files mask="test_suite_pkcs5.data"/>
        <files mask="test_suite_ctr_drbg.function"/>
        <files mask="test_suite_cipher.padding.data"/>
        <files mask="test_suite_gcm.aes192_de.data"/>
        <files mask="test_suite_gcm.aes256_de.data"/>
        <files mask="test_suite_pem.function"/>
        <files mask="test_suite_gcm.aes128_en.data"/>
        <files mask="test_suite_mdx.function"/>
        <files mask="test_suite_xtea.function"/>
        <files mask="test_suite_x509parse.function"/>
        <files mask="test_suite_ecjpake.function"/>
        <files mask="test_suite_base64.function"/>
        <files mask="test_suite_error.function"/>
        <files mask="test_suite_shax.data"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/scripts" target_path="middleware/mcu-boot" type="script">
        <files mask="basic-build-test.sh"/>
        <files mask="list-identifiers.sh"/>
        <files mask="check-names.sh"/>
        <files mask="list-macros.sh"/>
        <files mask="generate-afl-tests.sh"/>
        <files mask="doxygen.sh"/>
        <files mask="list-symbols.sh"/>
        <files mask="travis-log-failure.sh"/>
        <files mask="check-generated-files.sh"/>
        <files mask="all.sh"/>
        <files mask="yotta-build.sh"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests/scripts" target_path="middleware/mcu-boot" type="other">
        <files mask="test-ref-configs.pl"/>
        <files mask="recursion.pl"/>
        <files mask="gen_ctr_drbg.pl"/>
        <files mask="run-test-suites.pl"/>
        <files mask="gen_gcm_decrypt.pl"/>
        <files mask="key-exchanges.pl"/>
        <files mask="gen_pkcs1_v21_sign_verify.pl"/>
        <files mask="curves.pl"/>
        <files mask="list-enum-consts.pl"/>
        <files mask="generate_code.pl"/>
        <files mask="gen_gcm_encrypt.pl"/>
        <files mask="check-doxy-blocks.pl"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
        <files mask="Descriptions.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/tests" target_path="middleware/mcu-boot" type="script">
        <files mask="ssl-opt.sh"/>
        <files mask="compat.sh"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls/visualc/VS2010" target_path="middleware/mcu-boot" type="other">
        <files mask="pk_encrypt.vcxproj"/>
        <files mask="ssl_server2.vcxproj"/>
        <files mask="sha2sum.vcxproj"/>
        <files mask="mbedTLS.vcxproj"/>
        <files mask="ssl_client2.vcxproj"/>
        <files mask="md5sum.vcxproj"/>
        <files mask="key_app.vcxproj"/>
        <files mask="gen_random_havege.vcxproj"/>
        <files mask="crypt_and_hash.vcxproj"/>
        <files mask="rsa_sign_pss.vcxproj"/>
        <files mask="sha1sum.vcxproj"/>
        <files mask="strerror.vcxproj"/>
        <files mask="rsa_genkey.vcxproj"/>
        <files mask="pk_verify.vcxproj"/>
        <files mask="cert_app.vcxproj"/>
        <files mask="ecdsa.vcxproj"/>
        <files mask="rsa_encrypt.vcxproj"/>
        <files mask="ssl_mail_client.vcxproj"/>
        <files mask="dh_client.vcxproj"/>
        <files mask="key_app_writer.vcxproj"/>
        <files mask="benchmark.vcxproj"/>
        <files mask="rsa_verify.vcxproj"/>
        <files mask="hello.vcxproj"/>
        <files mask="rsa_sign.vcxproj"/>
        <files mask="req_app.vcxproj"/>
        <files mask="gen_key.vcxproj"/>
        <files mask="ssl_client1.vcxproj"/>
        <files mask="gen_random_ctr_drbg.vcxproj"/>
        <files mask="gen_entropy.vcxproj"/>
        <files mask="mini_client.vcxproj"/>
        <files mask="dtls_client.vcxproj"/>
        <files mask="cert_req.vcxproj"/>
        <files mask="ssl_server.vcxproj"/>
        <files mask="ssl_fork_server.vcxproj"/>
        <files mask="mbedTLS.sln"/>
        <files mask="cert_write.vcxproj"/>
        <files mask="udp_proxy.vcxproj"/>
        <files mask="dh_genprime.vcxproj"/>
        <files mask="rsa_verify_pss.vcxproj"/>
        <files mask="generic_sum.vcxproj"/>
        <files mask="crl_app.vcxproj"/>
        <files mask="pk_sign.vcxproj"/>
        <files mask="pem2der.vcxproj"/>
        <files mask="mpi_demo.vcxproj"/>
        <files mask="rsa_decrypt.vcxproj"/>
        <files mask="selftest.vcxproj"/>
        <files mask="pk_decrypt.vcxproj"/>
        <files mask="dtls_server.vcxproj"/>
        <files mask="aescrypt2.vcxproj"/>
        <files mask="ssl_cert_test.vcxproj"/>
        <files mask="dh_server.vcxproj"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/elftosb/mbedtls" target_path="middleware/mcu-boot" type="doc">
        <files mask="CMakeLists.txt"/>
        <files mask="apache-2.0.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/blhost/win" target_path="middleware/mcu-boot" type="other">
        <files mask="blhost.exe"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/elftosb/win" target_path="middleware/mcu-boot" type="other">
        <files mask="elftosb.exe"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/doc" target_path="middleware/mcu-boot" type="doc">
        <files mask="blhost User's Guide.pdf"/>
        <files mask="elftosb User's Guide.pdf"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/blfwk" target_path="middleware/mcu-boot" type="c_include">
        <files mask="StELFFile.h"/>
        <files mask="host_types.h"/>
        <files mask="SDPCommand.h"/>
        <files mask="StringMatcher.h"/>
        <files mask="SRecordSourceFile.h"/>
        <files mask="Bootloader.h"/>
        <files mask="RijndaelCTR.h"/>
        <files mask="serial.h"/>
        <files mask="Updater.h"/>
        <files mask="SimPacketizer.h"/>
        <files mask="bootloader_config.h"/>
        <files mask="IntelHexSourceFile.h"/>
        <files mask="SDPUsbHidPacketizer.h"/>
        <files mask="GlobMatcher.h"/>
        <files mask="BlfwkErrors.h"/>
        <files mask="AESCounter.h"/>
        <files mask="Blob.h"/>
        <files mask="ELFSourceFile.h"/>
        <files mask="Logging.h"/>
        <files mask="DataTarget.h"/>
        <files mask="Simulator.h"/>
        <files mask="EndianUtilities.h"/>
        <files mask="StIntelHexFile.h"/>
        <files mask="hidapi.h"/>
        <files mask="options.h"/>
        <files mask="format_string.h"/>
        <files mask="UsbHidPeripheral.h"/>
        <files mask="smart_ptr.h"/>
        <files mask="StSRecordFile.h"/>
        <files mask="SearchPath.h"/>
        <files mask="SimPeripheral.h"/>
        <files mask="ELF.h"/>
        <files mask="HexValues.h"/>
        <files mask="OptionContext.h"/>
        <files mask="json.h"/>
        <files mask="BusPalPeripheral.h"/>
        <files mask="Packetizer.h"/>
        <files mask="DataSource.h"/>
        <files mask="Command.h"/>
        <files mask="ExcludesListMatcher.h"/>
        <files mask="Random.h"/>
        <files mask="GHSSecInfo.h"/>
        <files mask="SimulatorMemory.h"/>
        <files mask="BusPal.h"/>
        <files mask="Crc.h"/>
        <files mask="stdafx.h"/>
        <files mask="SerialPacketizer.h"/>
        <files mask="SBSourceFile.h"/>
        <files mask="UsbHidPacketizer.h"/>
        <files mask="AESKey.h"/>
        <files mask="rijndael.h"/>
        <files mask="int_size.h"/>
        <files mask="SDPUartPacketizer.h"/>
        <files mask="StExecutableImage.h"/>
        <files mask="Value.h"/>
        <files mask="UartPeripheral.h"/>
        <files mask="Progress.h"/>
        <files mask="SourceFile.h"/>
        <files mask="utils.h"/>
        <files mask="Peripheral.h"/>
        <files mask="DataSourceImager.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/blfwk/src" target_path="middleware/mcu-boot" type="src">
        <files mask="SimPacketizer.cpp"/>
        <files mask="Crc.cpp"/>
        <files mask="GlobMatcher.cpp"/>
        <files mask="AESCounter.cpp"/>
        <files mask="SBSourceFile.cpp"/>
        <files mask="Bootloader.cpp"/>
        <files mask="Updater.cpp"/>
        <files mask="UsbHidPeripheral.cpp"/>
        <files mask="BusPalPeripheral.cpp"/>
        <files mask="UartPeripheral.cpp"/>
        <files mask="format_string.cpp"/>
        <files mask="HexValues.cpp"/>
        <files mask="Value.cpp"/>
        <files mask="DataTarget.cpp"/>
        <files mask="DataSource.cpp"/>
        <files mask="StSRecordFile.cpp"/>
        <files mask="ExcludesListMatcher.cpp"/>
        <files mask="Simulator.cpp"/>
        <files mask="utils.cpp"/>
        <files mask="SimulatorMemory.cpp"/>
        <files mask="SearchPath.cpp"/>
        <files mask="rijndael.cpp"/>
        <files mask="SDPUsbHidPacketizer.cpp"/>
        <files mask="SourceFile.cpp"/>
        <files mask="StExecutableImage.cpp"/>
        <files mask="BusPal.cpp"/>
        <files mask="StELFFile.cpp"/>
        <files mask="Blob.cpp"/>
        <files mask="AESKey.cpp"/>
        <files mask="DataSourceImager.cpp"/>
        <files mask="options.cpp"/>
        <files mask="SimPeripheral.cpp"/>
        <files mask="jsoncpp.cpp"/>
        <files mask="SRecordSourceFile.cpp"/>
        <files mask="Random.cpp"/>
        <files mask="SDPCommand.cpp"/>
        <files mask="Command.cpp"/>
        <files mask="RijndaelCTR.cpp"/>
        <files mask="StIntelHexFile.cpp"/>
        <files mask="ELFSourceFile.cpp"/>
        <files mask="GHSSecInfo.cpp"/>
        <files mask="SerialPacketizer.cpp"/>
        <files mask="Logging.cpp"/>
        <files mask="IntelHexSourceFile.cpp"/>
        <files mask="UsbHidPacketizer.cpp"/>
        <files mask="hid-linux.c"/>
        <files mask="hid-windows.c"/>
        <files mask="hid-mac.c"/>
        <files mask="serial.c"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/blfwk/doc" target_path="middleware/mcu-boot" type="other">
        <files mask="blfwk.md"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/bootloader" target_path="middleware/mcu-boot" type="c_include">
        <files mask="bl_peripheral.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/crc" target_path="middleware/mcu-boot" type="c_include">
        <files mask="crc32.h"/>
        <files mask="crc16.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/crc/src" target_path="middleware/mcu-boot" type="src">
        <files mask="crc32.c"/>
        <files mask="crc16.c"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/include" target_path="middleware/mcu-boot" type="c_include">
        <files mask="bootloader_hid_report_ids.h"/>
        <files mask="bootloader_common.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/memory" target_path="middleware/mcu-boot" type="c_include">
        <files mask="memory.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/packet" target_path="middleware/mcu-boot" type="c_include">
        <files mask="command_packet.h"/>
        <files mask="serial_packet.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/src/property" target_path="middleware/mcu-boot" type="c_include">
        <files mask="property.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/mk" target_path="middleware/mcu-boot" type="script">
        <files mask="common.mk"/>
      </source>
      <source path="middleware/mcu-boot/src/drivers/smc" target_path="middleware/mcu-boot" type="c_include">
        <files mask="smc.h"/>
      </source>
      <source path="middleware/mcu-boot/src/utilities/src" target_path="middleware/mcu-boot" type="src">
        <files mask="fsl_assert.c"/>
        <files mask="bootloader_tree_stub.c"/>
        <files mask="fsl_rtos_abstraction.c"/>
        <files mask="ring_buffer.c"/>
      </source>
      <source path="middleware/mcu-boot/src/utilities" target_path="middleware/mcu-boot" type="c_include">
        <files mask="kinetis_family.h"/>
        <files mask="ring_buffer.h"/>
        <files mask="vector_table_info.h"/>
        <files mask="fsl_assert.h"/>
        <files mask="fsl_rtos_abstraction.h"/>
      </source>
      <source path="middleware/mcu-boot/tools/tools/blhost/src" target_path="middleware/mcu-boot" type="src">
        <files mask="blhost.cpp"/>
      </source>
      <source path="middleware/mcu-boot/tools/tools/blhost/src" target_path="middleware/mcu-boot" type="c_include">
        <files mask="targetver.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/blhost/src" target_path="middleware/mcu-boot" type="other">
        <files mask="blhost.vcxproj"/>
        <files mask="blhost.vcxproj.filters"/>
        <files mask="blhost.vcxproj.user"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/blhost" target_path="middleware/mcu-boot" type="other">
        <files mask="blhost.sln"/>
      </source>
    </component>
    <component id="middleware.mcu-boot.kinetis_files.MKL28Z7" name="kinetis_files" brief="kinetis files" version="2.7.0" devices="MKL28Z512xxx7" user_visible="false" type="other">
      <source exclude="true" path="middleware/mcu-boot/apps/led_demo/src" target_path="middleware/mcu-boot" type="src">
        <files mask="milliseconds_delay.c"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/apps/led_demo/src" target_path="middleware/mcu-boot" type="other">
        <files mask="led_demo.bd"/>
      </source>
      <source path="middleware/mcu-boot/apps/led_demo/src" target_path="middleware/mcu-boot" type="c_include">
        <files mask="milliseconds_delay.h"/>
      </source>
      <source path="middleware/mcu-boot/bin" target_path="middleware/mcu-boot" type="script">
        <files mask="create_fl_image.py"/>
        <files mask="create_fl_image_mdk.py"/>
        <files mask="create_fl_image_mcux.py"/>
        <files mask="elf.py"/>
        <files mask="create_flashloader_image.bat"/>
        <files mask="create_flashloader_image_mdk.bat"/>
        <files mask="create_flashloader_image_mcux.bat"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel" target_path="middleware/mcu-boot" type="other">
        <files mask="MfgTool2.exe"/>
        <files mask="MfgToolLib.dll"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel" target_path="middleware/mcu-boot" type="configuration">
        <files mask="UICfg.ini"/>
        <files mask="cfg.ini"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel/Profiles/Kinetis Bootloader" target_path="middleware/mcu-boot" type="configuration">
        <files mask="player.ini"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel/Profiles/Kinetis Bootloader/OS Firmware" target_path="middleware/mcu-boot" type="xml">
        <files mask="ucl2.xml"/>
        <files mask="ucl2(for binary).xml"/>
        <files mask="ucl2(for SB).xml"/>
        <files mask="ucl2(for SRecord).xml"/>
        <files mask="ucl2(for HEX).xml"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel/Profiles/Kinetis Bootloader/OS Firmware/files" target_path="middleware/mcu-boot" type="other">
        <files mask="simple.bd"/>
        <files mask="simple.hex"/>
        <files mask="simple.sb"/>
        <files mask="simple.srec"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel/Profiles/Kinetis Bootloader/OS Firmware/files" target_path="middleware/mcu-boot" type="binary">
        <files mask="simple.bin"/>
        <files mask="flashConfig.bin"/>
        <files mask="demo.bin"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/mfgtools-rel/Profiles/Kinetis Bootloader/OS Firmware/files" target_path="middleware/mcu-boot" type="doc">
        <files mask="Readme.txt"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/KinetisFlashTool" target_path="middleware/mcu-boot" type="other">
        <files mask="KinetisFlashTool.sln"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/KinetisFlashTool/KinetisFlashTool" target_path="middleware/mcu-boot" type="src">
        <files mask="stdafx.cpp"/>
        <files mask="SerialList.cpp"/>
        <files mask="Bootloader.cpp"/>
        <files mask="HistoryData.cpp"/>
        <files mask="UpdateDlg.cpp"/>
        <files mask="ConfigDlg.cpp"/>
        <files mask="utility.cpp"/>
        <files mask="FlashDlg.cpp"/>
        <files mask="KinetisFlashTool.cpp"/>
        <files mask="BootloaderConfigDlg.cpp"/>
        <files mask="KinetisFlashToolDlg.cpp"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/KinetisFlashTool/KinetisFlashTool" target_path="middleware/mcu-boot" type="c_include">
        <files mask="HistoryData.h"/>
        <files mask="KinetisFlashTool.h"/>
        <files mask="Bootloader.h"/>
        <files mask="KinetisFlashToolDlg.h"/>
        <files mask="BootloaderConfigDlg.h"/>
        <files mask="ConfigDlg.h"/>
        <files mask="utility.h"/>
        <files mask="targetver.h"/>
        <files mask="UpdateDlg.h"/>
        <files mask="FlashDlg.h"/>
        <files mask="stdafx.h"/>
        <files mask="resource.h"/>
        <files mask="SerialList.h"/>
        <files mask="BootloaderConfigText.h"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/KinetisFlashTool/KinetisFlashTool" target_path="middleware/mcu-boot" type="other">
        <files mask="KinetisFlashTool.rc"/>
        <files mask="KinetisFlashTool.vcxproj"/>
        <files mask="KinetisFlashTool.vcxproj.filters"/>
        <files mask="KinetisFlashTool.vcxproj.user"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/tools/tools/KinetisFlashTool/KinetisFlashTool/res" target_path="middleware/mcu-boot" type="other">
        <files mask="Freescale.ico"/>
        <files mask="KinetisFlashTool.rc2"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/bin/Tools/KinetisFlashTool/win" target_path="middleware/mcu-boot" type="other">
        <files mask="KinetisFlashTool.exe"/>
        <files mask="blfwkdll.dll"/>
      </source>
      <source exclude="true" path="middleware/mcu-boot/doc" target_path="middleware/mcu-boot" type="doc">
        <files mask="Kinetis MCU Manufacturing Tool User's Guide.pdf"/>
        <files mask="Kinetis Flash Tool User's Guide.pdf"/>
        <files mask="Getting Started with the Flashloader for Kinetis.pdf"/>
        <files mask="MCU Bootloader Demo Application User's Guide.pdf"/>
        <files mask="MCU Bootloader v2.7.0 Reference Manual.pdf"/>
        <files mask="MCU Bootloader Release Notes.pdf"/>
      </source>
    </component>
    <component id="project_template.MKL28Z7.MKL28Z7" name="MKL28Z7" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.lpuart_adapter.MKL28Z7 component.serial_manager.MKL28Z7 component.serial_manager_uart.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 device.MKL28Z7_startup.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flash.MKL28Z7 platform.drivers.gpio.MKL28Z7 platform.drivers.lpuart.MKL28Z7 platform.drivers.port.MKL28Z7 platform.drivers.smc.MKL28Z7 utility.debug_console.MKL28Z7" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MKL28Z7/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source path="devices/MKL28Z7/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
    </component>
    <component id="project_template.frdmkl28z.MKL28Z7" name="frdmkl28z" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.lpuart_adapter.MKL28Z7 component.serial_manager.MKL28Z7 component.serial_manager_uart.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 device.MKL28Z7_startup.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flash.MKL28Z7 platform.drivers.gpio.MKL28Z7 platform.drivers.lpuart.MKL28Z7 platform.drivers.port.MKL28Z7 platform.drivers.smc.MKL28Z7 utility.debug_console.MKL28Z7" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/frdmkl28z/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source path="boards/frdmkl28z/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
    </component>
    <component id="platform.devices.MKL28Z7_linker.MKL28Z7" name="MKL28Z7_linker" version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="linker"/>
    <component id="device.MKL28Z7_CMSIS.MKL28Z7" name="MKL28Z7_CMSIS" version="1.0.0" devices="MKL28Z512xxx7" dependency="platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7" user_visible="true" type="CMSIS_Include">
      <source path="devices/MKL28Z7" target_path="device" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MKL28Z7.h"/>
        <files mask="MKL28Z7_features.h"/>
        <files mask="system_MKL28Z7.h"/>
      </source>
      <source path="devices/MKL28Z7" target_path="device" type="src">
        <files mask="system_MKL28Z7.c"/>
      </source>
    </component>
    <component id="platform.devices.MKL28Z7_flash.MKL28Z7" name="MKL28Z7_flash" version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="debugger">
      <source toolchain="mcuxpresso" path="devices/MKL28Z7/mcuxpresso" target_path="src" type="binary">
        <files mask="FTFA_2K_KL28.cfx"/>
      </source>
    </component>
    <component id="device.MKL28Z7_startup.MKL28Z7" name="MKL28Z7_startup" version="1.0.0" devices="MKL28Z512xxx7" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="mcuxpresso" path="devices/MKL28Z7/mcuxpresso" target_path="startup" type="src_c">
        <files mask="startup_mkl28z7.c"/>
      </source>
      <source toolchain="mcuxpresso" path="devices/MKL28Z7/mcuxpresso" target_path="startup" type="src_cpp">
        <files mask="startup_mkl28z7.cpp"/>
      </source>
    </component>
    <component id="device.MKL28Z7_debugger.MKL28Z7" name="MKL28Z7_debugger" version="1.0.0" devices="MKL28Z512xxx7" user_visible="true" type="debugger">
      <source path="devices/MKL28Z7" target_path="src" type="xml">
        <files mask="MKL28Z7.xml"/>
      </source>
    </component>
    <component id="project_template.twrkl28z72m.MKL28Z7" name="twrkl28z72m" version="1.0.0" devices="MKL28Z512xxx7" dependency="component.lpuart_adapter.MKL28Z7 component.serial_manager.MKL28Z7 component.serial_manager_uart.MKL28Z7 device.MKL28Z7_CMSIS.MKL28Z7 device.MKL28Z7_startup.MKL28Z7 platform.Include_common.MKL28Z7 platform.Include_core_cm0plus.MKL28Z7 platform.drivers.clock.MKL28Z7 platform.drivers.common.MKL28Z7 platform.drivers.flash.MKL28Z7 platform.drivers.gpio.MKL28Z7 platform.drivers.lpuart.MKL28Z7 platform.drivers.port.MKL28Z7 platform.drivers.smc.MKL28Z7 utility.debug_console.MKL28Z7" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/twrkl28z72m/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source path="boards/twrkl28z72m/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
