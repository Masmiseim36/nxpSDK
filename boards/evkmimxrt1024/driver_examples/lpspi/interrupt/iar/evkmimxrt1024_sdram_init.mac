/*
 * Copyright 2020 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

_clock_init()
{
  __var reg;
  // Enable all clocks
  __writeMemory32(0xffffffff, 0x400FC068, "Memory");
  __writeMemory32(0xffffffff, 0x400FC06C, "Memory");
  __writeMemory32(0xffffffff, 0x400FC070, "Memory");
  __writeMemory32(0xffffffff, 0x400FC074, "Memory");
  __writeMemory32(0xffffffff, 0x400FC078, "Memory");
  __writeMemory32(0xffffffff, 0x400FC07C, "Memory");
  __writeMemory32(0xffffffff, 0x400FC080, "Memory");

  // IPG_PODF: 2 divide by 3
  __writeMemory32(0x000A8200, 0x400FC014, "Memory");  
  // PERCLK_PODF: 1 divide by 2
  __writeMemory32(0x04900001, 0x400FC01C, "Memory");  
  // Enable SYS PLL but keep it bypassed.
  __writeMemory32(0x00012001, 0x400D8030, "Memory"); 
  do
  {
    reg = __readMemory32(0x400D8030, "Memory");
  }while((reg & 0x80000000) == 0);
  // Disable bypass of SYS PLL
  __writeMemory32(0x00002001, 0x400D8030, "Memory");  

  // Ungate SYS PLL PFD2
  reg = __readMemory32(0x400D8100, "Memory");
  reg &= ~0x800000;
  __writeMemory32(reg, 0x400D8100, "Memory");   

  //   SEMC_ALT_CLK_SEL: 0 PLL2 (SYS PLL) PFD2
  //   SEMC_CLK_SEL: 1 SEMC_ALT_CLK
  //   SEMC_PODF: 5 divide by 6
  reg = __readMemory32(0x400FC014, "Memory");
  reg &= ~0x700C0;
  reg |= 0x50040;
  __writeMemory32(reg, 0x400FC014, "Memory");   

  // Disable MPU which will be enabled by ROM to prevent code execution
  reg = __readMemory32(0xE000ED94, "Memory");
  reg &= ~0x1;
  __writeMemory32(reg, 0xE000ED94, "Memory");   
  
  __message "clock init done\n";
}

SDRAM_WaitIpCmdDone()
{
  __var reg;
  do
  {
    reg = __readMemory32(0x402F003C, "Memory");
  }while((reg & 0x3) == 0);
}

_sdr_Init()
{
  // Config IOMUX
  __writeMemory32(0x00000000, 0x401F8014, "Memory"); 
  __writeMemory32(0x00000000, 0x401F8018, "Memory");
  __writeMemory32(0x00000000, 0x401F801C, "Memory");
  __writeMemory32(0x00000000, 0x401F8020, "Memory");
  __writeMemory32(0x00000000, 0x401F8024, "Memory");
  __writeMemory32(0x00000000, 0x401F8028, "Memory");
  __writeMemory32(0x00000000, 0x401F802C, "Memory");
  __writeMemory32(0x00000000, 0x401F8030, "Memory");
  __writeMemory32(0x00000000, 0x401F8034, "Memory");
  __writeMemory32(0x00000000, 0x401F8038, "Memory");
  __writeMemory32(0x00000000, 0x401F803C, "Memory");
  __writeMemory32(0x00000000, 0x401F8040, "Memory");
  __writeMemory32(0x00000000, 0x401F8044, "Memory");
  __writeMemory32(0x00000000, 0x401F8048, "Memory");
  __writeMemory32(0x00000000, 0x401F804C, "Memory");
  __writeMemory32(0x00000000, 0x401F8050, "Memory");
  __writeMemory32(0x00000000, 0x401F8054, "Memory");
  __writeMemory32(0x00000000, 0x401F8058, "Memory");
  __writeMemory32(0x00000000, 0x401F805C, "Memory");
  __writeMemory32(0x00000000, 0x401F8060, "Memory");
  __writeMemory32(0x00000000, 0x401F8064, "Memory");
  __writeMemory32(0x00000000, 0x401F8068, "Memory");
  __writeMemory32(0x00000000, 0x401F806C, "Memory");
  __writeMemory32(0x00000000, 0x401F8070, "Memory");
  __writeMemory32(0x00000000, 0x401F8074, "Memory");
  __writeMemory32(0x00000000, 0x401F8078, "Memory");
  __writeMemory32(0x00000000, 0x401F807C, "Memory");
  __writeMemory32(0x00000000, 0x401F8080, "Memory");
  __writeMemory32(0x00000010, 0x401F8084, "Memory"); // EMC_28, DQS PIN, enable SION
  __writeMemory32(0x00000000, 0x401F8088, "Memory");
  __writeMemory32(0x00000000, 0x401F808C, "Memory");
  __writeMemory32(0x00000000, 0x401F8090, "Memory");
  __writeMemory32(0x00000000, 0x401F8094, "Memory");
  __writeMemory32(0x00000000, 0x401F8098, "Memory");
  __writeMemory32(0x00000000, 0x401F809C, "Memory");
  __writeMemory32(0x00000000, 0x401F80A0, "Memory");
  __writeMemory32(0x00000000, 0x401F80A4, "Memory");
  __writeMemory32(0x00000000, 0x401F80A8, "Memory");
  __writeMemory32(0x00000000, 0x401F80AC, "Memory");
  __writeMemory32(0x00000010, 0x401F80B0, "Memory");

  // PAD ctrl
  // drive strength = 0x7 to increase drive strength
  // otherwise the data7 bit may fail.
  __writeMemory32(0x000000F1, 0x401F8188, "Memory");
  __writeMemory32(0x000000F1, 0x401F818C, "Memory");
  __writeMemory32(0x000000F1, 0x401F8190, "Memory");
  __writeMemory32(0x000000F1, 0x401F8194, "Memory");
  __writeMemory32(0x000000F1, 0x401F8198, "Memory");
  __writeMemory32(0x000000F1, 0x401F819C, "Memory");
  __writeMemory32(0x000000F1, 0x401F81A0, "Memory");
  __writeMemory32(0x000000F1, 0x401F81A4, "Memory");
  __writeMemory32(0x000000F1, 0x401F81A8, "Memory");
  __writeMemory32(0x000000F1, 0x401F81AC, "Memory");
  __writeMemory32(0x000000F1, 0x401F81B0, "Memory");
  __writeMemory32(0x000000F1, 0x401F81B4, "Memory");
  __writeMemory32(0x000000F1, 0x401F81B8, "Memory");
  __writeMemory32(0x000000F1, 0x401F81BC, "Memory");
  __writeMemory32(0x000000F1, 0x401F81C0, "Memory");
  __writeMemory32(0x000000F1, 0x401F81C4, "Memory");
  __writeMemory32(0x000000F1, 0x401F81C8, "Memory");
  __writeMemory32(0x000000F1, 0x401F81CC, "Memory");
  __writeMemory32(0x000000F1, 0x401F81D0, "Memory");
  __writeMemory32(0x000000F1, 0x401F81D4, "Memory");
  __writeMemory32(0x000000F1, 0x401F81D8, "Memory");
  __writeMemory32(0x000000F1, 0x401F81DC, "Memory");
  __writeMemory32(0x000000F1, 0x401F81E0, "Memory");
  __writeMemory32(0x000000F1, 0x401F81E4, "Memory");
  __writeMemory32(0x000000F1, 0x401F81E8, "Memory");
  __writeMemory32(0x000000F1, 0x401F81EC, "Memory");
  __writeMemory32(0x000000F1, 0x401F81F0, "Memory");
  __writeMemory32(0x000000F1, 0x401F81F4, "Memory");
  __writeMemory32(0x000000F1, 0x401F81F8, "Memory");
  __writeMemory32(0x000000F1, 0x401F81FC, "Memory");
  __writeMemory32(0x000000F1, 0x401F8200, "Memory");
  __writeMemory32(0x000000F1, 0x401F8204, "Memory");
  __writeMemory32(0x000000F1, 0x401F8208, "Memory");
  __writeMemory32(0x000000F1, 0x401F820C, "Memory");
  __writeMemory32(0x000000F1, 0x401F8210, "Memory");
  __writeMemory32(0x000000F1, 0x401F8214, "Memory");
  __writeMemory32(0x000000F1, 0x401F8218, "Memory");
  __writeMemory32(0x000000F1, 0x401F821C, "Memory");
  __writeMemory32(0x000000F1, 0x401F8220, "Memory");
  __writeMemory32(0x000000F1, 0x401F8224, "Memory");

  // Config SDR Controller Registers/
  __writeMemory32(0x10000000, 0x402F0000, "Memory"); // MCR
  __writeMemory32(0x00000081, 0x402F0008, "Memory"); // BMCR0
  __writeMemory32(0x00000081, 0x402F000C, "Memory"); // BMCR1
  __writeMemory32(0x8000001B, 0x402F0010, "Memory"); // BR0, 32MB
  __writeMemory32(0x8200001B, 0x402F0014, "Memory"); // BR1, 32MB
  __writeMemory32(0x8400001B, 0x402F0018, "Memory"); // BR2, 32MB
  __writeMemory32(0x8600001B, 0x402F001C, "Memory"); // BR3, 32MB
  __writeMemory32(0x90000021, 0x402F0020, "Memory"); // BR4,
  __writeMemory32(0xA0000019, 0x402F0024, "Memory"); // BR5,
  __writeMemory32(0xA8000017, 0x402F0028, "Memory"); // BR6,
  __writeMemory32(0xA900001B, 0x402F002C, "Memory"); // BR7,
  __writeMemory32(0x00000021, 0x402F0030, "Memory"); // BR8,
  __writeMemory32(0x000079A8, 0x402F0004, "Memory");  //IOCR,SEMC_CCSX0 as NOR CE, SEMC_CSX1 as PSRAM CE, SEMC_CSX2 as NAND CE, SEMC_CSX3 as DBI CE.
 
  // __writeMemory32(0x00000008, 0x402F0004, "Memory"); // IOCR, SEMC_CCSX0 as SDRAM_CS1
  __writeMemory32(0x00000F31, 0x402F0040, "Memory"); // SDRAMCR0
  __writeMemory32(0x00652922, 0x402F0044, "Memory"); // SDRAMCR1
  __writeMemory32(0x00010920, 0x402F0048, "Memory"); // SDRAMCR2
  __writeMemory32(0x50210A09, 0x402F004C, "Memory"); // SDRAMCR3

  __writeMemory32(0x00000021, 0x402F0080, "Memory"); // DBICR0
  __writeMemory32(0x00888888, 0x402F0084, "Memory"); // DBICR1
  __writeMemory32(0x00000002, 0x402F0094, "Memory"); // IPCR1
  __writeMemory32(0x00000000, 0x402F0098, "Memory"); // IPCR2

  __writeMemory32(0x80000000, 0x402F0090, "Memory"); // IPCR0
  __writeMemory32(0xA55A000F, 0x402F009C, "Memory"); // IPCMD, SD_CC_IPREA
  SDRAM_WaitIpCmdDone();
  __writeMemory32(0x80000000, 0x402F0090, "Memory"); // IPCR0
  __writeMemory32(0xA55A000C, 0x402F009C, "Memory"); // SD_CC_IAF
  SDRAM_WaitIpCmdDone();
  __writeMemory32(0x80000000, 0x402F0090, "Memory"); // IPCR0
  __writeMemory32(0xA55A000C, 0x402F009C, "Memory"); // SD_CC_IAF
  SDRAM_WaitIpCmdDone();
  __writeMemory32(0x00000033, 0x402F00A0, "Memory"); // IPTXDAT
  __writeMemory32(0x80000000, 0x402F0090, "Memory"); // IPCR0
  __writeMemory32(0xA55A000A, 0x402F009C, "Memory"); // SD_CC_IMS
  SDRAM_WaitIpCmdDone();

  __writeMemory32(0x50210A09, 0x402F004C, "Memory"); // enable sdram self refresh again after initialization done.

  __message "SDRAM init done\n";
}

restoreFlexRAM()
{
    __var base;
    __var value;

    base = 0x400AC000;

    value = __readMemory32(base + 0x44, "Memory");
    value &= ~(0xFFFF);
    value |= 0x5FA5;
    __writeMemory32(value, base + 0x44, "Memory");

    value = __readMemory32(base + 0x40, "Memory");
    value |= (1 << 2);
    __writeMemory32(value, base + 0x40, "Memory");
    __message "FlexRAM configuration is restored";
}

execUserPreload()
{
  restoreFlexRAM();
  _clock_init();
  _sdr_Init();
  __message "execUserPreload() done.\n";
}

execUserReset()
{
  restoreFlexRAM();
  _clock_init();
  _sdr_Init();
  __message "execUserReset() done.\n";
}

