<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<BuildTarget tool="xtensa" version="1.0">
  <BuildSettings>
    <BaseSettings path="project">
      <PreprocessorOptions>
        <StringListMapOptions>
          <StringListMapEntry>
            <key>Includes</key>
            <value flag="-I" inheritance="donotinherit">
              <ListEntry>${xt_project_loc}/..</ListEntry>
              <ListEntry>${xt_project_loc}/../source</ListEntry>
              <ListEntry>${xt_project_loc}/../source/xaf_plugins</ListEntry>
              <ListEntry>${xt_project_loc}/../source/xaf_plugins/microspeech</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../components/uart</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../devices/MIMXRT595S/drivers</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../devices/MIMXRT595S/utilities/str</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../devices/MIMXRT595S/utilities/debug_console_lite</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/hifi-dpf/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/hifi-dpf/include/audio</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/hifi-dpf/include/lib</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/hifi-dpf/include/sys/xos-msgq</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/hifi-dpf/include/sys/xos-msgq/iss</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/host-apf/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/host-apf/include/sys/xos-msgq</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/algo/xa_af_hostless/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/include/audio</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/dsp/audio_framework/libxa_af_hostless/include/sysdeps/xos/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/multicore/rpmsg_lite/lib/include/platform/imxrt500_fusionf1</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/multicore/rpmsg_lite/lib/include/environment/xos</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/multicore/rpmsg_lite/lib/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/eiq/tensorflow-lite</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/eiq/tensorflow-lite/third_party/flatbuffers/include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/eiq/tensorflow-lite/third_party/gemmlowp</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../devices/MIMXRT595S</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../CMSIS/Core/Include</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/eiq/tensorflow-lite/third_party/kissfft</ListEntry>
              <ListEntry>${xt_project_loc}/../../../../../../middleware/eiq/tensorflow-lite/third_party/ruy</ListEntry>
            </value>
          </StringListMapEntry>
        </StringListMapOptions>
        <KeyValueListMapOptions>
          <KeyValueListMapEntry>
            <key>Defines</key>
            <value flag="-D">
              <ListEntry key="DEBUG" value=""/>
              <ListEntry key="XF_CFG_CORES_NUM" value="1"/>
              <ListEntry key="XA_CAPTURER" value="1"/>
              <ListEntry key="XA_RENDERER" value="1"/>
              <ListEntry key="XA_TFLITE_MICROSPEECH" value="1"/>
              <ListEntry key="SDK_DEBUGCONSOLE_UART" value="1"/>
              <ListEntry key="XOS_CLOCK_FREQ" value="198000000"/>
              <ListEntry key="TF_LITE_STATIC_MEMORY" value=""/>
              <ListEntry key="CPU_MIMXRT595SFFOC_dsp" value=""/>
              <ListEntry key="MCUXPRESSO_SDK" value=""/>
              <ListEntry key="HAVE_XOS" value=""/>
              <ListEntry key="HIFI_ONLY_XAF" value=""/>
              <ListEntry key="FSL_RTOS_XOS" value="1"/>
            </value>
          </KeyValueListMapEntry>
        </KeyValueListMapOptions>
      </PreprocessorOptions>
      <CompilerOptions>
        <StringListMapOptions>
          <StringListMapEntry>
            <key>CompilerAdditionalOptions</key>
            <value flag="" inheritance="append">
                        <ListEntry>-mno-mul16&#13;
-mno-mul32&#13;
-mno-div32&#13;
-fno-rtti&#13;
-fno-exceptions&#13;
-fno-unwind-tables&#13;
-INLINE:requested&#13;
-fno-unsafe-math-optimizations&#13;
-fdata-sections&#13;
-Wno-unused&#13;
-Wno-missing-braces&#13;
-fmessage-length=0&#13;
-mno-mul16&#13;
-mno-mul32&#13;
-mno-div32&#13;
-fsigned-char&#13;
-mlongcalls&#13;
-INLINE:requested</ListEntry></value>
          </StringListMapEntry>
        </StringListMapOptions>
        <SingleFlagMapOptions>
          <SingleFlagMapEntry>
            <key>CompilerVariant</key>
            <value flag="xt-clang" use="true"/>
          </SingleFlagMapEntry>
          <SingleFlagMapEntry>
            <key>CompilerPlaceLiteralinText</key>
            <value use="true" flag="-mtext-section-literals"/>
          </SingleFlagMapEntry>
          <SingleFlagMapEntry>
            <key>CompilerEnableLongCall</key>
            <value use="true" flag="-mlongcalls"/>
          </SingleFlagMapEntry>
          <SingleFlagMapEntry>
            <key>FunctionSections</key>
            <value use="true" flag="-ffunction-sections"/>
          </SingleFlagMapEntry>
          <SingleFlagMapEntry>
            <key>WarningSetting</key>
            <value use="true" flag="-Wall"/>
          </SingleFlagMapEntry>
          <SingleFlagMapEntry>
            <key>SignCharType</key>
            <value use="true" flag="-fsigned-char"/>
          </SingleFlagMapEntry>
        </SingleFlagMapOptions>
        <FlagValueMapOptions>
          <FlagValueMapEntry>
            <key>Optimization</key>
            <value use="true" level="0" flag="-O"/>
          </FlagValueMapEntry>
          <FlagValueMapEntry>
            <key>Debug</key>
            <value use="true" level="-3" flag="-g"/>
          </FlagValueMapEntry>
        </FlagValueMapOptions>
      </CompilerOptions>
      <AssemblerOptions/>
      <LinkerOptions>
        <BooleanMapOptions>
          <BooleanMapEntry>
            <key>CreateMinsize</key>
            <value selected="true"/>
          </BooleanMapEntry>
          <BooleanMapEntry>
            <key>GenerateMapFile</key>
            <value selected="true"/>
          </BooleanMapEntry>
        </BooleanMapOptions>
        <LinkerSupport custom="true" key="-mlsp" value="${xt_project_loc}/../gdbio"/>
        <StringListMapOptions>
          <StringListMapEntry>
            <key>Libraries</key>
            <value inheritance="prepend" flag="-l">
              <ListEntry>xos</ListEntry>
            </value>
          </StringListMapEntry>
          <StringListMapEntry>
            <key>LinkerAdditionalOptions</key>
            <value inheritance="append">
              <ListEntry>-g&#13;
--entry&#13;
_ResetVector&#13;
--gc-sections&#13;
-Wl,--orphan-handling=place&#13;
-Wl,--start-group&#13;
${xt_project_loc}/../../../../../../middleware/eiq/tensorflow-lite/lib/fusionf1/xcc/libtflm.a&#13;
-Wl,--end-group&#13;
</ListEntry>
            </value>
          </StringListMapEntry>
          <StringListMapEntry>
            <key>CompilerOptionsForLinker</key>
            <value inheritance="append">
              <ListEntry>-stdlib=libc++</ListEntry>
            </value>
          </StringListMapEntry>
        </StringListMapOptions>
      </LinkerOptions>
    </BaseSettings>
    <OverriddenSettings>
      <OverriddenSettingsEntry>
        <key>source/xaf_plugins/tflm-inference-api.cpp</key>
        <value path="source/xaf_plugins/tflm-inference-api.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>source/xaf_plugins/microspeech/microspeech-frontend-wrapper-api.cpp</key>
        <value path="source/xaf_plugins/microspeech/microspeech-frontend-wrapper-api.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>source/xaf_plugins/microspeech/microspeech-inference-wrapper-api.cpp</key>
        <value path="source/xaf_plugins/microspeech/microspeech-inference-wrapper-api.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/audio_provider.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/audio_provider.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/command_responder.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/command_responder.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/feature_provider.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/feature_provider.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/recognize_commands.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/recognize_commands.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/micro_features/micro_features_generator.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/micro_features/micro_features_generator.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/micro_features/micro_model_settings.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/examples/micro_speech/micro_features/micro_model_settings.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/experimental/microfrontend/lib/fft.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/experimental/microfrontend/lib/fft.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/experimental/microfrontend/lib/fft_util.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/experimental/microfrontend/lib/fft_util.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/experimental/microfrontend/lib/kiss_fft_int16.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/experimental/microfrontend/lib/kiss_fft_int16.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
      <OverriddenSettingsEntry>
        <key>eiq/tensorflow-lite/tensorflow/lite/micro/debug_log.cpp</key>
        <value path="eiq/tensorflow-lite/tensorflow/lite/micro/debug_log.cpp">
          <CompilerOptions>
            <SingleFlagMapOptions>
              <SingleFlagMapEntry>
                <key>ISOStandard</key>
                <value use="true" flag="-std=c++11"/>
              </SingleFlagMapEntry>
              <SingleFlagMapEntry>
                <key>UseNewCPlusPlusLib</key>
                <value use="true" flag="--stdlib=libc++"/>
              </SingleFlagMapEntry>
            </SingleFlagMapOptions>
          </CompilerOptions>
        </value>
      </OverriddenSettingsEntry>
    </OverriddenSettings>
  </BuildSettings>
</BuildTarget>
