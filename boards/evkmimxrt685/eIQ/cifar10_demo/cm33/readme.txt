Overview
========

Demonstrates inference for models compiled using the GLOW AOT tool.
The network used in this is based on the CIFAR-10 example in Caffe2 [1] & [2].
This project does not include the pre-trained model or the training script
since Caffe2 framework is deprecated and lately has become part of PyTorch.
This project example only includes the bundle (binary) generated after running
the Glow AOT tool and is intended to be used as-is. If you want a step-by-step
example of running the Glow AOT tool for a given model take a look at the
LeNet MNIST Glow example.
The neural network consists of 3 convolution layers interspersed by
ReLU activation and max pooling layers, followed by a fully-connected layer
at the end. The input to the network is a 32x32 pixel color image, which will 
be classified into one of the 10 output classes.

[1] https://github.com/caffe2/tutorials/blob/master/CIFAR10_Part1.ipynb
[2] https://github.com/caffe2/tutorials/blob/master/CIFAR10_Part2.ipynb



Toolchain supported
===================
- IAR embedded Workbench  8.50.9
- MCUXpresso  11.3.0
- Keil MDK  5.33
- GCC ARM Embedded  9.3.1

Hardware requirements
=====================
- Mini/micro USB cable
- JTAG/SWD
- evkmimxrt685 board
- Personal Computer

Prepare the Demo
================
0. Create a folder "dataset" in the root directory of the project.

1. Download the CIFAR10 dataset from https://pjreddie.com/media/files/cifar.tgz
   and copy the first 100 images from the "test" subfolder into "dataset".

2. Use the python script "scripts\serialize_data.py" to pre-process and
   serialize the 100 images from the dataset for inference:

python scripts\serialize_data.py

3. Import the project in IDE and link the bundle generated by Glow by
   performing the following steps:
     - Right click on the "glow_bundle" folder -> Add -> Add Files...
     - Choose file category "Library/Object Files (*.r;*.a;*.lib;*.o)"
     - Select the object file "model.o" located in "cm33/glow_bundle" folder

4. Build the project.

5. Connect a USB cable between the PC host and the OpenSDA USB port on the target board.

6. Open a serial terminal on PC for OpenSDA serial device with these settings:
    - 115200 baud rate
    - 8 data bits
    - No parity
    - One stop bit
    - No flow control

7. Download and launch the program for CM33 core to the target board. The application
    image includes also the DSP image which will be loaded automatically.

Running the demo with CMSIS-NN:
===============================

Started Cifar10 demo and benchmark
DSP Image copied to SRAM
---- Cifar10 Quantized Demo -----
Top1 class = 3
Ref class = 3
Confidence = 0.820959508419037000
Inference = 73.381 (ms)
Throughput = 13.6 fps

Top1 class = 5
Ref class = 5
Confidence = 0.976249337196350000
Inference = 73.390 (ms)
Throughput = 13.6 fps

Top1 class = 0
Ref class = 0
Confidence = 0.640964686870575100
Inference = 73.390 (ms)
Throughput = 13.6 fps

...

Top1 class = 3
Ref class = 8
Confidence = 0.434121638536453200
Inference = 73.350 (ms)
Throughput = 13.6 fps

Top1 class = 4
Ref class = 0
Confidence = 0.364332050085067800
Inference = 73.348 (ms)
Throughput = 13.6 fps

Top1 class = 8
Ref class = 8
Confidence = 0.728821516036987400
Inference = 73.348 (ms)
Throughput = 13.6 fps


Overall accuracy = 69.00 %


Running the demo with HIFI-NN:
==============================

The demo will run inference for 100 images.
When the demo runs successfully, the terminal will display the following:

Started Cifar10 demo and benchmark
DSP Image copied to SRAM
---- Cifar10 Quantized Demo -----
Top1 class = 3
Ref class = 3
Confidence = 0.820959508419037000
Inference = 7.044 (ms)
Throughput = 142.0 fps

Top1 class = 5
Ref class = 5
Confidence = 0.976249456405639800
Inference = 7.146 (ms)
Throughput = 139.9 fps

Top1 class = 0
Ref class = 0
Confidence = 0.640964627265930100
Inference = 7.059 (ms)
Throughput = 141.7 fps

...

Top1 class = 3
Ref class = 8
Confidence = 0.434121608734130900
Inference = 7.025 (ms)
Throughput = 142.3 fps

Top1 class = 4
Ref class = 0
Confidence = 0.364332050085067800
Inference = 7.059 (ms)
Throughput = 141.7 fps

Top1 class = 8
Ref class = 8
Confidence = 0.728821516036987400
Inference = 7.059 (ms)
Throughput = 141.7 fps


Overall accuracy = 69.00 %
