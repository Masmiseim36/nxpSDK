/*
 * Generated by erpcgen 1.4.0 on Fri Jan 20 08:45:14 2017.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

#include "erpc_remote_control_app_0_server.h"
#include <new>
#include "erpc_port.h"

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif

//! @brief Function to write struct BoardConfig
static int32_t write_BoardConfig_struct(erpc::Codec * codec, const BoardConfig * data);

//! @brief Function to write struct AdcConfig
static int32_t write_AdcConfig_struct(erpc::Codec * codec, const AdcConfig * data);

//! @brief Function to write struct Vector
static int32_t write_Vector_struct(erpc::Codec * codec, const Vector * data);

// Write struct BoardConfig function implementation
static int32_t write_BoardConfig_struct(erpc::Codec * codec, const BoardConfig * data)
{
    erpc_status_t err = codec->startWriteStruct();
    if (!err)
    {
        err = codec->write(data->DAC);
    }

    if (!err)
    {
        err = codec->write(data->MAG);
    }

    if (!err)
    {
        for (uint32_t arrayCount1 = 0; arrayCount1 < 3; ++arrayCount1)
        {
            if (!err)
            {
                err = codec->write(data->RGB[arrayCount1]);
            }
            else
            {
                break;
            }
        }
    }

    if (!err)
    {
        err = codec->endWriteStruct();
    }
    return err;
}

// Write struct AdcConfig function implementation
static int32_t write_AdcConfig_struct(erpc::Codec * codec, const AdcConfig * data)
{
    erpc_status_t err = codec->startWriteStruct();
    if (!err)
    {
        err = codec->write(data->vref);
    }

    if (!err)
    {
        err = codec->write(data->atomicSteps);
    }

    if (!err)
    {
        err = codec->endWriteStruct();
    }
    return err;
}

// Write struct Vector function implementation
static int32_t write_Vector_struct(erpc::Codec * codec, const Vector * data)
{
    erpc_status_t err = codec->startWriteStruct();
    if (!err)
    {
        err = codec->write(data->A_x);
    }

    if (!err)
    {
        err = codec->write(data->A_y);
    }

    if (!err)
    {
        err = codec->write(data->A_z);
    }

    if (!err)
    {
        err = codec->write(data->M_x);
    }

    if (!err)
    {
        err = codec->write(data->M_y);
    }

    if (!err)
    {
        err = codec->write(data->M_z);
    }

    if (!err)
    {
        err = codec->endWriteStruct();
    }
    return err;
}


// Call the correct server shim based on method unique ID.
erpc_status_t remote_control_app_0_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
        case kremote_control_app_0_get_board_config_id:
            return get_board_config_shim(codec, messageFactory, sequence);

        case kremote_control_app_0_get_adc_config_id:
            return get_adc_config_shim(codec, messageFactory, sequence);

        case kremote_control_app_0_convert_dac_adc_id:
            return convert_dac_adc_shim(codec, messageFactory, sequence);

        case kremote_control_app_0_read_mag_accel_id:
            return read_mag_accel_shim(codec, messageFactory, sequence);

        case kremote_control_app_0_set_led_id:
            return set_led_shim(codec, messageFactory, sequence);

        default:
            return kErpcStatus_InvalidArgument;
    }
}

// Server shim for get_board_config of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::get_board_config_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    BoardConfig *config = NULL;

    // startReadMessage() was already called before this shim was invoked.

    if (!err)
    {
        err = codec->endReadMessage();
    }

    config = (BoardConfig *) erpc_malloc(sizeof(BoardConfig));
    if (config == NULL)
    {
        err = kErpcStatus_MemoryError;
    }

    // Invoke the actual served function.
    if (!err)
    {
        get_board_config(config);
    }

    // preparing MessageBuffer for serializing data
    if (!err)
    {
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    // preparing codec for serializing data
    codec->reset();

    // Build response message.
    if (!err)
    {
        err = codec->startWriteMessage(kReplyMessage, kremote_control_app_0_service_id, kremote_control_app_0_get_board_config_id, sequence);
    }

    if (!err)
    {
        err = write_BoardConfig_struct(codec, config);
    }

    if (!err)
    {
        err = codec->endWriteMessage();
    }

    if (config)
    {
        erpc_free(config);
    }
    return err;
}

// Server shim for get_adc_config of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::get_adc_config_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    AdcConfig *config = NULL;

    // startReadMessage() was already called before this shim was invoked.

    if (!err)
    {
        err = codec->endReadMessage();
    }

    config = (AdcConfig *) erpc_malloc(sizeof(AdcConfig));
    if (config == NULL)
    {
        err = kErpcStatus_MemoryError;
    }

    // Invoke the actual served function.
    if (!err)
    {
        get_adc_config(config);
    }

    // preparing MessageBuffer for serializing data
    if (!err)
    {
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    // preparing codec for serializing data
    codec->reset();

    // Build response message.
    if (!err)
    {
        err = codec->startWriteMessage(kReplyMessage, kremote_control_app_0_service_id, kremote_control_app_0_get_adc_config_id, sequence);
    }

    if (!err)
    {
        err = write_AdcConfig_struct(codec, config);
    }

    if (!err)
    {
        err = codec->endWriteMessage();
    }

    if (config)
    {
        erpc_free(config);
    }
    return err;
}

// Server shim for convert_dac_adc of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::convert_dac_adc_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint32_t numberToConvert;
    uint32_t result;

    // startReadMessage() was already called before this shim was invoked.

    if (!err)
    {
        err = codec->read(&numberToConvert);
    }

    if (!err)
    {
        err = codec->endReadMessage();
    }

    // Invoke the actual served function.
    if (!err)
    {
        convert_dac_adc(numberToConvert, &result);
    }

    // preparing MessageBuffer for serializing data
    if (!err)
    {
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    // preparing codec for serializing data
    codec->reset();

    // Build response message.
    if (!err)
    {
        err = codec->startWriteMessage(kReplyMessage, kremote_control_app_0_service_id, kremote_control_app_0_convert_dac_adc_id, sequence);
    }

    if (!err)
    {
        err = codec->write(result);
    }

    if (!err)
    {
        err = codec->endWriteMessage();
    }

    return err;
}

// Server shim for read_mag_accel of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::read_mag_accel_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    Vector *results = NULL;
    bool status;

    // startReadMessage() was already called before this shim was invoked.

    if (!err)
    {
        err = codec->endReadMessage();
    }

    results = (Vector *) erpc_malloc(sizeof(Vector));
    if (results == NULL)
    {
        err = kErpcStatus_MemoryError;
    }

    // Invoke the actual served function.
    if (!err)
    {
        read_mag_accel(results, &status);
    }

    // preparing MessageBuffer for serializing data
    if (!err)
    {
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    // preparing codec for serializing data
    codec->reset();

    // Build response message.
    if (!err)
    {
        err = codec->startWriteMessage(kReplyMessage, kremote_control_app_0_service_id, kremote_control_app_0_read_mag_accel_id, sequence);
    }

    if (!err)
    {
        err = write_Vector_struct(codec, results);
    }

    if (!err)
    {
        err = codec->write(status);
    }

    if (!err)
    {
        err = codec->endWriteMessage();
    }

    if (results)
    {
        erpc_free(results);
    }
    return err;
}

// Server shim for set_led of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::set_led_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t whichLed;

    // startReadMessage() was already called before this shim was invoked.

    if (!err)
    {
        err = codec->read(&whichLed);
    }

    if (!err)
    {
        err = codec->endReadMessage();
    }

    // Invoke the actual served function.
    if (!err)
    {
        set_led(whichLed);
    }

    return err;
}
erpc_service_t create_remote_control_app_0_service()
{
    return new (nothrow) remote_control_app_0_service();
}
