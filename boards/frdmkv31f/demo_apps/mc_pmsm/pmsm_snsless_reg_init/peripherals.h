/*
 * Copyright 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2021 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_uart.h"
#include "fsl_clock.h"
#include "fsl_device_registers.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "freemaster.h"
#include "freemaster_serial_uart.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Definition of peripheral ID */
#define UART0_PERIPHERAL UART0
/* Definition of the clock source frequency */
#define UART0_CLOCK_SOURCE 80000000UL
/* NVIC interrupt vector ID (number). */
#define INT_ADC0_IRQN ADC0_IRQn
/* NVIC interrupt vector priority. */
#define INT_ADC0_IRQ_PRIORITY 0
/* NVIC interrupt handler identifier. */
#define INT_ADC0_IRQHANDLER ADC0_IRQHandler
/* NVIC interrupt vector ID (number). */
#define INT_PDB_IRQN PDB0_IRQn
/* NVIC interrupt vector priority. */
#define INT_PDB_IRQ_PRIORITY 1
/* NVIC interrupt handler identifier. */
#define INT_PDB_IRQHANDLER PDB0_IRQHandler
/* NVIC interrupt vector ID (number). */
#define INT_FTM2_IRQN FTM2_IRQn
/* NVIC interrupt vector priority. */
#define INT_FTM2_IRQ_PRIORITY 2
/* NVIC interrupt handler identifier. */
#define INT_FTM2_IRQHANDLER FTM2_IRQHandler
/* NVIC interrupt vector ID (number). */
#define INT_GPIO_IRQN PORTA_IRQn
/* NVIC interrupt vector priority. */
#define INT_GPIO_IRQ_PRIORITY 3
/* NVIC interrupt handler identifier. */
#define INT_GPIO_IRQHANDLER PORTA_IRQHandler
/* Definition of peripheral ID */
#define FTM2_PERIPHERAL FTM2
/* Definition of timer input frequency in Hz. */
#define FTM2_TIMER_INTPUT_FREQUENCY 2500000UL
/* Definition of timer initialization value. */
#define FTM2_TIMER_INIT_VALUE 0UL
/* Definition of timer modulo value. */
#define FTM2_TIMER_MODULO_VALUE 2499UL
/* Definition of the output initialization mask (the OUTINIT, OUTMASK and POL registers). */
#define FTM2_OUT_INIT_MASK 0x3
/* Definition of the Combine register initialization mask (the COMBINE register). */
#define FTM2_COMBINE_INIT_MASK 0x7F
/* Definition of the inversion control initialization mask (the INVCTRL register). */
#define FTM2_INVCTRL_INIT_MASK 0x1
/* Definition of the filter initialization mask (the FILTER register). */
#define FTM2_FILTER_INIT_MASK 0xFF
/* Start the timer in the initialization (enable counter clocks in the SC[CLKS] bitfield). */
#define FTM2_START_TIMER_IN_INIT true
/* FTM2_SC: TOIE=1, CPWMS=0, CLKS=1, PS=4 */
#define FTM2_SC_INIT 0x4CU
/* FTM2_MOD: MOD=2499 */
#define FTM2_MOD_INIT 0x9C3U
/* FTM2_C0SC: CHIE=0, MSB=0, MSA=0, ELSB=0, ELSA=0, ICRST=0, DMA=0 */
#define FTM2_C0SC_INIT 0x0U
/* FTM2_C1SC: CHIE=0, MSB=0, MSA=0, ELSB=0, ELSA=0, ICRST=0, DMA=0 */
#define FTM2_C1SC_INIT 0x0U
/* FTM2_CNTIN: INIT=0 */
#define FTM2_CNTIN_INIT 0x0U
/* FTM2_MODE: FAULTIE=0, FAULTM=0, PWMSYNC=0, INIT=0, FTMEN=1 */
#define FTM2_MODE_INIT 0x5U
/* FTM2_SYNC: TRIG2=0, TRIG1=0, TRIG0=0, SYNCHOM=0, REINIT=0, CNTMAX=0, CNTMIN=0 */
#define FTM2_SYNC_INIT 0x0U
/* FTM2_COMBINE: DECAPEN0=0, COMBINE0=0 */
#define FTM2_COMBINE_INIT 0x0U
/* FTM2_DEADTIME: DTPS=0, DTVAL=0 */
#define FTM2_DEADTIME_INIT 0x0U
/* FTM2_EXTTRIG: INITTRIGEN=0, CH1TRIG=0, CH0TRIG=0, CH5TRIG=0, CH4TRIG=0, CH3TRIG=0, CH2TRIG=0 */
#define FTM2_EXTTRIG_INIT 0x0U
/* FTM2_FMS: WPEN=0 */
#define FTM2_FMS_INIT 0x0U
/* FTM2_FILTER: CH1FVAL=0, CH0FVAL=0 */
#define FTM2_FILTER_INIT 0x0U
/* FTM2_FLTCTRL: FFVAL=0, FAULT3EN=0, FAULT2EN=0, FAULT1EN=0, FAULT0EN=0 */
#define FTM2_FLTCTRL_INIT 0x0U
/* FTM2_QDCTRL: QUADEN=0 */
#define FTM2_QDCTRL_INIT 0x0U
/* FTM2_CONF: GTBEOUT=0, GTBEEN=0, BDMMODE=3, NUMTOF=0 */
#define FTM2_CONF_INIT 0xC0U
/* FTM2_SYNCONF: HWSOC=0, HWINVC=0, HWOM=0, HWWRBUF=0, HWRSTCNT=0, SWSOC=0, SWINVC=0, SWOM=0, SWWRBUF=0, SWRSTCNT=0, SYNCMODE=1, SWOC=0, INVC=0, CNTINC=0, HWTRIGMODE=0 */
#define FTM2_SYNCONF_INIT 0x80U
/* FTM2_PWMLOAD: CH1SEL=0, CH0SEL=0 */
#define FTM2_PWMLOAD_INIT 0x0U
/* Definition of peripheral ID */
#define FTM0_PERIPHERAL FTM0
/* Definition of timer input frequency in Hz. */
#define FTM0_TIMER_INTPUT_FREQUENCY 40000000UL
/* Definition of timer initialization value. */
#define FTM0_TIMER_INIT_VALUE -2000L
/* Definition of timer modulo value. */
#define FTM0_TIMER_MODULO_VALUE 1999L
/* Definition of the output initialization mask (the OUTINIT, OUTMASK and POL registers). */
#define FTM0_OUT_INIT_MASK 0x3F
/* Definition of the Combine register initialization mask (the COMBINE register). */
#define FTM0_COMBINE_INIT_MASK 0x7F7F7F
/* Definition of the inversion control initialization mask (the INVCTRL register). */
#define FTM0_INVCTRL_INIT_MASK 0x7
/* Definition of the filter initialization mask (the FILTER register). */
#define FTM0_FILTER_INIT_MASK 0xFFFF
/* Start the timer in the initialization (enable counter clocks in the SC[CLKS] bitfield). */
#define FTM0_START_TIMER_IN_INIT true
/* FTM0_SC: TOIE=0, CPWMS=0, CLKS=1, PS=0 */
#define FTM0_SC_INIT 0x8U
/* FTM0_MOD: MOD=1999 */
#define FTM0_MOD_INIT 0x7CFU
/* FTM0_C0SC: CHIE=0, MSB=0, MSA=0, ELSB=1, ELSA=0, DMA=0 */
#define FTM0_C0SC_INIT 0x8U
/* FTM0_C0V: VAL=64536 */
#define FTM0_C0V_INIT 0xFC18U
/* FTM0_C1SC: CHIE=0, MSB=0, MSA=0, ELSB=1, ELSA=0, DMA=0 */
#define FTM0_C1SC_INIT 0x8U
/* FTM0_C1V: VAL=1000 */
#define FTM0_C1V_INIT 0x3E8U
/* FTM0_C2SC: CHIE=0, MSB=0, MSA=0, ELSB=1, ELSA=0, DMA=0 */
#define FTM0_C2SC_INIT 0x8U
/* FTM0_C2V: VAL=64536 */
#define FTM0_C2V_INIT 0xFC18U
/* FTM0_C3SC: CHIE=0, MSB=0, MSA=0, ELSB=1, ELSA=0, DMA=0 */
#define FTM0_C3SC_INIT 0x8U
/* FTM0_C3V: VAL=1000 */
#define FTM0_C3V_INIT 0x3E8U
/* FTM0_C4SC: CHIE=0, MSB=0, MSA=0, ELSB=1, ELSA=0, DMA=0 */
#define FTM0_C4SC_INIT 0x8U
/* FTM0_C4V: VAL=64536 */
#define FTM0_C4V_INIT 0xFC18U
/* FTM0_C5SC: CHIE=0, MSB=0, MSA=0, ELSB=1, ELSA=0, DMA=0 */
#define FTM0_C5SC_INIT 0x8U
/* FTM0_C5V: VAL=1000 */
#define FTM0_C5V_INIT 0x3E8U
/* FTM0_CNTIN: INIT=63536 */
#define FTM0_CNTIN_INIT 0xF830U
/* FTM0_MODE: FAULTIE=0, FAULTM=3, PWMSYNC=0, INIT=0, FTMEN=1 */
#define FTM0_MODE_INIT 0x65U
/* FTM0_SYNC: TRIG2=0, TRIG1=0, TRIG0=0, SYNCHOM=0, REINIT=0, CNTMAX=1, CNTMIN=0 */
#define FTM0_SYNC_INIT 0x2U
/* FTM0_OUTINIT: CH4OI=0, CH2OI=0, CH0OI=0 */
#define FTM0_OUTINIT_INIT 0x0U
/* FTM0_OUTMASK: CH5OM=1, CH4OM=1, CH3OM=1, CH2OM=1, CH1OM=1, CH0OM=1 */
#define FTM0_OUTMASK_INIT 0x3FU
/* FTM0_COMBINE: FAULTEN2=1, SYNCEN2=1, DTEN2=1, DECAPEN2=0, COMP2=1, COMBINE2=1, FAULTEN1=1, SYNCEN1=1, DTEN1=1, DECAPEN1=0, COMP1=1, COMBINE1=1, FAULTEN0=1, SYNCEN0=1, DTEN0=1, DECAPEN0=0, COMP0=1, COMBINE0=1 */
#define FTM0_COMBINE_INIT 0x737373U
/* FTM0_DEADTIME: DTPS=0, DTVAL=20 */
#define FTM0_DEADTIME_INIT 0x14U
/* FTM0_EXTTRIG: INITTRIGEN=1, CH1TRIG=0, CH0TRIG=0, CH5TRIG=0, CH4TRIG=0, CH3TRIG=0, CH2TRIG=0 */
#define FTM0_EXTTRIG_INIT 0x40U
/* FTM0_POL: POL5=0, POL4=0, POL3=0, POL2=0, POL1=0, POL0=0 */
#define FTM0_POL_INIT 0x0U
/* FTM0_FMS: WPEN=0 */
#define FTM0_FMS_INIT 0x0U
/* FTM0_FLTCTRL: FFVAL=0, FFLTR1EN=0, FAULT3EN=0, FAULT2EN=0, FAULT1EN=1, FAULT0EN=0 */
#define FTM0_FLTCTRL_INIT 0x2U
/* FTM0_QDCTRL: QUADEN=0 */
#define FTM0_QDCTRL_INIT 0x0U
/* FTM0_CONF: GTBEOUT=0, GTBEEN=0, BDMMODE=3, NUMTOF=0 */
#define FTM0_CONF_INIT 0xC0U
/* FTM0_FLTPOL: FLT1POL=0 */
#define FTM0_FLTPOL_INIT 0x0U
/* FTM0_SYNCONF: HWSOC=0, HWINVC=0, HWOM=0, HWWRBUF=0, HWRSTCNT=0, SWSOC=0, SWINVC=0, SWOM=0, SWWRBUF=0, SWRSTCNT=0, SYNCMODE=1, SWOC=0, INVC=0, CNTINC=0, HWTRIGMODE=0 */
#define FTM0_SYNCONF_INIT 0x80U
/* FTM0_INVCTRL: INV2EN=0, INV1EN=0, INV0EN=0 */
#define FTM0_INVCTRL_INIT 0x0U
/* FTM0_SWOCTRL: CH5OCV=0, CH4OCV=0, CH3OCV=0, CH2OCV=0, CH1OCV=0, CH0OCV=0, CH5OC=0, CH4OC=0, CH3OC=0, CH2OC=0, CH1OC=0, CH0OC=0 */
#define FTM0_SWOCTRL_INIT 0x0U
/* FTM0_PWMLOAD: CH7SEL=0, CH6SEL=0, CH5SEL=0, CH4SEL=0, CH3SEL=0, CH2SEL=0, CH1SEL=0, CH0SEL=0 */
#define FTM0_PWMLOAD_INIT 0x0U
/* BOARD_InitPeripherals defines for PDB0 */
/* Definition of peripheral ID */
#define PDB0_PERIPHERAL PDB0
/* PDB0_SC: LDMOD=2, PDBEIE=1, DMAEN=0, PRESCALER=0, TRGSEL=8, PDBEN=1, PDBIE=1, MULT=0, CONT=0 */
#define PDB0_SC_INIT 0xA08A0U
/* PDB0_MOD: MOD=65535 */
#define PDB0_MOD_INIT 0xFFFFU
/* PDB0_IDLY: IDLY=2000 */
#define PDB0_IDLY_INIT 0x7D0U
/* PDB0_CH0C1: BB=2, TOS=1, EN=3 */
#define PDB0_CH0C1_INIT 0x20103U
/* PDB0_CH0S: ERR=0 */
#define PDB0_CH0S_INIT 0x0U
/* PDB0_CH0DLY0: DLY=15 */
#define PDB0_CH0DLY0_INIT 0xFU
/* PDB0_CH0DLY1: DLY=0 */
#define PDB0_CH0DLY1_INIT 0x0U
/* PDB0_CH1C1: BB=2, TOS=1, EN=3 */
#define PDB0_CH1C1_INIT 0x20103U
/* PDB0_CH1S: ERR=0 */
#define PDB0_CH1S_INIT 0x0U
/* PDB0_CH1DLY0: DLY=15 */
#define PDB0_CH1DLY0_INIT 0xFU
/* PDB0_CH1DLY1: DLY=0 */
#define PDB0_CH1DLY1_INIT 0x0U
/* PDB0_DACINTC0: EXT=0, TOE=0 */
#define PDB0_DACINTC0_INIT 0x0U
/* PDB0_DACINT0: INT=0 */
#define PDB0_DACINT0_INIT 0x0U
/* PDB0_DACINTC1: EXT=0, TOE=0 */
#define PDB0_DACINTC1_INIT 0x0U
/* PDB0_DACINT1: INT=0 */
#define PDB0_DACINT1_INIT 0x0U
/* PDB0_POEN: POEN=0 */
#define PDB0_POEN_INIT 0x0U
/* PDB0_PO0DLY: DLY1=0, DLY2=0 */
#define PDB0_PO0DLY_INIT 0x0U
/* PDB0_PO1DLY: DLY1=0, DLY2=0 */
#define PDB0_PO1DLY_INIT 0x0U
/* PDB0_POEN_INIT mask */
#define PDB0_POEN_INIT_MASK 0x3U
/* Definition of peripheral ID */
#define CMP1_PERIPHERAL CMP1
/* CMP1_CR0: FILTER_CNT=4, HYSTCTR=0 */
#define CMP1_CR0_INIT 0x40U
/* CMP1_CR1: SE=0, WE=0, TRIGM=0, PMODE=0, INV=0, COS=0, OPE=0, EN=1 */
#define CMP1_CR1_INIT 0x1U
/* CMP1_FPR: FILT_PER=0 */
#define CMP1_FPR_INIT 0x0U
/* CMP1_SCR: DMAEN=0, IER=0, IEF=0 */
#define CMP1_SCR_INIT 0x0U
/* CMP1_DACCR: DACEN=1, VRSEL=1, VOSEL=62 */
#define CMP1_DACCR_INIT 0xFEU
/* CMP1_MUXCR: PSEL=5, MSEL=7 */
#define CMP1_MUXCR_INIT 0x2FU
/* Prescaler bitfield value of Asynchronous clock used for calibration shifted on proper register position */
#define ADC0_CALIBRATION_PRESCALER_VALUE 0x20
/* ADC0_SC1A: AIEN=1, DIFF=0, ADCH=31 */
#define ADC0_SC1A_INIT 0x5FU
/* ADC0_SC1B: AIEN=0, DIFF=0, ADCH=31 */
#define ADC0_SC1B_INIT 0x1FU
/* ADC0_CFG1: ADLPC=0, ADIV=2, ADLSMP=0, MODE=1, ADICLK=2 */
#define ADC0_CFG1_INIT 0x46U
/* ADC0_CFG2: MUXSEL=0, ADACKEN=0, ADHSC=0, ADLSTS=0 */
#define ADC0_CFG2_INIT 0x0U
/* ADC0_CV1: CV=0 */
#define ADC0_CV1_INIT 0x0U
/* ADC0_CV2: CV=0 */
#define ADC0_CV2_INIT 0x0U
/* ADC0_SC2: ADTRG=1, ACFE=0, ACFGT=0, ACREN=0, DMAEN=0, REFSEL=0 */
#define ADC0_SC2_INIT 0x40U
/* ADC0_SC3: CAL=1, ADCO=0, AVGE=0, AVGS=0 */
#define ADC0_SC3_INIT 0x80U
/* Prescaler bitfield value of Asynchronous clock used for calibration shifted on proper register position */
#define ADC1_CALIBRATION_PRESCALER_VALUE 0x20
/* ADC1_SC1A: AIEN=0, DIFF=0, ADCH=31 */
#define ADC1_SC1A_INIT 0x1FU
/* ADC1_SC1B: AIEN=0, DIFF=0, ADCH=31 */
#define ADC1_SC1B_INIT 0x1FU
/* ADC1_CFG1: ADLPC=0, ADIV=2, ADLSMP=0, MODE=1, ADICLK=2 */
#define ADC1_CFG1_INIT 0x46U
/* ADC1_CFG2: MUXSEL=0, ADACKEN=0, ADHSC=0, ADLSTS=0 */
#define ADC1_CFG2_INIT 0x0U
/* ADC1_CV1: CV=0 */
#define ADC1_CV1_INIT 0x0U
/* ADC1_CV2: CV=0 */
#define ADC1_CV2_INIT 0x0U
/* ADC1_SC2: ADTRG=1, ACFE=0, ACFGT=0, ACREN=0, DMAEN=0, REFSEL=0 */
#define ADC1_SC2_INIT 0x40U
/* ADC1_SC3: CAL=1, ADCO=0, AVGE=0, AVGS=0 */
#define ADC1_SC3_INIT 0x80U
/* Alias for GPIOA peripheral */
#define GPIOA_GPIO GPIOA
/* FreeMASTER_Recorder_0's buffer size definition */
#define FREEMASTER_REC_0_SIZE 4096
/* Pipe1's Rx buffer size definition */
#define FREEMASTER_RX_PIPE_1_SIZE 32
/* Pipe1's Tx buffer size definition */
#define FREEMASTER_TX_PIPE_1_SIZE 32
/* Pipe2's Rx buffer size definition */
#define FREEMASTER_RX_PIPE_2_SIZE 32
/* Pipe2's Tx buffer size definition */
#define FREEMASTER_TX_PIPE_2_SIZE 32
/* Pipe3's Rx buffer size definition */
#define FREEMASTER_RX_PIPE_3_SIZE 32
/* Pipe3's Tx buffer size definition */
#define FREEMASTER_TX_PIPE_3_SIZE 32
/* Definition of peripheral ID */
#define FREEMASTER_SERIAL_PERIPHERAL UART0
/* Definition of the clock source frequency */
#define FREEMASTER_SERIAL_PERIPHERAL_CLK_FREQ 80000000UL

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const uart_config_t UART0_config;
/* Recorder0 configuration */
extern FMSTR_U8 FreeMASTER_RecBuffer0[FREEMASTER_REC_0_SIZE];
/* Pipe1 handle */
extern FMSTR_HPIPE FreeMASTER_Pipe_handle_1;
/* Pipe1 Rx buffer */
extern FMSTR_U8 FreeMASTER_RxPipe1[FREEMASTER_RX_PIPE_1_SIZE];
/* Pipe1 Tx buffer */
extern FMSTR_U8 FreeMASTER_TxPipe1[FREEMASTER_TX_PIPE_1_SIZE];
/* Pipe2 handle */
extern FMSTR_HPIPE FreeMASTER_Pipe_handle_2;
/* Pipe2 Rx buffer */
extern FMSTR_U8 FreeMASTER_RxPipe2[FREEMASTER_RX_PIPE_2_SIZE];
/* Pipe2 Tx buffer */
extern FMSTR_U8 FreeMASTER_TxPipe2[FREEMASTER_TX_PIPE_2_SIZE];
/* Pipe3 handle */
extern FMSTR_HPIPE FreeMASTER_Pipe_handle_3;
/* Pipe3 Rx buffer */
extern FMSTR_U8 FreeMASTER_RxPipe3[FREEMASTER_RX_PIPE_3_SIZE];
/* Pipe3 Tx buffer */
extern FMSTR_U8 FreeMASTER_TxPipe3[FREEMASTER_TX_PIPE_3_SIZE];

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
