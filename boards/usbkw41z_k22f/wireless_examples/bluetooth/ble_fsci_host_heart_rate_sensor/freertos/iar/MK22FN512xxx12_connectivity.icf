/*
** ###################################################################
**     Processors:          MK22FN512CAP12
**                          MK22FN512VDC12
**                          MK22FN512VLH12
**                          MK22FN512VLL12
**                          MK22FN512VMP12
**
**     Compiler:            IAR ANSI C/C++ Compiler for ARM
**     Reference manual:    K22P121M120SF7RM, Rev. 1, March 24, 2014
**     Version:             rev. 2.8, 2015-02-19
**     Build:               b150520
**
**     Abstract:
**         Linker file for the IAR ANSI C/C++ Compiler for ARM
**
**     Copyright (c) 2015, Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**     All rights reserved.
*
**     SPDX-License-Identifier: BSD-3-Clause
**
** ###################################################################
*/

/* By default, the Bootloader is not used. */
if (!isdefinedsymbol(gUseBootloaderLink_d)) {
  define symbol gUseBootloaderLink_d = 0;
}

if (!isdefinedsymbol(gUseMSDBootloaderLink_d)) {
  define symbol gUseMSDBootloaderLink_d = 0;
}

/* By default, the NVM is not used. */
if (!isdefinedsymbol(gUseNVMLink_d)) {
  define symbol gUseNVMLink_d = 0;
}

if (!isdefinedsymbol(gNVMSectorCountLink_d)) {
  define symbol gNVMSectorCountLink_d = 4;
}

/* By default, the internal storage is not used. */
if (!isdefinedsymbol(gUseInternalStorageLink_d)) {
  define symbol gUseInternalStorageLink_d = 0;
}

/* By default, the RAM vector table is used. */
if (!isdefinedsymbol(__ram_vector_table__))
{
  define symbol __ram_vector_table__ = 1;
}


/*-Memory Limits-*/
define symbol __region_ROM_start__   = 0x00000000 ;
define symbol __region_ROM_end__     = 0x0007FFFF;
define symbol __region_RAM_start__   = 0x1FFF0000;
define symbol __region_RAM_end__     = 0x2000FFFF;

define symbol __vector_table_size__    =   256*4;

if(__ram_vector_table__)
{
  define symbol __ram_vector_table_size__ = __vector_table_size__;
}
else
{
  define symbol __ram_vector_table_size__ = 0;
}

define exported symbol _RAM_START_  = __region_RAM_start__;
define exported symbol _RAM_END_    = __region_RAM_end__;

if (gUseBootloaderLink_d) 
{
  define symbol m_bootloader_start       = __region_ROM_start__;
  define symbol m_bootloader_end         = ((__region_ROM_end__ + 1) / 32) - 1;

  define symbol m_interrupts_start       = m_bootloader_end + 1;
  define symbol m_interrupts_end         = m_interrupts_start + __vector_table_size__ - 1;

  define symbol m_bootFlags_start        = m_interrupts_end + 1;
  define symbol m_bootFlags_end          = m_bootFlags_start + 23;

  define exported symbol __BootFlags_Start__ = m_bootFlags_start;
}
else if (gUseMSDBootloaderLink_d)
{
  define symbol m_bootloader_start       = __region_ROM_start__;
  define symbol m_bootloader_end         = 0x00007FFF;

  define symbol m_interrupts_start       = m_bootloader_end + 1;
  define symbol m_interrupts_end         = m_interrupts_start + __vector_table_size__ - 1;
}
else
{
  define symbol m_interrupts_start       = __region_ROM_start__;
  define symbol m_interrupts_end         = m_interrupts_start + __vector_table_size__ - 1;
  define symbol m_flash_config_start     = 0x00000400;
  define symbol m_flash_config_end       = 0x0000040F;
}


/*-Sizes-*/
define symbol m_sector_size             = 2*1024; /* 2k flash sector size */

if (isdefinedsymbol(__stack_size__)) {
  define symbol __size_cstack__        = __stack_size__;
} else {
  define symbol __size_cstack__        = 384;
}

if (isdefinedsymbol(__heap_size__)) {
  define symbol __size_heap__          = __heap_size__;
} else {
  define symbol __size_heap__          = 0;
}


/*** FSL Product Info region ***/
define symbol m_fsl_prodInfo_start     = __region_ROM_end__ - m_sector_size + 1;
define symbol m_fsl_prodInfo_end       = __region_ROM_end__;
define exported symbol FREESCALE_PROD_DATA_BASE_ADDR = m_fsl_prodInfo_start;


/*** NVM Configuration ***/
if( gUseNVMLink_d )
{
  define exported symbol NV_STORAGE_SECTOR_SIZE = m_sector_size;
  define exported symbol NV_STORAGE_MAX_SECTORS = gNVMSectorCountLink_d;     /* NV_STORAGE_MAX_SECTORS * NV_STORAGE_SECTOR_SIZE = total NV Storage space */

  if (!isdefinedsymbol(NV_STORAGE_START_ADDRESS)) {
    define exported symbol NV_STORAGE_START_ADDRESS = m_fsl_prodInfo_start - 1;
  }

  define exported symbol NV_STORAGE_END_ADDRESS = NV_STORAGE_START_ADDRESS - (NV_STORAGE_MAX_SECTORS * NV_STORAGE_SECTOR_SIZE) + 1;
}

if (gUseInternalStorageLink_d) 
{
  if( gUseNVMLink_d )
  {
    define exported symbol INT_STORAGE_START = NV_STORAGE_END_ADDRESS - 1;
  }
  else
  {
    define exported symbol INT_STORAGE_START = m_fsl_prodInfo_start - 1;
  }
  define exported symbol INT_STORAGE_SIZE  = m_sector_size * ( ((INT_STORAGE_START + 1 - __region_ROM_start__)/2)/m_sector_size +1);
  define exported symbol INT_STORAGE_END   = INT_STORAGE_START - INT_STORAGE_SIZE + 1;
  define exported symbol INT_STORAGE_SECTOR_SIZE = m_sector_size;
}


/* Define the limits of the memory regions*/
define symbol m_text_start             = m_interrupts_start;
if( gUseInternalStorageLink_d )
{
  define symbol m_text_end               = INT_STORAGE_END;
}
else if( gUseNVMLink_d )
{
  define symbol m_text_end               = NV_STORAGE_END_ADDRESS - 1;
}
else
{
  define symbol m_text_end               = m_fsl_prodInfo_start - 1;
}

define symbol m_interrupts_ram_start   = __region_RAM_start__;
define symbol m_interrupts_ram_end     = m_interrupts_ram_start + __ram_vector_table_size__ - 1;

define symbol __CSTACK_end__   = __region_RAM_end__;
define symbol __CSTACK_start__ = __CSTACK_end__ - __size_cstack__ + 1;
define symbol __HEAP_end__     = __CSTACK_start__ - 1;
define symbol __HEAP_start__   = __HEAP_end__ - __size_heap__ + 1;

define symbol m_data_start             = m_interrupts_ram_end + 1;
define symbol m_data_end               = __HEAP_start__ - 1;


define exported symbol __VECTOR_TABLE  = m_interrupts_start;
define exported symbol __VECTOR_RAM    = isdefinedsymbol(__ram_vector_table__) ? m_interrupts_ram_start : m_interrupts_start;
define exported symbol __RAM_VECTOR_TABLE_SIZE = __ram_vector_table_size__;
define exported symbol __BOOT_STACK_ADDRESS = m_data_end-0x0F;


/*** Define memory regions ***/
define memory mem with size = 4G;
if (gUseBootloaderLink_d)
{
  define region Bootloader_region = mem:[from m_bootloader_start  to  m_bootloader_end];
  define region BootFlags_region  = mem:[from m_bootFlags_start   to  m_bootFlags_end];
  define region TEXT_region       = mem:[from m_text_start to m_bootFlags_start-1] |
                                    mem:[from m_bootFlags_end+1 to m_text_end];
}
else if (gUseMSDBootloaderLink_d)
{
  define region Bootloader_region = mem:[from m_bootloader_start  to  m_bootloader_end];
  define region TEXT_region       = mem:[from m_text_start to m_text_end];
}
else
{
  define region m_flash_config_region = mem:[from m_flash_config_start to m_flash_config_end];
  define region TEXT_region = mem:[from m_text_start to m_flash_config_start - 1] |
                              mem:[from m_flash_config_end + 1 to m_text_end];
}

if (gUseInternalStorageLink_d) {
  define region InternalStorage    = mem:[from INT_STORAGE_END to INT_STORAGE_START];
}

if(gUseNVMLink_d) {
  define region NVM_region         = mem:[from NV_STORAGE_END_ADDRESS to NV_STORAGE_START_ADDRESS];
}

define region DATA_region   = mem:[from m_data_start to 0x1FFFFFFF] | [from 0x20000000 to m_data_end];
define region HEAP_region   = mem:[from __HEAP_start__ to __HEAP_end__];
define region CSTACK_region = mem:[from __CSTACK_start__ to __CSTACK_end__];

define block CSTACK    with alignment = 8, size = __size_cstack__   { };
define block HEAP      with alignment = 8, size = __size_heap__     { };

initialize by copy { readwrite, section .textrw };
do not initialize  { section .noinit };


/*** Memory placements ***/
place at address mem: m_interrupts_start    { readonly section .intvec };
place at address mem: m_fsl_prodInfo_start  { readonly section .FREESCALE_PROD_DATA };
place in TEXT_region                        { readonly };
place in DATA_region                        { readwrite, zi };
place in HEAP_region                        { block HEAP };
place in CSTACK_region                      { block CSTACK };


if (gUseBootloaderLink_d) 
{
  place at address mem: m_bootloader_start  { section .bootloader };
  place at address mem: m_bootFlags_start   { readonly section BootloaderFlags };
}
else if (gUseMSDBootloaderLink_d) 
{
  place at address mem: m_bootloader_start  { section .bootloader };
}
else
{
  place in m_flash_config_region              { section FlashConfig };
}

