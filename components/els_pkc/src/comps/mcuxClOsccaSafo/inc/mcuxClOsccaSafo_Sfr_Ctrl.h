/*--------------------------------------------------------------------------*/
/* Copyright 2023 NXP                                                       */
/*                                                                          */
/* NXP Proprietary. This software is owned or controlled by NXP and may     */
/* only be used strictly in accordance with the applicable license terms.   */
/* By expressly accepting such terms or by downloading, installing,         */
/* activating and/or otherwise using the software, you are agreeing that    */
/* you have read, and that you agree to comply with and are bound by, such  */
/* license terms.  If you do not agree to be bound by the applicable        */
/* license terms, then you may not retain, install, activate or otherwise   */
/* use the software.                                                        */
/*--------------------------------------------------------------------------*/

#ifndef MCUXCLOSCCASAFO_SFR_CTRL_H_
#define MCUXCLOSCCASAFO_SFR_CTRL_H_

#include <mcuxCsslFlowProtection.h>
#include <platform_specific_headers.h>
#include <mcuxClOsccaSafo_SfrAccess.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Datout update handling */
#define MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_END_UP     (0u)
#define MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_START_UP   (1u)
#define MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_TRIGGER_UP (2u)
#define MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_NO_UP      (3u)


#define MCUXCLOSCCASAFO_SFR_CTRL_END_UP     ((uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_END_UP     << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DATOUT_RES))
#define MCUXCLOSCCASAFO_SFR_CTRL_START_UP   ((uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_START_UP   << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DATOUT_RES))
#define MCUXCLOSCCASAFO_SFR_CTRL_TRIGGER_UP ((uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_TRIGGER_UP << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DATOUT_RES))
#define MCUXCLOSCCASAFO_SFR_CTRL_NO_UP      ((uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_DATOUT_RES_NO_UP      << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DATOUT_RES))

/* Crypto operation algorithm selection */
#define MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_GFMUL  (3u)
#define MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_CMAC   (5u)
#define MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_SM4    (6u)
#define MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_SM3    (7u)


#define MCUXCLOSCCASAFO_SFR_CTRL_INVALID   ( 0xFFFFFFFFu ) // TODO: correctly define invalid value
#define MCUXCLOSCCASAFO_SFR_CTRL_GFMUL     ( (uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_GFMUL << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,CRYPTO_OP))
#define MCUXCLOSCCASAFO_SFR_CTRL_CMAC      ( (uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_CMAC  << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,CRYPTO_OP))
#ifdef MCUXCL_FEATURE_HW_SAFO_SM3
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3       ( (uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_SM3 << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,CRYPTO_OP))
#endif
#ifdef MCUXCL_FEATURE_HW_SAFO_SM4
#define MCUXCLOSCCASAFO_SFR_CTRL_SM4       ( (uint32_t)MCUXCLOSCCASAFO_SFR_CTRL_CRYPTO_OP_SM4 << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,CRYPTO_OP))
#endif

/* Base index of data input */
#define MCUXCLOSCCASAFO_SFR_DATIN0_INDEX    ( 0u)
#define MCUXCLOSCCASAFO_SFR_DATIN1_INDEX    ( 4u)
#define MCUXCLOSCCASAFO_SFR_DATIN2_INDEX    ( 8u)
#define MCUXCLOSCCASAFO_SFR_DATIN3_INDEX    ( 12u)

/* Base index of data output, starting from DATIN0 */
#define MCUXCLOSCCASAFO_SFR_DATOUT_INDEX    ( 48u)

/* Base index of key input */
#define MCUXCLOSCCASAFO_SFR_KEY0_INDEX    ( 0u)
#define MCUXCLOSCCASAFO_SFR_KEY1_INDEX    ( 4u)
#define MCUXCLOSCCASAFO_SFR_KEY2_INDEX    ( 8u)
#define MCUXCLOSCCASAFO_SFR_KEY3_INDEX    ( 12u)


/* Selection of fixed key */
#define MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL(keyIndex)    ((((uint32_t)keyIndex) << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INKEYSEL)) & MCUXCLOSCCASAFO_SFR_FIELD_MASK(CTRL,INKEYSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL_KEY0         (MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL(MCUXCLOSCCASAFO_SFR_KEY0_INDEX))
#define MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL_KEY1         (MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL(MCUXCLOSCCASAFO_SFR_KEY1_INDEX))
#define MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL_KEY2         (MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL(MCUXCLOSCCASAFO_SFR_KEY2_INDEX))
#define MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL_KEY3         (MCUXCLOSCCASAFO_SFR_CTRL_INKEYSEL(MCUXCLOSCCASAFO_SFR_KEY3_INDEX))

/* Input selection and pre-processing handling */
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN0            ((uint32_t)0u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN1            ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN2            ((uint32_t)2u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN3            ((uint32_t)3u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN0_XOR_DATOUT ((uint32_t)4u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN1_XOR_DATOUT ((uint32_t)5u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN2_XOR_DATOUT ((uint32_t)6u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATIN3_XOR_DATOUT ((uint32_t)7u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_DATOUT            ((uint32_t)8u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_INSEL_INDEX(index)      (((uint32_t)index) << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,INSEL))

/* Output selection and post-processing handling */
#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_RES               ((uint32_t)0u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,OUTSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_RES_XOR_DATIN0    ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,OUTSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_RES_XOR_DATIN1    ((uint32_t)2u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,OUTSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_RES_XOR_DATIN2    ((uint32_t)3u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,OUTSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_RES_XOR_DATIN3    ((uint32_t)4u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,OUTSEL))
#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_RES_INDEX(index)  (((uint32_t)index) << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,OUTSEL))

/* Encryption/Decryption mode selection */
#define MCUXCLOSCCASAFO_SFR_CTRL_ENC                   ((uint32_t)0u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DECRYPT))
#define MCUXCLOSCCASAFO_SFR_CTRL_DEC                   ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DECRYPT))
#define MCUXCLOSCCASAFO_SFR_CTRL_ENC_DEC_MASK          ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,DECRYPT))

/* Start operation trigger */
#define MCUXCLOSCCASAFO_SFR_CTRL_START                 ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,START))

#define MCUXCLOSCCASAFO_SFR_CTRL_OUTSEL_MASK           (MCUXCLOSCCASAFO_SFR_FIELD_MASK(CTRL,OUTSEL))

#ifdef MCUXCL_FEATURE_HW_SAFO_SM4
#define MCUXCLOSCCASAFO_SFR_CTRL_SM4_EN                ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL,SM4_EN))
#endif

/* Write mode options */
#define MCUXCLOSCCASAFO_SFR_CTRL2_XORWR                ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,XORWR))

#define MCUXCLOSCCASAFO_SFR_CTRL2_FLUSHWR              ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,FLUSHWR))
#define MCUXCLOSCCASAFO_SFR_CTRL2_FLUSH                ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,FLUSH))
#define MCUXCLOSCCASAFO_SFR_CTRL2_FLUSHKEY             ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,KEY_FLUSH))
#define MCUXCLOSCCASAFO_SFR_CTRL2_FLUSHDATA            ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,DATAIN_FLUSH))

#define MCUXCLOSCCASAFO_SFR_CTRL2_INCR                 ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,INCR))
#define MCUXCLOSCCASAFO_SFR_CTRL2_INCR_CIN             ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,INCR_CIN))
#define MCUXCLOSCCASAFO_SFR_CTRL2_BYTES_ORDER          ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,BYTES_ORDER))

#define MCUXCLOSCCASAFO_SFR_CTRL2_BYTES_ORDER_MASK     (MCUXCLOSCCASAFO_SFR_FIELD_MASK(CTRL2,BYTES_ORDER))
#define MCUXCLOSCCASAFO_SFR_CTRL2_KEYRES_MASK          (MCUXCLOSCCASAFO_SFR_FIELD_MASK(CTRL2,KEYRES))

#define MCUXCLOSCCASAFO_SFR_CTRL2_RKEY                 ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,RKEY))
#define MCUXCLOSCCASAFO_SFR_CTRL2_KEYRES(index)        ((((uint32_t)index) << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(CTRL2,KEYRES)) & MCUXCLOSCCASAFO_SFR_FIELD_MASK(CTRL2,KEYRES))

/* Right-shift to convert sizes in bytes to sizes in 32-bit words */
#define MCUXCLOSCCASAFO_SFR_BYTES_TO_32BIT_WORD_SHIFT (2u)
#ifdef MCUXCL_FEATURE_HW_SAFO_SM3
/* SM3 control */
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_EN               ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_EN))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_MODE_NORM        ((uint32_t)0u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_MODE))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_MODE_AUTO        ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_MODE))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_LOW_LIM          ((uint32_t)0u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_LOW_LIM))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_HIGH_LIM         ((uint32_t)15u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_HIGH_LIM))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_COUNT_EN         ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_COUNT_EN))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_HASH_RELOAD      ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,HASH_RELOAD))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_SM3_STOP         ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,SM3_STOP))
#define MCUXCLOSCCASAFO_SFR_CTRL_SM3_NO_AUTO_INIT     ((uint32_t)1u << MCUXCLOSCCASAFO_SFR_FIELD_SHIFT(SM3_CTRL,NO_AUTO_INIT))
#endif
/**
 * Read the SAFO CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClOsccaSafo_Sfr_readCtrl)
static inline uint32_t mcuxClOsccaSafo_Sfr_readCtrl(void)
{
  return MCUXCLOSCCASAFO_SFR_READ(CTRL);
}

/**
 * Write the SAFO CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClOsccaSafo_Sfr_writeCtrl)
static inline void mcuxClOsccaSafo_Sfr_writeCtrl(uint32_t value)
{
  MCUXCLOSCCASAFO_SFR_WRITE(CTRL, value);
}

/**
 * Read the SAFO CTRL2 register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClOsccaSafo_Sfr_readCtrl2)
static inline uint32_t mcuxClOsccaSafo_Sfr_readCtrl2(void)
{
  return MCUXCLOSCCASAFO_SFR_READ(CTRL2);
}

/**
 * Write the SAFO CTRL2 register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClOsccaSafo_Sfr_writeCtrl2)
static inline void mcuxClOsccaSafo_Sfr_writeCtrl2(uint32_t value)
{
  MCUXCLOSCCASAFO_SFR_WRITE(CTRL2, value);
}

#ifdef MCUXCL_FEATURE_HW_SAFO_SM3
/**
 * Read the SAFO SM3_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClOsccaSafo_Sfr_readSm3Ctrl)
static inline uint32_t mcuxClOsccaSafo_Sfr_readSm3Ctrl(void)
{
  return MCUXCLOSCCASAFO_SFR_READ(SM3_CTRL);
}

/**
 * Write the SAFO SM3_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClOsccaSafo_Sfr_writeSm3Ctrl)
static inline void mcuxClOsccaSafo_Sfr_writeSm3Ctrl(uint32_t value)
{
 MCUXCLOSCCASAFO_SFR_WRITE(SM3_CTRL, value);
}
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* MCUXCLOSCCASAFO_SFR_CTRL_H_ */
