var SearchFiles = ["GUID-E156385C-E27D-4C07-AB11-E219E92E7124.html",
"GUID-82FE6618-DF5B-4E4D-8149-74A98B1A3C5E.html",
"GUID-D9B4642C-F343-4BBC-A70F-9C910F060C65.html",
"GUID-A2C7EFBB-5767-4789-AAE5-90FFE5921C10.html",
"GUID-2DD14332-0426-4518-BA3E-097B6A4CC893.html",
"GUID-B8525899-15F2-4E48-8002-F461A0F822D5.html",
"GUID-ACEEA2C0-2E84-43D9-A5EA-D2E58D8391A7.html",
"GUID-DC744410-112D-435F-8836-902AE8B46432.html",
"GUID-88C359A8-0738-4471-9315-5F2E63573254.html",
"GUID-4060F2CE-FFE0-4A13-AD27-DD7B294E59C4.html",
"GUID-119A2FE7-C298-4511-86CF-14D9A0410A26.html",
"GUID-33441E37-94D2-42B5-8ADF-07AFC9E9B809.html",
"GUID-E07F262A-8C6B-4BED-9B39-C3CDB309D773.html",
"GUID-3D18984A-B8ED-4818-8001-FC9A117E4FEE.html",
"GUID-F05D631C-0174-4F2C-BBD9-4436FCF1FB7D.html",
"GUID-428A6223-6CF8-43B1-8E0A-A730806BDEBF.html",
"GUID-42DABB5C-9111-4472-8203-8BF62BAC7F48.html",
"GUID-9EA15C7F-5D90-4A78-A44E-2C8D5E531EF4.html",
"GUID-2F049A9E-3C53-4C4D-AF9B-35F51148E87F.html",
"GUID-657D8C95-02CF-4427-89BC-B394E042FE0C.html",
"GUID-229D453C-963B-4A04-A2EB-00B79C1112BC.html",
"GUID-021CCB0C-991C-496B-957E-2E7A582EC382.html",
"GUID-A5406036-9816-4961-9476-6B5781BC23F3.html",
"GUID-9D7E2D11-1FFF-48D1-B7B6-065F62102105.html",
"GUID-964A7006-57EE-4CF5-92B7-94A4D8FA9B4D.html",
"GUID-6998DE8C-0690-490E-B4FB-1E685AAE839A.html",
"GUID-9A9241CA-91DD-4B71-A0F1-634BB7212674.html",
"GUID-9FAC2176-2E24-4C35-9609-22D2D98F05A7.html",
"GUID-93354C9D-A46F-415D-8740-240B9990FEE2.html",
"GUID-B639AAB2-B6A5-4E48-B5D6-FD64D6FC8D10.html",
"GUID-021B37B5-A20D-47E0-AD9F-78B85F4E5711.html"];

var SearchTitles = ["Introduction",
"IPv6 over Bluetooth Overview",
"Protocol Stack",
"Topologies",
"Node Configuration and Registration",
"IPv6 Datagram Transport Details",
"Applications Structure and APIs",
"Network IP Library and Media Interface",
"Network IP Manager and Protocol Wrappers APIs",
"Network IP Manager API",
"Network IP RTOS Prerequisites",
"CoAP LED Example",
"Socket Data API",
"Echo Data UDP",
"Shell Menus",
"Network IP Globals",
"Configuration files",
"IPv6 Network Setup",
"L2CAP and GATT Prerequisites",
"Starting as an IPv6 Router",
"Starting as an IPv6 Node",
"Running the IPv6 over Bluetooth Example",
"General considerations",
"User interface",
"Creating the network",
"Checking interfaces",
"Multicast group",
"Echo Ping",
"Echo UDP",
"Sockets",
"CoAP"];

var SearchInfo = [" Introduction  This document describes how devices running the Kinetis Bluetooth® Low Energy stack can create or join an IPv6 network and transport IPv6 datagrams  The document first presents an overview of transporting IPv6 over Bluetooth as presented by RFC 9776 It details the implemented protocol stack supported topologies and IPv6 specifics or this transport  Chapter 3 presents the structure of the example applications to make the user more familiar with the IPv6 specific modules used and also details some of the main APIs  Chapter 4 shows how to configure and initialize the nodes to fulfill the desired functionality  The last chapter describes step by step how the user can run the example to showcase features like ICMPv6 UDP CoAP or Sockets  ",
" IPv6 over Bluetooth Overview  The Internet of Things assumes connectivity for all nodes so the ideal protocol for connecting a billion devices is IPv6 The transport of IPv6 datagrams on top of a Bluetooth Host Stack is defined by the Internet Engineering Task Force (IETF) and depicted in RFC 7668  ",
" Protocol Stack  The IPv6 over Bluetooth solution protocol stack is presented in Figure 1   IPv6 over Bluetooth Protocol Stack    The Bluetooth stack depicted in blue must implement a GATT-based profile called Internet Protocol Support Profile (IPSP) that specifies the discovery and connection of other supporting nodes Furthermore the transport of IPv6 datagrams is done on L2CAP Credit Based channels Therefore a Bluetooth Host Stack version of 4 1 are above is required  The adaptation of IPv6 datagrams over the Bluetooth interface is done by using 6LoWPAN techniques described in RFC 7668 The 6LoWPAN over BLE layer presented in green is also responsible for IP or UDP header compression of IPv6 packets for optimizations of neighbor discovery or multicast as well as for Stateless Address Autoconfiguration (SLAAC) This layer is named 6LoBLE inside the Network IP stack  The IPv6 layers are presented in red and comprise the Network IP stack It supports Internet Control Message Protocol (ICMPv6) and User Datagram Protocol (UDP) as a transport layer The SDK offers support for other Application layers like Sockets Constrained Application Protocol (CoAP) and Echo Neighbor Discovery Protocol (ND) is also implemented and is used for prefix dissemination and address registration  ",
" Topologies  IPv6 over Bluetooth supports only a hub-and-spokes topology as shown in Figure 2 Therefore two types of devices exist:   6LBR – 6LoWPAN Border Router which is an IPSP Router and a GAP Central  6LN – 6LoWPAN Node which is an IPSP Node and a GAP Peripheral    Isolated Bluetooth IPv6 Network    All 6LN devices and the Bluetooth interface of the 6LBR are in the same IPv6 subnet Optionally the 6LBR may have an additional interface over Ethernet to communicate with the Internet as shown in Figure 3   Bluetooth IPv6 Network with Internet Connection    ",
" Node Configuration and Registration  After a Bluetooth Link is established between the GAP Central and the GAP Peripheral the 6LBR tries to open an L2CAP Credit Based Channel After the channel is created the devices open the 6LoWPAN interfaces and assigns an IPv6 link-local address based on the Bluetooth link layer address This procedure is called Stateless Address Autoconfiguration (SLAAC) and is done in two steps:   A 64-bit Interface Identifier (IID) is formed from the 48-bit Bluetooth device address by inserting 0xFFFE in the middle of the 48 bits According to RFC2373 when creating an IID the universal/local bit (“u” bit) is set to one (1) when it indicates a global scope (for Bluetooth public addresses) and to zero (0) to indicate local scope (when using Bluetooth random addresses)  The IPv6 link-layer address is created by prepending the FE80::/64 prefix   For example let us take a device with a Bluetooth public address of:     Adding the 0xFFFE and setting the “u” bit to 1 yields:     After prepending the predefined prefix the IPv6 address is created:     After the 6LN has a link-local IPv6 address it will start router discovery by sending an ICMPv6 Router Solicitation message (RS) The router discovered will always be the 6LBR which responds with an ICMPv6 Router Advertisement (RA) containing the following information depending on the configuration:   Prefix Information Option (PIO): Contains a Global or Unique Local Prefix configured on the router  6CO: 6LoWPAN Context Option: It carries prefix information for header compression  On-link flag (“L”) is set to zero to signal the 6LN to send packets to the 6LBR   After receiving the RA the 6LN configures a global IPv6 address by using the same SLAAC procedure but with the received global prefix instead of the link-local one After creating the address it will register it at the router by sending an ICMPv6 Neighbor Solicitation (NS) with an Address Registration Option (ARO) containing the 64-bit Extended Unique Identifier (EUI-64) The 6LBR responds with an ICMPv6 Neighbor Advertisement with the ARO field containing a status field that describes the registration result  The procedure is detailed in Figure 3:   6LN Configuration and Registration    ",
" IPv6 Datagram Transport Details  Due to the nature of the Bluetooth Link Layer and topology there are some specific rules that apply to this IPv6 adaptation  The 6LN node will always send the IPv6 packet to its 6LBR peer  Traffic between the nodes is always unicast Therefore multicast from a 6LN is transformed in a unicast to the 6LBR and multicast form 6LBR is transformed in multiple unicast frames sent to connected 6LNs that have registered for multicast  Header compression is realized by following the guidelines from RFC 6282 which specifies the compression format for IPv6 datagrams on top of IEEE 802 15 4 The efficiency of the compression increases when:   An RA with 6LoWPAN Context Option ( 6CO ) matching each PIO is received or  Address registration with ( ARO ) is done   Elision of source IPv6 address destination IPv6 address or both translates in saving:   Full IP Address (on link-local or last registered) – 128 bits  Prefix when compression context available – 64 bits  IID – 48 bits   ",
" Applications Structure and APIs  The application follows the main structure of the other Bluetooth applications in the SDK described in the Bluetooth Low Energy Application Developer’s Guide The additions for these examples include the nwk_ip folders one in the root of the application (containing the Network IP library interface and media interface) one in the app/common folder (containing the Network IP Manager and two configuration files: app_stack_config h and nwk_ip_config h as presented in Figure 5:   Application Structure of an IPv6 Node example    ",
" Network IP Library and Media Interface  The nwk_ip folder contains the public interface for the core modules inside the library like ND or 6LoBLE It also contains the headers and source file for the media interface: ip_if_6loble c The module contains code for opening closing and sending data on the media interface  It is recommended not to modify these files  ",
" Network IP Manager and Protocol Wrappers APIs  The nwk_ip folder inside the app/common folder contains the source and header files for the following modules:   Network IP Manager  Network IP Task Initialization  LED example application running CoAP  ECHO UDP example  Sockets example  Network IP globals  Shell menus   It is recommended not to modify these files  ",
" Network IP Manager API  The Network IP Manager is the module that helps the application initialize and configures the IPv6 layers inside the IP stack library or their respective wrappers It consists of 3 major APIs  nwkStatus_t NwkIpManager_Init(void);  This API initializes common modules for both IPv6 Router and Node devices It initializes the 6LoBLE module and instance It then registers the Bluetooth callbacks needed by the module to send data on the bearer and links the media interface to the IP layer Finally it initializes the application wrappers for CoAP Sockets and UDP Echo It returns a status of gNwkStatusSuccess_c or an error  nwkStatus_t NwkIpManager_StartNode(void);  This API configures modules for IPv6 Node devices It registers the unicast forward procedure opens the ND channel and sets the registration lifetime of the node It returns a status of gNwkStatusSuccess_c or an error  nwkStatus_t NwkIpManager_StartRouter(void);  This API configures modules for IPv6 Router devices It registers the unicast forward procedure opens the ND channel adds the initial global prefix to the interface and in the context compression table The node also configures as a default router It returns a status of gNwkStatusSuccess_c or an error  ",
" Network IP RTOS Prerequisites  The nwk_ip_init module contains the RTOS initialization part of the IP Task To initialize the task the application must call the following API at startup (usually this is done in BleApp_Init):  osaStatus_t NwkIpManager_TaskInit(void)  The task size and priority shall be configured in nwk_ip_init h:  #ifndef gIpStack_TaskStackSize_c #define gIpStack_TaskStackSize_c 3000 #endif #ifndef gIpStack_TaskPriority_c #define gIpStack_TaskPriority_c 5 #endif  The IP Task is signaled by the NWKU_GENERIC_MSG_EVENT event flag and uses three queues for 6LoBle layer IP layer and Network IP wrapper layer (including ECHO ICMPv6 or UDP Sockets or CoAP)  ",
" CoAP LED Example  The Constrained Application Protocol (CoAP) is a web transfer protocol used on resource-constrained nodes and networks This application layer protocol is one of the most used protocols for Machine to Machine (M2M) communication in home automation deployments part of the Internet of Things ecosystem  CoAP is based on a Representational State Transfer (ReST) model similar to the client-server model of HTTP It uses the same HTTP verbs for retrieving and sending data such as GET POST PUT and DELETE It runs over a UDP transport layer Some of the main features that make this protocol the best pick for a wireless sensor network are:   Low overhead and parsing complexity  Support for discovery of resources (usually multicast)  URI support  Support for selection of data models (XML JSON and others)   CoAP also defines four types of messages: Confirmable Non-confirmable Acknowledgement and Reset  The SDK provides a high-level CoAP over UDP module with a demo functionality of modifying the configuration of the RGB LED on the boards The resource is identified by the /led URI The peer devices can POST messages to this resource to change the state of the LED to on off toggle flash and rgb  To initialize the module the following API must be called The function initializes a callback configuration structure and registers services to the CoAP modules by creating the CoAP instance In our example this module is called by the Network IP Manager  void APP_InitCoap(void) { coapRegCbParams_t cbParams[] = {{APP_CoapLedCb (coapUriPath_t*) gAPP_LED_URI_PATH}}; /* Register Services in COAP */ coapStartUnsecParams_t coapParams = {COAP_DEFAULT_PORT AF_INET6}; mCoapInstId = COAP_CreateInstance(NULL coapParams gIpIfSlp0_c (coapRegCbParams_t*)cbParams NumberOfElements(cbParams)); }  The callback function processes the POST command and sends an acknowledgement back:  static void APP_CoapLedCb ( coapSessionStatus_t sessionStatus void *pData coapSession_t *pSession uint32_t dataLen ) { /* Process the command only if it is a POST method */ if ((pData) (sessionStatus == gCoapSuccess_c) (pSession- code == gCoapPOST_c)) { APP_ProcessLedCmd(pData dataLen); } /* Send the reply if the status is Success or Duplicate */ if ((gCoapFailure_c = sessionStatus) (gCoapConfirmable_c == pSession- msgType)) { /* Send CoAP ACK */ COAP_Send(pSession gCoapMsgTypeAckSuccessChanged_c NULL 0); } }  The functionality is exercised in the Shell Network IP module For more information please read the Kinetis Thread Stack Application Development Guide and the Kinetis Thread Stack API Reference Manual  ",
" Socket Data API  The socket API enables users to create generic BSD/POSIX-style IP sockets over the IPv6 network and also to exterior network destinations  The following code block shows the creation of a UDP socket and binding it to any local IPv6 address and port:  static void APP_InitSocketServer(void) { /* Socket storage information used for RX */ sockaddrIn6_t mSsRx = {{{0}}}; if(mSockfd = -1) { /* socket already initialised */ return; } /* Create a socket for global IP address */ /* Set local information */ mSsRx sin6_family = AF_INET6; mSsRx sin6_port = UDP_PORT; IP_AddrCopy( mSsRx sin6_addr in6addr_any); /* Create socket */ mSockfd = socket(mSsRx sin6_family SOCK_DGRAM IPPROTO_UDP); /* Bind socket to local information */ bind(mSockfd (sockaddrStorage_t*) mSsRx sizeof(sockaddrStorage_t)); /* Initializes the Session task*/ Session_Init(); Session_RegisterCb(mSockfd APP_SocketClientRxCallback pmAppSockThreadMsgQueue); }  This function is called to initialize the wrapper module To send a generic Socket application request the following API is called:  bool_t App_SocketSendAsync(appSockCmdParams_t* pAppSockCmdParams);  The functionality is exercised in the Shell Network IP module For more information please read the Kinetis Thread Stack Application Development Guide and the Kinetis Thread Stack API Reference Manual  ",
" Echo Data UDP  The module adds Echo capabilities for a default socket that is created at initialization (ECHO_SERVER_PORT) The functionality is exercised in the Shell Network IP module  ",
" Shell Menus  The module contains the shell functionality of the example applications It gives the user capability to send data and feedback on received information from peer devices For more details enter the help keyword:  BLE IPv6 Node help help print command description/usage version print version of all the registered modules history print history ifconfig IP Stack interfaces configuration mcastgroup Multicast groups management ping IP Stack ping tool coap Send CoAP message socket IP Stack BSD Sockets commands echoudp Echo udp client  ",
" Network IP Globals  This module contains all structures used by the Network IP Stack and dimensioned or initialized by the application For example: UDP connections table CoAP instance prefix tables and others  ",
" Configuration files  The user can configure the Network IP stack and Manager by using the two configuration files namely app_stack_config h and nwk_ip_config h  app_stack_config h is used to configure variables declared in the globals section described earlier like the number of sockets UDP connections or compression contexts as shown in the following code:  /* The maximum number of UDP connections that can be opened at one time MUST not be greater than * BSDS_MAX_SOCKETS */ #ifndef MAX_UDP_CONNECTIONS #define MAX_UDP_CONNECTIONS 10 #endif  nwk_ip_config h is used to configure variables used by the Network IP Manager like the ND PIB or the initial global prefix The configuration of an IPv6 Router is shown in the following code:  #define GLOBAL_PREFIX_INIT {0x20 0x01 0x0d 0xb8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00} #define GLOBAL_PREFIX_INIT_LEN 64  The user should add any other configurations in these header files  ",
" IPv6 Network Setup   ",
" L2CAP and GATT Prerequisites  The transport of IPv6 datagrams is made over L2CAP Credit Based channels To set up this feature the user will first register the IPSP Protocol/Service Multiplexer(PSM) after the Bluetooth stack is initialized:  static void BleApp_Config() { /* Register IPSP PSM */ L2ca_RegisterLePsm(gL2ca_Le_Psm_Ipsp_c gL2capMtu_d); }  The link between the L2CAP layer and the 6LoBLE layer is done by registering the data and control callbacks Also bleAbsReq contains function pointers that are called by the 6LoBLE layer to send data over the BLE medium or query Bluetooth addresses or maximum SDU  bleAbsRequests_t* BleApp_RegisterBleCallbacks(instanceId_t instanceId) { mSixLoBleInstanceId = instanceId; L2ca_RegisterLeCbCallbacks(BleApp_IpspDataCallback BleApp_IpspControlCallback); return (void *) bleAbsReq; }  The data callback creates a data indication message that is sent to the 6LoBLE layer for processing:  static void BleApp_IpspDataCallback(deviceId_t deviceId uint16_t channelId uint8_t* pPacket uint16_t packetLength) { bleDataInd_t* pBleDataInd = NULL; pBleDataInd = MEM_BufferAlloc(sizeof(bleDataInd_t)); /* Create the BLE Data indication */ if (pBleDataInd = NULL) { pBleDataInd- pSdu = MEM_BufferAlloc(packetLength); if (pBleDataInd- pSdu) { pBleDataInd- instanceId = mSixLoBleInstanceId; BleApp_GetBleAddress(pBleDataInd- dstAddr); BleApp_GetPeerBleAddress(deviceId pBleDataInd- srcAddr); pBleDataInd- sduLength = packetLength; FLib_MemCpy(pBleDataInd- pSdu pPacket packetLength); /* Send message to 6lo */ SixLoBle_DataIndCB(pBleDataInd); } else { MEM_BufferFree(pBleDataInd); } }  The GATT database of the IPv6 Node includes the Internet Protocol Support Service (IPSS):  PRIMARY_SERVICE(service_ipss gBleSig_IpsService_d)  After it establishes the GAP connection the IPv6 Router will firstl discover the IPSS Service:  uint16_t uuid = gBleSig_IpsService_d; /* Start Service Discovery */ BleServDisc_FindService(peerDeviceId gBleUuidType16_c (bleUuid_t*) uuid);  If the IPv6 Router discovers the service on the peer it will then initiate an L2CAP connection on the IPSP PSM:  Ipsp_Connect( mIpspRouterConfig peerDeviceId);  ",
" Starting as an IPv6 Router  As soon as the Bluetooth Stack has been configured the Network IP Manager module is initialized This initializes the 6LoBLE media interface and registers it to the IP layer It also registers the current Bluetooth Link Layer to the 6lo interface Furthermore it initializes the UDP Echo Sockets and CoAP wrappers  After initialization the node is configured to start as an IPv6 Router This starts and configures ND on the opened interface  static void BleApp_Config() { /* Initialize Network IP Manager module */ NwkIpManager_Init(); /* Start as an IPv6 Router */ NwkIpManager_StartRouter(); }  ",
" Starting as an IPv6 Node  As soon as the Bluetooth Stack has been configured the Network IP Manager module is initialized:  static void BleApp_Config() { /* Initialize Network IP Manager module */ NwkIpManager_Init(); }  After the IPSP L2CAP connection is established the device is configured to start as an IPv6 Node:  case gL2ca_LePsmConnectionComplete_c: { NwkIpManager_StartNode(); }  ",
" Running the IPv6 over Bluetooth Example  This section presents the user interactions and testing methods for the IPV6 Router and Node applications  ",
" General considerations  The IPV6 Router behaves as a GAP central node It enters GAP Limited Discovery Procedure and searches for IPV6 nodes to connect with When the IPV6 Router connects it initiates a LE Credit Based Connection request  The IPV6 Node behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the IPv6 Router connects it initiates a LE Credit Based Connection request  When the credit based connection is set the user can send data through the credit based channel from each device When the device knows that the peer is out of credit it automatically requests new credit from the application The application then sends new credits to the peer The examples use pairing with bonding by default When connected with the IPv6 Node application the IPv6 Router sends the 999999 passcode to the host stack by default  The setup requires minumim of two FRDM-KW41Z platforms one for the IPv6 Node and the other for the IPv6 Router Optionally a third board could be used for a second IPv6 Node connected to the IPv6 Router  Open serial port terminals and connect them to the boards in the same manner as described in Bluetooth Low Energy Demo Applications User’s Guide The start screen is displayed after the board is reset At first all LEDs are flashing on both devices  ",
" User interface  After flashing the boards the devices are in idle mode (all LEDs flashing)  Press the SW4 button to start scanning on the IPv6 Router When in GAP Limited Discovery Procedure LED3 starts flashing To start advertising on the IPv6 Node press SW4 When in GAP Discoverable Mode LED3 starts flashing  When the nodes are connected LED3 turns solid To disconnect the nodes hold the SW4 button pressed for 2-3 seconds on the IPv6 Node The IPv6 Node reenters GAP Discoverable Mode  ",
" Creating the network  To start the scanning of devices press the SW4 button on the router board GAP Discoverable Mode can be entered when we press the SW4 button on the node board The host connects with the board after it sees it advertise the IPSP service and connects to it A solid LED3 indicates a successful connection between the two devices This is also visible in the console as shown below  The IPv6 Node shows connected and has established a credit-based channel  Advertising Connected LE Credit Based Connection Complete Device Id: 0 Channel Id: 64 Peer MTU: 1280 Peer MPS: 251 Credits: 50  As shown on the console the IPv6 Router scans the IPv6 Node connects to it discovers the IPSS initiates LE Credit Based Connection and establishes one  Scanning Found device: IPv6_NODE 0x00049F00000B Connecting Connected Device Id: 0 Discovering IPSS Initiating LE Credit Based Connection request LE Credit Based Connection Complete Device Id: 0 Channel Id: 64 Peer MTU: 1280 Peer MPS: 251 Credits: 50  ",
" Checking interfaces  To verify the interfaces and the addresses assigned enter ifconfig or ifconfig interface as shown below  All devices report a 6LoBLE interface with both global and link-local addresses generated by SLAAC  BLE IPv6 Node ifconfig Interface 0: 6LoBLE Link local address (LL64): fe80::204:9fff:fe00:b Global address: 2001:db8::204:9fff:fe00:b  BLE IPv6 Router ifconfig Interface 0: 6LoBLE Link local address (LL64): fe80::204:9fff:fe00:c Global address: 2001:db8::204:9fff:fe00:c  ",
" Multicast group  To verify the multicast groups that the devices have joined enter mcastgroup show  The IPv6 Node will join the all-nodes multicast address  BLE IPv6 Node mcastgroup show Interface 0: Multicast Group: ff02::1  The IPv6 Router will join the all-routers multicast address and the all-nodes multicast address  BLE IPv6 Router mcastgroup show Interface 0: Multicast Group: ff02::2 Multicast Group: ff02::1  ",
" Echo Ping  To verify all parameters for the Echo Ping command enter help ping:  BLE IPv6 Node help ping ping - IP Stack ping IPv4/IPv6 addresses ping ip address -i timeout -c count -s size -t continuous ping -S source IP address  To send a ping from the IPv6 Node to the IPv6 Router enter the IP address of the router:  BLE IPv6 Node ping 2001:db8::204:9fff:fe00:c Pinging 2001:db8::204:9fff:fe00:c with 32 bytes of data: Reply from 2001:db8::204:9fff:fe00:c: bytes=32 time=80ms Reply from 2001:db8::204:9fff:fe00:c: bytes=32 time=60ms Reply from 2001:db8::204:9fff:fe00:c: bytes=32 time=60ms Reply from 2001:db8::204:9fff:fe00:c: bytes=32 time=60ms  ",
" Echo UDP  The Echo UDP module is used to send test UDP data to a destination which echoes the payload back to the originator To verify all parameters for the Echo UDP command enter help echoudp:  BLE IPv6 Node help echoudp echoudp - Echo udp client echoudp -s size -S source address -t continuous request -i timeout target ip address  To send an Echo UDP from the IPv6 Node to the IPv6 Router enter the IP address of the router:  BLE IPv6 Node echoudp 2001:db8::204:9fff:fe00:c Message sent to 2001:db8::204:9fff:fe00:cw with 32 bytes of dat AMessage received from 2001:db8::204:9fff:fe00:c: bytes=32 time68ms  ",
" Sockets  The shell commands available for the socket demo application are displayed after typing help socket in console:  BLE IPv6 Node help socket socket - IP Stack BSD Sockets commands socket open protocol remote ip addr remote port socket send socket id payload socket close socket id  These commands are valid for opening a socket as a client In this example at the Ipv6 Node an UDP socket is opened and connected to the remote address 2001:db8::204:9fff:fe00:c port 1234 Port 1234 is created by default on both devices:  BLE IPv6 Node socket open udp 2001:db8::204:9fff:fe00:c 1234 6 Opening Socket OK Socket id is: 0  To send data enter the socket id and the data value:  BLE IPv6 Node socket send 0 HelloWorld Socket Data Sent  On the IPv6 Router the console outputs the string received on the socket:  HelloWorld From IPv6 Address: 2001:db8::204:9fff:fe00:b  To close the socket on the IPv6 Node enter the socket id:  BLE IPv6 Node socket close 0 Socket 0 was closed  ",
" CoAP  This example sends a packet over the air using CoAP When sending a CoAP message all command parameters are mandatory One has to specify the type of the message either CON (confirmable message waits for ACK) or NON (does not wait for any ACK) the request code the IPv6 destination address the URI-path options included in the message and payload  URI-path options must be separated by / Also the / separator is expected before the first URI-path option  The shell commands available for the socket demo application are displayed after typing help coap in console:  BLE IPv6 Node help coap coap - Send CoAP message coap reqtype: CON/NON reqcode (GET/POST/PUT/DELETE) IP addr dest URI path payload ASCII Example: coap CON POST 2001::1 /led on coap CON POST 2001::1 /led off coap CON POST 2001::1 /led toggle coap CON POST 2001::1 /led flash coap CON POST 2001::1 /led rgb r255 g255 b255  To send a CoAP POST message form the IPv6 Node to the IPv6 Router enter the following:  BLE IPv6 Node coap CON POST 2001:db8::204:9fff:fe00:c /led flash coap rsp from 2001:db8::204:9fff:fe00:c ACK  The RGB LED on the IPv6 Router should start flashing If no ACK for the CoAP message is received after four retransmissions an error message is displayed  "];

