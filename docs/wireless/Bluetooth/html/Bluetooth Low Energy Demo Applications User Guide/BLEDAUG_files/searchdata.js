var SearchFiles = ["GUID-96CF969A-64A4-4498-8286-819BBCB014D5.html",
"GUID-A5FCD95E-0B0F-49EF-B73A-AF6776525444.html",
"GUID-899312BF-1D02-407F-BC82-4AE6237549E4.html",
"GUID-D91D9F1B-3159-4912-9B55-269C17F46C49.html",
"GUID-3C940120-E56B-4E76-9DD5-6CA1C4A6BB7C.html",
"GUID-3F4874F9-97DC-4336-9267-F44006F2CD28.html",
"GUID-C47814C2-FB95-47D7-A928-886EAFD4CB0C.html",
"GUID-DCAED436-0032-4184-AF86-DCBD3143E7D3.html",
"GUID-762BFFC8-1C9C-40E0-907D-D683875EE873.html",
"GUID-59C819D5-4DAA-40D3-BC4C-0F230FB4BF5F.html",
"GUID-7ADD097C-0346-4FC2-A81E-302C81C71098.html",
"GUID-33BD06FF-BAD5-4DAE-B5ED-74EA379B39CE.html",
"GUID-645BE5EE-9DE9-4D4A-9C8E-9C9E960F70E6.html",
"GUID-54CFAD79-8645-488D-8A91-D8509C78FC5C.html",
"GUID-D515D36C-B460-426D-8A58-211A5C277C15.html",
"GUID-2C62D02E-23B8-4012-A26B-CD7DA2DFDE6D.html",
"GUID-B2A25525-7666-4F94-91C7-593F1E0FE96C.html",
"GUID-2F5D6E7F-9AB5-4CA8-964D-E417715401CD.html",
"GUID-91A741FA-4B89-4DA0-824F-095714C1D25F.html",
"GUID-7EFBBFF6-1D87-4041-A0C6-41FADADD7244.html",
"GUID-15C6D62A-3123-46C4-95BD-1ABC029BA6C4.html",
"GUID-58318958-13CD-4DB0-9F74-9A8D6B8D82C0.html",
"GUID-6460831B-31EE-41F6-809C-D602A5F72E10.html",
"GUID-49E6B597-7B5F-412F-8372-E58FBAF926D3.html",
"GUID-FA908840-56C0-4DA3-B899-C8A64E0A2065.html",
"GUID-2D1EF8BB-8C52-47CB-996C-6B7A2455896C.html",
"GUID-BE06C117-875F-4045-9BB4-074BB443E196.html",
"GUID-BE20BEA2-95E4-4551-AE74-E2A013A59C61.html",
"GUID-88B1CC48-7A5E-4F67-9639-6C1EF9BD53B7.html",
"GUID-7C8BD910-7B61-429D-886A-BAACD2C1623D.html",
"GUID-9145E405-0D78-4424-8787-4B875969F9D3.html",
"GUID-B333FD81-34BE-472C-97A0-2674D2C575F3.html",
"GUID-2183C7EB-973B-411F-92BE-ACD67C87F3AA.html",
"GUID-591D65EA-749E-4B3A-8346-F5758EF0A222.html",
"GUID-8F381BCE-B305-43C5-BF59-6BFCBA066FB9.html",
"GUID-CC7E27F2-3E1D-47D7-8905-B56FEB09F490.html",
"GUID-0652C8C0-3837-4E45-A63B-A4AC26770C1F.html",
"GUID-BDA7C4AA-5961-4F25-9FD0-136BC1474F43.html",
"GUID-F8027011-FA5D-4C08-97DB-90925F6581C1.html",
"GUID-BEFF33E7-7001-4216-BDAD-4562532ACD68.html",
"GUID-77546E2C-FDDD-4DAB-B291-41524FF1DCFE.html",
"GUID-482FC999-B199-4EBA-90F2-6150B55C545D.html",
"GUID-966AE64D-1EFD-4903-84BE-04AB62F71F9C.html",
"GUID-9AF41F1B-5555-41EA-8C07-3CA385EDA567.html",
"GUID-B624B9C1-7F03-46C5-BC13-D1924474BEB8.html",
"GUID-56C80BBD-BC39-4CFE-8B82-E072709546BA.html",
"GUID-CDBDF8EF-CCED-44DA-A15B-4F0EB62DC404.html",
"GUID-6380EA8E-A4EE-489F-82CB-1D1F27D23252.html",
"GUID-68A22057-94A6-486C-BDA1-19CECBF2EB27.html",
"GUID-048C22D8-9A14-49E9-B162-25FECD29BA42.html",
"GUID-62F8446F-A383-4BA4-B04D-22FCAC9B74A4.html",
"GUID-9775D5BF-7F70-4569-B7F0-1507C982891C.html",
"GUID-0BE17562-5A4F-4DA4-8A01-53065442163D.html",
"GUID-233D697D-8B29-4675-B83F-BC5F1C3485EF.html",
"GUID-03ADB36F-C179-4D76-B7FC-115F6DEE1263.html",
"GUID-A8F03427-42DB-43E2-A00B-2BBC520A686C.html",
"GUID-215959FF-5803-4EA0-9E64-A5AD6B369A94.html",
"GUID-F0A9000E-B582-47AF-BECF-E91F813D54AA.html",
"GUID-B17C96B8-E62F-4B17-8E8D-05363A6C4B65.html",
"GUID-F55589D2-3693-44F2-BA22-B5708A9B20D7.html",
"GUID-1A10EBA7-F9FA-4262-B338-742D351FEA4A.html",
"GUID-D02FE332-37D2-40A7-A096-9A95FEDA6BC1.html",
"GUID-5847E0C7-9813-4189-AE5A-D9DF656CAE67.html",
"GUID-CACA3D80-DB08-408F-9526-E92F654289EC.html",
"GUID-7068193A-571B-476C-BC31-507155B1B3C7.html",
"GUID-971630B5-BDF9-4CA6-AADD-97DD3A9748A2.html",
"GUID-08BF7A59-E102-4D42-BE33-55E86A54CDE8.html",
"GUID-D25E62A7-EB6F-4AEC-803F-CBAB53A0DCA4.html",
"GUID-02967DA1-8499-4CC2-92CC-F6050273001D.html",
"GUID-5E3687D8-2005-4DF7-A5BC-8686461B2D2B.html",
"GUID-F0D61A70-3948-4144-89D1-A77F7499DF81.html",
"GUID-303ED1F3-C462-4188-A8AD-A5619A8738E7.html",
"GUID-C9B68BBC-0764-4D7E-B1E5-23877E12D377.html",
"GUID-100376F4-B659-4619-AA29-3C97550C45F7.html",
"GUID-09FE9DE5-E7A9-430B-A019-4C41A36ABB0A.html",
"GUID-D7FF720F-6ACA-4730-BCBE-4A8F85BD752C.html",
"GUID-2F3F9090-4E90-484B-97DC-88159452B50C.html",
"GUID-A541B3D2-8C3E-4A8C-B1A8-564A500B064F.html",
"GUID-0C8AF4BC-9CA4-4C6E-9ED3-8CDB3DFBFF3E.html",
"GUID-A6CC4F66-3801-4E2A-A5E3-76208020316D.html",
"GUID-580074D7-5C40-44FE-96C8-D28FC5261116.html",
"GUID-0906B387-AEF0-44BF-B8EE-AFA501571419.html",
"GUID-3E2EC835-87F6-46B6-BBD9-3821AF48993E.html",
"GUID-950C18BB-8FE1-4C18-B969-FAD3E8678F72.html",
"GUID-2E81A842-F47E-4BDD-BBBC-CBBB72ED7008.html",
"GUID-7CA66723-47A0-43EA-B10A-8B5E66CE1D01.html",
"GUID-0DEBAFFA-EE5D-4113-9451-5790CB818D33.html",
"GUID-350D2403-6321-4A6B-920D-FAD49D7D21C7.html",
"GUID-5134B2A7-8358-4F0E-8B52-A1F6BA8CE897.html",
"GUID-41265172-F1FA-45A2-ADCC-C40F4DD98FCE.html",
"GUID-32E04DD2-FA96-412C-9930-4CC5D7E1D2D3.html",
"GUID-EA11D553-35FC-4A59-8DDE-7D52A25E6020.html",
"GUID-124A8481-4E81-45F9-9915-27A8F790919D.html",
"GUID-27AF287F-908C-4EA6-9426-115168B49CA2.html",
"GUID-76DE9774-D2EF-4E89-AA4D-AB873796E8F4.html",
"GUID-B8E878E2-930F-46D1-A62A-12F4659FF0D8.html",
"GUID-69DCE941-B29B-445D-AF65-13DA7D71E88A.html",
"GUID-8CA2723A-1A5B-4479-A125-B18103A01491.html",
"GUID-BB2DD40D-1FA0-4FFF-A427-D14B09859E59.html",
"GUID-8A3CC37B-B2F0-4456-A9AD-E065CA4DF6C3.html",
"GUID-6F7513A9-0179-46E2-ABA8-E5B9D88EED79.html",
"GUID-6A79DC36-EEB9-4649-BEB4-A226B5AD42D8.html",
"GUID-B53EE3DD-572F-432A-B8AF-D77D3107026F.html",
"GUID-1494FED7-7DDB-4D3A-BA98-891523F88506.html",
"GUID-B23ED4DB-F2CD-4F33-955D-B6415F4034C1.html",
"GUID-3BDA8E20-EB89-4972-A44D-B6CC1D9DB144.html",
"GUID-EC885C8E-97E4-4EDB-B9F5-34CA1DF2D800.html",
"GUID-662371B3-1772-460B-8C6F-E25503437F61.html",
"GUID-58AE4122-AEA9-4132-954D-62978F90660D.html",
"GUID-267A161F-8693-4A2D-B892-DA44D4673EEE.html",
"GUID-D7558637-5AC8-4949-AD97-310B526A041D.html",
"GUID-9E55F3CB-2E35-4252-AE69-BCF78466BE97.html",
"GUID-4C82FD60-D2EE-464B-B312-3C100C9644BF.html",
"GUID-18273ABF-B59A-465C-AF18-061E0DEC68A3.html",
"GUID-92C7C9B8-F2A0-4DDC-B015-AA9518AF7348.html",
"GUID-F2C3C052-7822-4B8F-BE94-A2B5F6296212.html",
"GUID-B9EBB539-3EEE-4CCC-8FD7-02A08778A78D.html",
"GUID-41803BE1-2CE3-4B33-8737-8949FBFEAB93.html",
"GUID-CA079D00-53E8-4F68-AEC1-41DECA5FD169.html",
"GUID-D6693AA8-B87D-42FF-B324-EF2F85FE82D7.html",
"GUID-729FBDA2-D436-4310-92C5-C7992BA45621.html",
"GUID-204681AA-D2A5-4328-ACE7-07F1E85798C7.html",
"GUID-8DFD7CDC-DACF-48D2-A869-79601AFC812F.html",
"GUID-DEED66ED-D478-4747-A5CF-9AABC1AF2D51.html",
"GUID-77E76719-2781-442F-A442-AA78D9069633.html",
"GUID-FEE59A46-D17C-4859-8256-74A874F47F5F.html",
"GUID-BFF91EA4-C07E-499A-8AED-04A72170A1CF.html",
"GUID-E79E3E2F-3D09-4E2D-B21B-70727E0650EE.html",
"GUID-5CF81659-E394-40C7-9A21-88F18744157D.html",
"GUID-5294AE15-398C-45C4-A2ED-732BEE0E902B.html",
"GUID-9705F4AA-746A-4040-87A7-06D14F1E9BED.html",
"GUID-AA9D2F46-E493-4856-9E59-5E10B283AA81.html",
"GUID-D0710E74-8139-47A1-87E0-DF738FFAFF8E.html",
"GUID-5334B9EF-11D6-4824-9FEC-5080A771C966.html",
"GUID-50EE0FD1-784B-43D9-9C81-7DD1028431A2.html",
"GUID-40A3CB6C-9139-42B4-83B9-117067BB9D79.html",
"GUID-36850A01-5889-4ED6-9A20-4CE6838D19A3.html",
"GUID-A08D9760-0800-4186-B5E6-B8FD07568B50.html",
"GUID-6CF0CDCB-08F2-454E-B6AC-D6B724D9EC9B.html",
"GUID-2DF921DA-87B5-4151-8E50-C443B2F120C4.html",
"GUID-FF6E7286-8C66-4CBD-9007-543422BDB8C3.html",
"GUID-92A22DF6-C692-4865-B537-FE73D410AC26.html",
"GUID-F024BA75-7EF8-46A9-8D42-89800CBD904E.html",
"GUID-A0CC13D8-4774-4408-B1FE-4983DF1028F8.html",
"GUID-84AB0FCE-6242-4A79-9E48-A4D7D75F128F.html",
"GUID-39F94A6E-7B86-4539-B510-693BB58FB5A5.html",
"GUID-326B7FA6-34EF-474D-8534-385FA779556A.html",
"GUID-9C123C3B-F7A4-4F73-954C-A6EDAC6BB00A.html",
"GUID-3A6E5CFB-A0EE-4BFE-97F5-F8FDD6896E71.html",
"GUID-81034103-218A-4624-AFEB-34DA0B65F71B.html",
"GUID-7582E387-7D25-4C3A-9969-070CEA561AF7.html",
"GUID-C4CF8341-71C0-478A-B47B-DBAAD3E20200.html",
"GUID-A826B865-3DCE-4993-ACC6-9F2F72414BCF.html",
"GUID-9C27B7B7-1CB3-45CF-A319-C67598DD0745.html",
"GUID-7C433D9A-C282-4B7C-A3F0-2D3766B3B52E.html",
"GUID-2A63612A-D3F3-4BE6-9260-2AF43153CF60.html",
"GUID-25C196C9-F5D3-47B7-9F9C-806E351FE461.html",
"GUID-6D4DFB53-8CB9-4B3A-9DFF-DB97E374F78F.html",
"GUID-0DBF8EF2-6288-423A-A035-B0E5B7A33311.html",
"GUID-86731431-6405-4817-A877-6D98656D31DD.html",
"GUID-5E2A3BBF-1710-4D12-8FC3-4A6BF586E6F8.html",
"GUID-0D3C7748-DEFD-4EE7-AB8F-A7BE626CDD1E.html",
"GUID-0DD905F7-12D4-48ED-A279-774B61405882.html",
"GUID-223EEE57-AFE7-4A01-92DA-6669A6340251.html",
"GUID-72568B8E-4A13-4E63-B3B8-B66921D88AA2.html",
"GUID-2AD862D0-1194-4964-B477-89CAFE297DCE.html"];

var SearchTitles = ["Introduction",
"Bluetooth Low Energy",
"Hardware Configurations",
"Hardware requirements",
"Toolchain requirements",
"Freedom FRDM-KW41Z Platform",
"USB-KW41Z platform",
"QN9080CDK platform",
"Freedom FRDM-KW36 platform",
"Build and Run a Bluetooth LE Example Application",
"User Interface",
"Security",
"Testing Devices",
"Time client devices",
"Bluetooth LE Stack and Demo Applications",
"Heart rate sensor",
"Implemented Profile and Services",
"Supported platforms",
"User interface",
"Usage",
"Beacon",
"Supported platforms",
"Advertising data",
"User interface",
"Usage",
"Blood pressure sensor",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Glucose Sensor",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Proximity Reporter",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"HID Device (Mouse)",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"HID Host",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Private Profile Server",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Private Profile Client",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Cycling Speed and Cadence Sensor",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Cycling Power Sensor",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Running Speed and Cadence Sensor",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Health Thermometer",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"Low Power Temperature Sensor and Collector",
"Implemented profiles and services",
"Supported platforms",
"User interface",
"Usage",
"IPv6 Router and Node (KW41 Platforms)",
"Alert Notification Server",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Wireless UART",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Bluetooth LE Shell",
"Implemented stack features",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Throughput feature",
"Over the Air Programming (OTAP)",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage with Test Tool for Connectivity products",
"Usage with IoT Toolbox",
"Notes on multicore platforms and secured OTAP",
"Secured OTAP for multicore",
"Building the image files",
"Using the Test Tool to perform secured OTAP",
"Hybrid (Dual-Mode) Bluetooth Low Energy Heart Rate Sensor and IEEE 802 15 4 Coordinator Demo Application (KW41 Platform)",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Testing method",
"Relay Proxy",
"Implemented stack features",
"Implemented services",
"Supported platforms",
"User interface",
"Usage",
"Wireless Power Transfer System Receiving Unit and Transmitting Unit",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Hybrid (Dual-Mode) Bluetooth Low Energy and Generic FSK Advertising Demo Application",
"Implementation",
"How it works",
"Supported platforms",
"User interface",
"Customization",
"ANCS Client",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Bluetooth LE FSCI Black Box",
"Description",
"Supported platforms",
"Usage with Test Tool for Connectivity Products",
"HCI Black Box",
"Description",
"Supported platforms",
"Usage with Test Tool for Connectivity Products",
"Direct Test Mode",
"Pulse Oximeter Sensor",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Location and Navigation Server",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Location and Navigation Client",
"Implemented profile and services",
"Supported platforms",
"User interface",
"Usage",
"Revision History",
"Backmatter Body Content"];

var SearchInfo = [" Introduction  This document describes the Bluetooth ® Low Energy stack enablement for the NXP development platforms The initial chapters start with a presentation of the hardware and toolchain requirements  Chapter 5 describes the demo applications that can be found in the software development kit It presents the profiles and services implemented and how to interact with them  ",
" Bluetooth Low Energy  The Software Development Package provides a Bluetooth Low Energy v5 0-compliant host stack and controller implementation with a set of GATT-based profiles and services implemented on top To demonstrate the device functionality the following demo applications are implemented   Bluetooth LE Relay Proxy  Bluetooth LE Shell App  IPv6 Node and Router (KW41 Platforms)  OTAP Client and Server  HID Device (Mouse) and HID Host  Low Power Temperature Sensor and Collector  Wireless UART demo application  Proximity Reporter  Alert Notification Server  Heart Rate Sensor  Blood Pressure Sensor  Glucose Sensor  Health Thermometer  Cycling Speed and Cadence Sensor  Cycling Power Sensor  Running Speed and Cadence Sensor  Beacon Application  Wireless Power Transfer Receiving and Transmitting Units (KW41 and KW3x Platforms)  Private Profile Client and Server  ANCS Client  Bluetooth LE FSCI Black Box  HCI Black Box  Pulse Oximeter Sensor  Location and Navigation Server  Location and Navigation Client  Hybrid Bluetooth LE and Generic FSK advertising demo application   ",
" Hardware Configurations   ",
" Hardware requirements  The NXP Bluetooth LE demo applications are designed to run on any of these supported platforms:   FRDM-KW41Z  USB-KW41Z  QN908XCDK  FRDM-KW36   ",
" Toolchain requirements  The Bluetooth Low Energy Stack demo applications were compiled and tested with IAR Embedded Workbench for Arm ® and MCUXpresso It is recommended to use one of these tools  ",
" Freedom FRDM-KW41Z Platform  FRDM-KW41Z Freedom platform is based on the KW41Z wireless dual-mode SoC which incorporates an Arm ® Cortex ® -M0+ core and can be configured to operate at various frequencies up to 48 MHz It has 512 KB of Flash and 128 KB of SRAM A figure representing the platform is shown below For detailed information about the platform see the appropriate board user’s guide  The platform features a composite USB device called OpenSDA which serves as debugger interface and as a USB-to-serial converter via a virtual COM port application Several firmware images can be programmed on the OpenSDA device such as:   developer mbed org/handbook/CMSIS-DAP  segger com/opensda html  www pemicro com/opensda    Freedom FRDM-KW41Z platform    ",
" USB-KW41Z platform  The USB-KW41Z board is mainly targeted for sniffer applications It is based on the same KW41Z wireless dual mode SoC A figure representing the platform is shown below For detailed information about the board see the appropriate board user’s guide   USB-KW41Z platform    ",
" QN9080CDK platform  QN9080CDK platform is based on the QN9080CDK Bluetooth Low Power SoC which incorporates an Arm ® Cortex ® -M4F core and can be configured to operate at various frequencies up to 32 MHz It has 512 KB of Flash and 128 KB of SRAM A figure representing the platform is shown below For detailed information about the platform see the appropriate board user’s guide   QN9080CDK platform    ",
" Freedom FRDM-KW36 platform  FRDM-KW36 Freedom platform is based on the KW36 SoC which incorporates an Arm ® Cortex ® -M0+ core and enables Bluetooth Low Energy and Generic FSK It can be configured to operate at various frequencies up to 48 MHz and it has 256 KB of on-chip Flash and 64 KB of SRAM The Bluetooth LE transceiver supports up to 8 concurrent connections in any master/slave combination A figure representing the platform is shown below For detailed information about the platform see the appropriate board user’s guide  The platform features a composite USB device called OpenSDA which serves as debugger interface and as a USB-to-serial converter via a virtual COM port application   FRDM-KW36 platform     ",
" Build and Run a Bluetooth LE Example Application  To open build and run any example application see the corresponding board Bluetooth Low Energy Quick Start Guide document  ",
" User Interface  The demo applications that implement the Battery Service expose the current battery level as measured on the board through the Battery Level characteristic The value represents a percentage between 0 and 100 The value can be read from the device from a connected GATT client  The demo applications that implement the Device Information Service expose different information regarding the current software hardware and firmware revisions These values are used as an example and can be modified by the user when developing their product The values can be read from the device from a connected GATT client  ",
" Security  The examples that enable pairing always generates a default passkey of 999999 that has to be entered on the central device in most cases a smartphone or tablet  ",
" Testing Devices  To demonstrate the profile functionality most of the scenarios require one of the supported platform and a Bluetooth Low Energy capable central device usually a smartphone or a tablet that runs a compatible Bluetooth LE application  IoT Toolbox    The recommended application is the IoT Toolbox which can be installed on Apple ® iOS or Android ™ OS handheld devices that support Bluetooth Low Energy The application can be found on iTunes or Google playstore   Other demos can be run by using two platforms one for the peripheral and one for the central role for example IPv6 Node and Router Low Power Temperature Sensor and Collector Wireless UART OTAP Client and Server HID Host and Device  To provide feedback and additional interaction some examples make use of a shell console via the virtual COM port To access the device open a serial port terminal and connect it to the platform as shown in the figures below For this example Tera Term VT and a FRDM-KW41Z were used The communication parameters are 115200 and 8N1   Tera Term – mbed serial port     Tera Term – mbed serial port configuration    The start screen is displayed after the board is reset   Tera Term – console start    ",
" Time client devices  Some applications implement the Current Time Service To enable this feature define gAppUseTimeService_d in the app_preinclude h file as 1 If the Time Client is enabled the device must synchronize with a Time Server to update its internal date/time to the current date/time The Time Client synchronizes with a phone if you connect the device to it (pairing and bonding must be active)  ",
" Bluetooth LE Stack and Demo Applications   ",
" Heart rate sensor  This section describes the implemented profiles and services user interactions and testing methods for the Heart Rate Sensor application  ",
" Implemented Profile and Services  The Heart Rate Sensor application implements a GATT server and the following profile and services   Heart Rate Profile v1 0  Heart Rate Service v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters the GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications the sensor starts sending heart rate measurements every second  ",
" Supported platforms  The Heart Rate Sensor application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is put in deep sleep (all LEDs are off) Also any attached debugger will lose its connection The application default configuration enables low power which disables LED support The user can manually change this and enable LED support otherwise all subsequent LED behavior references shall be ignored To wake up and start advertising press the ADVSW button When in GAP Discoverable Mode the CONNLED is on When the central node connects to the peripheral the CONNLED remains solid The heart rate measurement values are generated randomly in the interval 40 to 200 bpm The heart rate value format is set to 8 bits and the contact status is on  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED4    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW3  LED3      ",
" Usage  The Heart Rate Sensor can be connected to any Bluetooth® Smart Ready products available on the market  To make the Heart Rate Sensor visible press the ADVSW button to start sending advertisements The sensor name “NXP_HRS” shows on the device when its scanning is active If configured the sensor notifies the application with heart rate measurements every second Also the battery level and various device information is exposed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below  IoT Toolbox Heart Rate Monitor Demo     ",
" Beacon  This section presents the user interactions and testing methods for the Beacon application  ",
" Supported platforms  The Beacon application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" Advertising data  The beacons are non-connectable advertising packets that are sent on the three advertising channels The latter contains the following fields   Company Identifier (2 bytes): 0x0025 (NXP ID as defined by the Bluetooth SIG)  Beacon Identifier (1 byte): 0xBC (Allows identifying an NXP Beacon alongside with Company Identifier)  UUID (16 bytes): Beacon sensor unique identifier  A (2 bytes): Beacon application data  B (2 bytes): Beacon application data  C (2 bytes): Beacon application data  RSSI at 1m (1 byte): Allows distance-based applications   By default the UUID value is a random value based on the unique identifier of the board  ",
" User interface  After flashing the board the beacon application starts advertising When in GAP Discoverable Mode CONNLED is flashing Hold the ADVSW button pressed for 2-3 seconds anytime to stop advertising In idle mode all LEDs are flashing To restart advertising press the ADVSW button  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The beacon can be tested with any Bluetooth® Smart Ready products available on the market The IoT Toolbox can also be used to showcase the profile functionality as shown in the image below   IoT Toolbox Beacon Demo    ",
" Blood pressure sensor  This section describes implemented profiles and services user interactions and testing methods for the Blood Pressure Sensor application  ",
" Implemented profile and services  The Blood Pressure Sensor application implements a GATT server and the following profile and services   Blood Pressure Profile v1 0  Blood Pressure Service v1 0  Battery Service v1 0  Device Information Service v1 1  Current Time Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications or indications the sensor starts sending intermediate cuff pressure and blood pressure measurements In a 5 second interval the sensor sends 5 events (4 notifications with the intermediate cuff pressure measurement and one indication with the blood pressure measurement)  ",
" Supported platforms  The Blood Pressure Sensor application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button  When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  The blood and cuff pressure measurement values are generated randomly on the device  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The blood pressure sensor can be connected to any Bluetooth® Smart Ready products available on the market  To make the sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_BPS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the 2 devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect  If configured the sensor notifies the application with intermediate cuff pressure each second and blood pressure measurements every 5 seconds Also the battery level and various device information is exposed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below  IoT Toolbox Blood Pressure Demo     ",
" Glucose Sensor  This section describes implemented profiles and services user interactions and testing methods for the Glucose Sensor application  ",
" Implemented profile and services  The Glucose Sensor application implements a GATT server and the following profile and services   Glucose Profile v1 0  Glucose Service v1 0  Battery Service v1 0  Device Information Service v1 1  Current Time Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications the sensor can send glucose measurements The latest three measurements are stored on the sensor device and can be retrieved by the collector  ",
" Supported platforms  The Glucose Sensor application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode When in connection pressing the ADVSW button triggers a new glucose measurement The glucose measurement values are generated randomly on the device  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The glucose sensor can be connected to any Bluetooth® Smart Ready products available on the market  To make the sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_GLS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the two devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect  If notifications are configured the sensor sends the data to the collector when ADVSW button is pressed for less than 1 second The measurement data is stored on the sensor Also the battery level and various device information is displayed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below  IoT Toolbox Glucose Sensor Demo     ",
" Proximity Reporter  This section describes the implemented profiles and services user interactions and testing methods for the Proximity Reporter application  ",
" Implemented profile and services  The Proximity Reporter application implements a GATT server and the following profile and services   Proximity Profile v1 0 1  Immediate Alert Service v1 0  TX Power Service v1 0  Link Loss Service v1 0 1  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect  The Immediate Alert Service shows the alert level control point GATT clients can trigger an alert on the device The TX Power Service exposes the TX Power level that is read from the Bluetooth LE controller The Link Loss Service exposes a configurable alert level When the radio link with the central node is suddenly lost the configured alert is triggered on the reporter node  ",
" Supported platforms  The Proximity Reporter application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  When a mild alert is triggered on the reporter RGB LED starts flashing blue When a high alert is triggered on the reporter both RGB LED starts flashing green  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The proximity reporter can be connected to any Bluetooth® Smart Ready products available on the market To make the sensor visible press ADVSW to start advertising which causes CONNLED to start flashing The sensor name “NXP_PXR” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the two devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect When a link loss is detected or when an alert is written on the control point the user interface exposes the alert level on the RGB LED as stated previously  Also the battery level and various device information is displayed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below   IoT Toolbox Proximity Reporter Demo     ",
" HID Device (Mouse)  This section describes implemented profiles and services user interactions and testing methods for the HID mouse application  ",
" Implemented profiles and services  The HID Device application implements a GATT server and the following profile and services   HID over GATT Profile v1 0  Human Interface Device Service v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect Security on the services and bonding is enabled on this device  When the GATT client configures notification the application starts sending HID reports every two seconds with the movement of the MOUSE_STEP The demo moves the cursor in a square pattern between AXIS_MIN and AXIS_MAX The report contains 3 bytes one for button status one for X axis and one for Y axis The report descriptor matches the example in chapter E 10 from the USB Device Class Definition for Human Interface Devices (USB HID Specification) Version 1 11  ",
" Supported platforms  The HID Device application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The HID mouse can be connected to any Bluetooth Smart Ready products available on the market that supports HID devices or to another supported platform running the HID Host example (setup steps detailed in the HID Host section)  To make the HID mouse visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_HID” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the 2 devices When prompted to enter the pin type the 999999 passkey   Enter PIN prompt on Android platform    When configured the HID mouse starts sending HID report which is configured as explained above with notifications every 100 milliseconds The mouse cursor shows a square pattern movement on the screen   HID Mouse detected by Android platform    ",
" HID Host  This section presents the implemented profiles and services user interactions and testing methods for the HID Host application  ",
" Implemented profiles and services  The HID Host application implements a GATT client or server for the following profile and service   HID over GATT Profile v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP central node It enters the GAP Limited Discovery Procedure and searches for HID devices to connect to After connecting with the peripheral it configures notifications and displays the received HID reports on a terminal connected to the UART port The application uses pairing with bonding by default When connected with the HID Device application it sends the 999999 passcode to the host stack by default  ",
" Supported platforms  The HID Host application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When in GAP Limited Discovery Procedure CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the SCANSW button pressed for 2-3 seconds The node then re-enters GAP Limited Discovery Procedure  See details below for hardware references   Hardware references        Platform  SCANSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The application is built to work only with the HID Device application presented in the previous subchapter and it supports up to 2 peripherals connected at the same time   Open a serial port terminal and connect it to board in the same manner described in section 5 1 3 The start screen is displayed after the board is reset  Press the SCANSW button on the HID Host board to start scanning for devices Do the same on the HID device board to make it enter discoverable mode The host connects with the board after it sees it advertise the HID service connects to it and configures report notifications The device then starts sending HID reports as shown below  Tera Term – Output Console on HID Host with 1 peripheral connected     To connect a second HID device press again the SCANSW button on the HID Host board to start scanning for devices Do the same on the second HID device board to make it enter discoverable mode The host connects with the board after it sees it advertise the HID service connects to it and configures report notifications The device then starts sending HID reports The console will print reports from both devices as shown below  Tera Term – Output Console on HID Host with 2 peripherals connected     ",
" Private Profile Server  This section describes the implemented profiles and services user interactions and testing methods for the Private Profile Server application  ",
" Implemented profiles and services  The Private Profile Server application implements a GATT client or server for the following profile and service   Private Profile (UUID: 0000fee9-0000-1000-8000-00805f9b34fb)  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect  ",
" Supported platforms  The Private Profile Server application is supported by the following platforms:   QN9080CDK   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  See details below for hardware references   Hardware references     Platform  ADVSW  CONNLED      QN9080CDK  BUTTON1  D5-RED      ",
" Usage  The Private Profile Server can be connected to any supported platforms running Private Profile Client application  To make the Private Profile Server visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The device is visible with the name “NXP_QPP” A solid CONNLED indicates a successful connection between 2 devices  The Private Profile is a cutom service that implements two custom characteristic:   Rx Characteristic (UUID: d44bc439-abfd-45a2-b575-925416129600) used to write data to the server  Tx Characteristic (UUID: d44bc439-abfd-45a2-b575-925416129601) used to get data from the server through notifications   When in connection and if notifications are configured the Private Profile Server starts sending data every 100 milliseconds through GATT instant value notifications If the client starts writing the Rx characteristic the value length received will be monitored in the data Rx callback Every 10 seconds a throughput statistics is made and Tx/Rx results are printed on the serial interface   Private Profile Server – Output Console     ",
" Private Profile Client  This section describes the implemented profiles and services user interactions and testing methods for the Private Profile Client application  ",
" Implemented profiles and services  The Private Profile Client application implements a GATT client or server for the following profile and service   Private Profile (UUID: 0000fee9-0000-1000-8000-00805f9b34fb)  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP central node It enters the GAP Limited Discovery Procedure and searches for Private Profile servers to connect to After connecting with the peripheral it configures notifications and monitors the data received through notifications  ",
" Supported platforms  The Private Profile Client application is supported by the following platforms:   QN9080CDK   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When in GAP Limited Discovery Procedure CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the SCANSW button pressed for 2-3 seconds The node then re-enters GAP Limited Discovery Procedure  See details below for hardware references   Hardware references     Platform  SCANSW  CONNLED  SENDSW      QN9080CDK  BUTTON1  D5-RED  BUTTON2      ",
" Usage  The application is built to work only with the Private Profile Server application presented in the previous subchapter   Open a serial port terminal and connect it to board in the same manner described in section 5 1 3 The start screen is displayed after the board is reset  Press the SCANSW button on the Private Profile Client board to start scanning for devices Press the ADVSW button on the Private Profile Server board to make it enter discoverable mode The client connects to the server after it sees it advertise the Private Profile Service The client then configures notifications and monitors data received through notifications  If the user wants to also send data from the client to the server after pressing SENDSW the client starts writing the Rx characteristic every 100 milliseconds    Private Profile Client – Output Console     ",
" Cycling Speed and Cadence Sensor  This section describes the implemented profiles and services user interactions and testing methods for the Cycling Speed and Cadence Sensor application  ",
" Implemented profiles and services  The Cycling Speed and Cadence application implements a GATT server and the following profile and services   Cycling Speed and Cadence Profile v1 0  Cycling Speed and Cadence Service v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications the sensor starts sending speed and cadence measurements The measurement values are generated randomly on the device  ",
" Supported platforms  The Cycling Speed and Cadence Sensor application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The sensor can be connected to any Bluetooth Smart Ready products available on the market To make the sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_CSCS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the 2 devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect  If configured the sensor notifies the application with speed and cadence measurements every second Also the battery level and various device information is exposed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below   IoT Toolbox Cycling Speed and Cadence Sensor Demo     ",
" Cycling Power Sensor  This section presents the implemented profiles and services user interactions and testing methods for the Cycling Power Sensor application  ",
" Implemented profiles and services  The Cycling Power Sensor application implements a GATT server and the following profile and services   Cycling Power Profile v1 0  Cycling Power Service v1 0  Battery Service v1 0  Device Information Service v1 1  Current Time Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications and/or indications the sensor starts sending power measurements The measurement values are generated randomly on the device  ",
" Supported platforms  The Cycling Power Sensor application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  Because all the fields in the power measurement cannot fit into one single ATT frame the user can toggle the optional fields by pressing the TOGSW button  See details below for hardware references   Hardware references         Platform  ADVSW  CONNLED  TOGSW      FRDM-KW41Z  SW4  LED3  SW3    QN9080CDK  BUTTON1  D5-RED  BUTTON2    FRDM-KW36  SW2  LED3  SW3      ",
" Usage  The sensor can be connected to any Bluetooth Smart Ready products available on the market To make the sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_CPS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the 2 devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect If configured the sensor notifies the application with power measurements Also the battery level and various device information is displayed for reading  To demonstrate profile functionality any bike application (from Health Fitness category) can be installed on Apple iOS or Android OS handheld devices that support Bluetooth Low Energy  ",
" Running Speed and Cadence Sensor  This section describes the implemented profiles and services user interactions and testing methods for the Running Speed and Cadence Sensor application  ",
" Implemented profiles and services  The Running Speed and Cadence application implements a GATT server and the following profile and services   Running Speed and Cadence Profile v1 0  Running Speed and Cadence Service v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications the sensor starts sending speed and cadence measurements The measurement values are generated randomly on the device  ",
" Supported platforms  The Running Speed and Cadence Sensor application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters GAP Discoverable Mode  When the node is connected the user can toggle the running status (running/walking) by pressing the TOGSW button When the status is set to “walking” the RGB LED turns solid When the status is set to “running” the RGB LED is not lit  See details below for hardware references   Hardware references         Platform  ADVSW  CONNLED  TOGSW      FRDM-KW41Z  SW4  LED3  SW3    QN9080CDK  BUTTON1  D5-RED  BUTTON2    FRDM-KW36  SW2  LED3  SW3      ",
" Usage  The sensor can be connected to any Bluetooth® Smart Ready products available on the market To make the sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_RSCS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the two devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect  If configured the sensor notifies the application with speed and cadence measurements every second Also the battery level and various device information are exposed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below   IoT Toolbox Running Speed and Cadence Demo     ",
" Health Thermometer  This section presents the implemented profiles and services user interactions and testing methods for the Health Thermometer application  ",
" Implemented profiles and services  The Health Thermometer application implements a GATT server and the following profile and services   Health Thermometer Profile v1 0  Health Thermometer Service v1 0  Battery Service v1 0  Device Information Service v1 1  Current Time Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications or indications the sensor starts sending intermediate temperature and temperature measurements  In a 5 second interval the sensor sends 5 events (4 notifications with the intermediate temperature and one indication with the temperature measurement) The intermediate temperature and temperature measurements are generated randomly on the device  ",
" Supported platforms  The Health Thermometer application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press ADVSW When in GAP Discoverable Mode CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect The node re-enters the GAP Discoverable Mode  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The sensor can be connected to any Bluetooth® Smart Ready products available on the market To make the sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_HTS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the two devices Hold the ADVSW button pressed for 2-3 seconds anytime to initiate disconnect  If configured the sensor notifies the application with temperature measurements Also the battery level and various device information are exposed for reading The IoT Toolbox can be used to showcase the profile functionality as shown in the image below   IoT Toolbox Health Thermometer Demo     ",
" Low Power Temperature Sensor and Collector  This section describes the implemented profiles and services user interactions and testing methods for the temperature sensor application  ",
" Implemented profiles and services  The Temperature Sensor application implements a GATT server a custom profile and the following services   Temperature Service (UUID: 01ff0200-ba5e-f4ee-5ca1-eb1e5e4b1ce0)  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect and configure notifications for the temperature value  The Temperature service is a custom service that implements the Temperature characteristic (UUID: 0x2A6E) with a Characteristic Presentation Format descriptor (UUID: 0x2904) both defined by the Bluetooth SIG  The Temperature Collector application implements a GATT client or server for the following profile and services   Temperature Service (UUID: 01ff0200-ba5e-f4ee-5ca1-eb1e5e4b1ce0)  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP central node It enters GAP Limited Discovery Procedure and searches for sensor devices to pair with After pairing with the peripheral it configures notifications and displays temperature values on a terminal connected to the UART port  Both application uses pairing with bonding by default When connected with the Low Power Temperature Sensor application the collector sends the 999999 passcode to the host stack by default  ",
" Supported platforms  The Temperature Sensor and Collector applications are supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36 On FRDM-KW36 and FRDM-KW38 deep-sleep modes 5 and 8 are used by default   ",
" User interface  After flashing the board both nodes enter cPWR_DeepSleepMode deep-sleep mode (3- LLS or 5 - VLLS) The application default configuration enables low power which disables LED support The user can manually change this and enable LED support else all subsequent LED behavior references are ignored All LEDs are off When the node is awake and communicating CONNLED is on To wake up the node press the WAKESW button  See details below for hardware references   Hardware references        Platform  WAKESW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW3  LED3      ",
" Usage  The setup requires two supported platforms one for the temperature sensor and one for the temperature collector   Open a serial port terminal and connect it to the temperature collector board in the same manner as described in 5 1 3 The start screen is displayed after the board is reset At first the LEDs are off on both devices  To start advertising on the sensor press the WAKESW button and CONNLED lights up The sensor enters into the gAppDeepSleepMode_c deep-sleep mode (1 - LLS or 8 - VLLS) which means that the MCU wakes up on any packet from the Link layer in this case the connect request If no connection is established in an interval of 30 seconds the sensor stops advertising and enters into the cPWR_DeepSleepMode again CONNLED turns off  To start scanning on the collector press the WAKESW button and CONNLED lights up The device wakes up enters into the cPWR_DeepSleepMode deep-sleep mode 6 scans and connects to a compatible sensor device If no connection is established within 10 seconds the collector stops scanning and enters deep-sleep mode (for QN9090/K32W061 is deep sleep mode 3) again CONNLED turns off  If the collector connects to a sensor node it bonds (if no bond was previously made) does service discovery (only the first time it connects with the sensor) and configures notification and waits for notifications from the sensor for 5 seconds If no data is sent the node disconnects and re-enters cPWR_DeepSleepMode The sensor exits low power and sends a notification with the value of the temperature read through an ADC from the thermistor if present or random generated if not  Tera Term – Output Console on Temperature Collector    Subsequent key pressing triggers other notifications for the collector If no key is pressed in an interval of 5 seconds the sensor node disconnects and re-enters cPWR_DeepSleepMode   ",
" IPv6 Router and Node (KW41 Platforms)  For information about the IPv6 Node and Router applications see the Bluetooth ® Low Energy Transport for IPv6 Datagrams (document BLEIP6UG)  ",
" Alert Notification Server  This section describes the implemented profiles and services user interactions and testing methods for the Alert Notification Server application  ",
" Implemented profile and services  The Alert Notification application implements a GATT client or server for the following profile and services   Alert Notification Profile v1 0  Alert Notification Service v1 0  Battery Service v1 0  Device Information Service v1 1  Current Time Service v1 1  Next DST Change Service v1 0  Reference Time Update Service v1 0   The application behaves as a GAP central node It enters the GAP Limited Discovery Procedure and searches for Alert Notification Clients or Time Clients to connect to After connecting with the peripheral it waits for notifications to be configured  ",
" Supported platforms  The Alert Notification Server application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When in GAP Limited Discovery Procedure CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the SCANSW button pressed for 2-3 seconds The node then re-enters GAP Limited Discovery Procedure  When in connection and if notifications are configured pressing the ALERTSW button triggers a new alert notification (“New mail”) to be sent to the GATT client and adjusts the time of the device by +1 hour Holding the ALERTSW button for 2-3 seconds triggers a new unread alert status notification (missed call) to be sent to the same GATT client  See details below for hardware references   Hardware references         Platform  SCANSW  CONNLED  ALERTSW      FRDM-KW41Z  SW4  LED3  SW3    QN9080CDK  BUTTON1  D5-RED  BUTTON2    FRDM-KW36  SW2  LED3  SW3      ",
" Usage  The application can be tested against the Profile Tuning Suite (PTS) black-box testing tool from the Bluetooth SIG  ",
" Wireless UART  This section describes the implemented profiles and services user interactions and testing methods for the Wireless UART application  ",
" Implemented profile and services  The Wireless UART application implements both the GATT client and server for the custom Wireless UART profile and services   Wireless UART Service (UUID: 01ff0100-ba5e-f4ee-5ca1-eb1e5e4b1ce0)  Battery Service v1 0  Device Information Service v1 1   The Wireless UART service is a custom service that implements a custom writable ASCII Char characteristic (UUID: 01ff0101-ba5e-f4ee-5ca1-eb1e5e4b1ce0) that holds the character written by the peer device  The application behaves at first as a GAP central node It enters GAP Limited Discovery Procedure and searches for other Wireless UART devices to connect If the node fails to find any peripherals within seconds it changes its role to a GAP peripheral It enters GAP General Discoverable Mode and waits for a GAP central node to connect  ",
" Supported platforms  The Wireless UART application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When in GAP Limited Discovery Procedure of GAP General Discoverable Mode CONNLED is flashing When the node connects to a peer device CONNLED turns solid To disconnect the node hold the SCANSW button pressed for 2-3 seconds The node then re-enters GAP Limited Discovery Procedure  See details below for hardware references   Hardware references         Platform  SCANSW  CONNLED  ROLESW      FRDM-KW41Z  SW4  LED3  SW3    QN9080CDK  BUTTON1  D5-RED  Button2    FRDM-KW36  SW2  LED3  SW3      ",
" Usage  The application is built to work with another supported platform running the same example or with the Wireless UART from the IoT Toolbox application When testing with two boards do the following   Open a serial port terminal and connect them to the two boards in the same manner described in section 5 1 3 The start screen is blank after the board is reset  The application starts as a GAP central To switch the role to a GAP peripheral press the role switch Depending on the role when pressing the SCANSW the application starts either scanning or advertising  As soon as the CONNLED turns solid on both devices the user can start writing in one of the consoles The text appears on the other terminal as shown in the figure below  After creating a connection the role (master or slave) is printed in the console The role switch can be pressed again before creating a new connection    Tera Term – received text on Wireless UART    When testing with one board and the IoT Toolbox do the following   Open a serial port terminal and connect the board in the same manner described in section 5 1 3 The start screen is blank after the board is reset  Press the role switch button to behave as a GAP peripheral and then press the SCANSW to start advertising The IoT Toolbox app can then connect Select UART instead of Console and start typing   ",
" Bluetooth LE Shell  This section describes the functionality user interactions and testing methods for the Bluetooth LE Shell Application  ",
" Implemented stack features  The Bluetooth LE Shell Application implements a console application that allows the user to interact with a full feature Bluetooth Low Energy stack library It implements All GAP roles and both GATT client and server Enabling these roles can be done using shell commands  ",
" Implemented profile and services  The application implements a dynamic GATT database The user can add services at runtime and also erase the database contents The database is always populated with the GAP and GATT services These services cannot be erased The user can dynamically add the following services   Heart Rate Service (UUID: 0x180D)  Battery Service (UUID: 0x180F)  Device Information Service (UUID: 0x180A)  Internet Support Profile Service (0x1820)   ",
" Supported platforms  The Bluetooth LE Shell application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) The interaction with the board is done entirely by using the shell commands via the serial communication terminal  ",
" Usage  The application is built to work with any other Bluetooth LE device To showcase the functionality two platforms are used in the following setup   Open a serial port terminal and connect them to the two boards in the same manner described in section 5 1 3 The start screen is displayed after the board is reset All LEDs are flashing on both devices  Configure one of the devices as a GAP peripheral and a Heart Rate server Change name to HRS Start advertising on this device Kinetis Shell gap devicename HRS -- GATTDB Event: Attribute Written HRS gap advdata 1 6 -- GAP Event: Advertising data successfully set HRSHRS gap advdata 8 HRS -- GAP Event: Advertising data successfully set HRS gap advstart -- GAP Event: Advertising started HRS gattdb addservice 0x180D -- Heart Rate - Heart Rate Measurement Value Handle: 14 - CCCD Handle: 15 - Body Sensor Location Value Handle: 17 - Heart Rate Control Point Value Handle: 19 -- GATTDB Event: Service Added in database  Configure the other device as a GAP central Change name as Collector Start scanning and connect to the HRS device by selecting the corresponding device index In the example below the HRS device is device number 2 Kinetis Shell gap devicename Collector -- GATTDB Event: Attribute Written Collector gap scanstart -- GAP Event: Scan started Collector -- GAP Event: Found device 0 : 880F102F500E 0 dBm -- GAP Event: Found device 1 : NXP_CSCS 00049F000006 0 dBm -- GAP Event: Found device 2 : HRS 00049F0000FF 0 dBm Collector gap connect 2 -- GAP Event: Scan stopped Collector -- GAP Event: Connected  Optionally the devices can be paired On the collector initiate the pairing Collector gap pair -- Pairing -- GAP Event: Passkey is 792910  On the HRS enter the pin displayed by the collector as shown below If the leSecureConnectionSupported member of gPairingParameters from app_config c is enabled then the PIN is not required HRS -- GAP Event: PIN required HRS gap enterpin 792910 -- GAP Event: Device Paired  On the Collector start service discovery The device discovers the GAP GATT and Heart Rate services Collector gatt discover -all -- Discovered primary services: 3 -- Generic Access Start Handle: 1 End Handle: 7 - Device Name Value Handle: 3 - Appearance Value Handle: 5 - Peripheral Preferred Connection Parameters Value Handle: 7 -- Generic Attribute Start Handle: 8 End Handle: 11 - Service Changed Value Handle: 10 - Client Characteristic Configuration Descriptor Handle: 11 -- Heart Rate Start Handle: 12 End Handle: 19 - Heart Rate Measurement Value Handle: 14 - Client Characteristic Configuration Descriptor Handle: 15 - Body Sensor Location Value Handle: 17 - Heart Rate Control Point Value Handle: 19  Configure the HRS to send notifications by writing the CCCD from the Collector Send a GATT write command with value 1 to the CCCD handle discovered 15 Collector gatt write 15 0x0001  Send heart rate measurement notifications from the HRS device by using the value handle obtained after adding the service in the previous step HRS gatt notify 14  A notification appears on the Collector console Collector -- GATT Event: Received Notification Handle: 14 Value: B400   ",
" Throughput feature  The Bluetooth LE Shell application also has a throughput test feature which can be used to test different combinations of connection interval payload size and packet count to determine the best data-rate  This feature requires two devices:   GAP Peripheral: transmits the test packets  GAP Central: receives the packets and display a report   All throughput related commands are grouped under the “thrput” keyword:   thrput start tx: configures the device as a GAP Peripheral and start advertising Once the receiving device is connected the packet transmission will start The packet size and count can also be specified (-s size_value -c count_value )  thrput start rx: configures the device as a GAP Central and will start scanning Once a transmitter device is found it will connect to it and wait for the test to begin The connection interval can also be configured (-ci value )  thrput stop: will stop the test and disconnect the devices   Once a connection has been established between the devices and initial throughput test end one can start a new throughput transmission test with a new set of parameters (packet size / count)  The receiving device will generate the report if no packets were received for more 3 consecutive connection events  The default config of the throughput test is the following:  Packet count: 1000  Payload size: 20 bytes  Connection interval (min max): 160 160 (200ms)    Example of a test report:  ****************************************  *********** TEST REPORT ************  ****************************************  Packets received: 1000  Total bytes: 244000  Receive duration: 4162 ms  Average bitrate: 469 kbps  *****************************************  ********** END OF REPORT ***********  *****************************************  ",
" Over the Air Programming (OTAP)  This section describes the implemented profiles and services user interactions and testing methods for the Bluetooth LE OTAP application  ",
" Implemented profile and services  The Bluetooth LE OTAP applications implement the GATT client and server for the custom Bluetooth LE OTAP profile and service   Bluetooth LE OTAP Service (UUID: 01ff5550-ba5e-f4ee-5ca1-eb1e5e4b1ce0)   The Bluetooth LE OTAP Service is a custom service which has 2 characteristics   OTAP Control Point Characteristic (UUID: 01ff5551-ba5e-f4ee-5ca1-eb1e5e4b1ce0) This characteristic can be written and indicated to exchange OTAP Commands between the OTAP Server and the OTAP Client Data chunks are not transferred using this characteristic  OTAP Data Characteristic (UUID: 01ff5552-ba5e-f4ee-5ca1-eb1e5e4b1ce0) This characteristic can be written without response by the OTAP Server to transfer image file data chunks to the OTAP Client only when an image block transfer is requested via the ATT transfer method Data chunks can also be transferred via the L2CAP credit based PSM channels method   The demo runs using 4 applications: an OTAP Client embedded application an OTAP Bootloader embedded application an OTAP Server embedded application and an OTAP Server PC application The OTAP Client embedded application has two versions an ATT version and a L2CAP version each using a different transfer method The OTAP Bootloader and OTAP Clent applications must be flashed on the same device (the program region does not overlap)  The embedded OTAP Server application is a GAP Central application which scans for devices advertising the Bluetooth LE OTAP service After it finds one it connects to it and configures the OTAP Control Point CCC Descriptor to receive ATT Indications from the device then it waits for OTAP commands from this device  Once commands start arriving from the OTAP Client via ATT Indications the OTAP Server relays them via serial interface to a PC application which responds The responses are then sent back to the OTAP Client by writing the OTAP Control Point Characteristic The embedded OTAP Server application effectively acts as a relay between the OTAP Client to which the image is sent over the air and the OTAP Server PC application which has an OTAP image file constructed using a binary srec image or a bin image  The OTAP Client is a GAP Peripheral which advertises the Bluetooth LE OTAP Service and waits for a connection from an OTAP Server After an OTAP Server connects the OTAP Client waits for it to write the OTAP Control Point CCCD and then starts sending commands via ATT Indications If the OTAP Client is configured to ask the data transfer via the L2CAP CoC PSM it registers and tries to connect a predetermined L2CAP PSM before sending any commands to the OTAP Server  ",
" Supported platforms  The OTAP application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing two boards with the OTAP Server and OTAP Client applications respectively the devices are in idle mode (all LEDs flashing) To start advertising press the ADVSW button on the OTAP Client To start scanning press the SCANSW button on the OTAP Server After the two devices connect and start exchanging commands CONNLED becomes solid on the OTAP Server and on the OTAP Client  After the embedded applications are flashed to the boards the OTAP Server PC application must be started The application creates an OTAP image file using the provided executable srec or bin file connects to the embedded OTAP Server via the configured serial interface and waits for commands The application shows details about the creation of the image file and allows the configuration of the OTAP upgrade image file header A log view is present where the interactions between the OTAP Client and the OTAP Server are shown   Hardware references         Platform  ADVSW  SCANSW  CONNLED      FRDM-KW41Z  SW4  SW4  LED3    QN9080CDK  BUTTON1  BUTTON1  D5-RED    FRDM-KW36  SW2  SW2  LED3      ",
" Usage with Test Tool for Connectivity products  This is a list of requirements   Test Tool for Connectivity Products 12 5 0 or newer – Test Tool on www nxp com  Serial COM port drivers – these are board-specific   These are the steps to run the application   Flash the OTAP Server onto a supported platform and the OTAP Bootloader and the OTAP Client to another supported platform Make sure the board running the OTAP Server is connected to your PC and your PC has appropriate drivers for the USB to serial device on that board The OTAP Bootloader must be programmed separately into the MCU before programming the OTAP Client application  Create the application to send over the air The executable must be provided in the srec or bin format The srec format executable can be obtained by using the IAR Output Converter and setting the output format to Motorola as shown below The created srec application image must be offset to begin after the Bootloader region To offset the application copy the settings from the Linker- Config tab of the otap_client_l2cap_credit or otap_client_att example applications project properties For more details see the Bluetooth LE Application Developer’s Guide (BLEADG)  IAR Output Converter Dialog - srec output    To obtain a bin file from IAR select the Raw binary option in the IAR Output Converter as seen in the figure below  IAR bin file output converter    To obtain a bin file from MCUXpresso IDE go to the Project properties - Settings - Build steps window and press the Edit button for the Post-build steps A Post-build steps window will show up in which the following command must be added or uncommented (by removing the '#' character at the beginning) if it is already there: arm-none-eabi-objcopy -v -O binary \"${BuildArtifactFileName}\" \"${BuildArtifactFileBaseName} bin\" To obtain a srec ( s19) file add or uncomment the follwoing post-build command in the same window: arm-none-eabi-objcopy -v -O srec \"${BuildArtifactFileName}\" \"${BuildArtifactFileBaseName} s19\" This window is shown in the figure below  MCUx bin srec file output    Start the Test Tool application If you have the proper drivers installed and the OTAP Server board is connected to the PC then its corresponding serial port shows up in the USB/UART Active devices view on the Start Page of the Test Tool software as shown below  Test Tool Start Page - OTAP Server USB/UART    Go to the OTA Updates menu in Test Tool and choose the OTAP BLE option to open the Bluetooth LE over-the-air update window  Test Tool OTAP Bluetooth LE    Load the image file into the application and configure the image file header and start the OTAP Server  In the Image File Information box of the OTAP Bluetooth LE application from Test Tool press the “Browse” button and go to the srec or bin file containing the image to be sent to the OTAP Client The srec or bin file and the OTA Header configuration options from the same box is used by the application to build the OTAP Image File which is sent over-the-air The default values of the OTA Header configuration work out of the box for the OTAP demo applications For details about these configuration options see the Bluetooth LE Application Developer’s Guide document (BLEADG) After the srec or bin file is chosen a pop-up window asks to choose the target processor (this is used to correctly configure the Sector Bitmap sub-element of the OTAP Image File) Choose the correct processor and press “OK” The \"Image contains bootloader\" tick-box only needs to be selected for KW41Z devices  Test Tool OTAP Bluetooth LE Processor Selection    After the image is loaded go to the OTA Server Image Loading box select the correct COM Port for the OTAP Server board and the default baudrate of 115200 and press the “Connect to OTAP Server Device” button If the connection is successful then the Message Log shows this If the image is loaded before connecting to the OATP Server COM Port then the application’s OTAP Server starts automatically If the connection to the COM Port is established before the image is loaded then the “Start OTAP” button needs to be pressed to start the application’s OTAP Server For details see the annotated screenshot below  Test Tool Bluetooth LE OTAP Application Overview    Before starting the image transfer process the data rate must be configured for each transfer method (ATT or L2CAP CoC) The image chunks of a block are sent over the serial interface and over-the-air without waiting for confirmation and if the data rate is not configured correctly errors can appear in the transfer process which can slow it down significantly The optimal data rate depends on multiple factors like: distance between boards type of antenna performance of the RF circuitry between the radio and antenna type and level of noise in the environment speed of the storage medium in which the image is saved on the OTAP Client serial driver delay between PC and OTAP Server board and other factors If the data rate is too high then the OTAP Client receives a new chunk before it can process the previous one and it sends an “Unexpected Chunk Sequence Number” error and restart the transfer of the current block from where it left off If the channel is too noisy the transmitter can be flooded and some chunks may not reach the client triggering a similar type of error The default data rate values should work for most configurations   Start the embedded applications by pressing ADVSW first on the OTAP Client and then on the OTAP Server The transfer progress and transfer-related messages and/or errors are shown in the application window The duration of the transfer depends on the size of the image and the chosen data rate and transfer method  Test Tool OTAP Bluetooth LE Image Transfer in Progress    After all the blocks are sent the OTAP Client send an Image Transfer Complete command to the OTAP Server When this command is received by the PC Application it displays a “Sent Image with Success” message in the log window  Test Tool OTAP Bluetooth LE Image Transfer Completed    After the image transfer is complete the OTAP Client triggers the bootloader and resets the MCU The bootloader takes about 30 seconds to flash the image on the board After this time passes the MCU resets again and runs the new image   ",
" Usage with IoT Toolbox  This is the list of requirements   Mobile device running Android platform or iOS with hardware and software supporting Bluetooth 4 0 and later  Kinetis Bluetooth LE Toolbox application – download from the specific application store for your device   To run the application do the following   Flash the OTAP Client ATT and the OTAP Bootloader applications to a supported platform The Kinetis Bluetooth LE Toolbox only supports the ATT OTAP Client  Create the application to send over the air in srec format Follow the instructions from the previous section on how to do this Remember to include the Bootloader in its appropriate section in your application  Start the Kinetis Bluetooth LE Toolbox application on your mobile device and start the OTAP Tool The application starts scanning  Press ADVSW on the board to start Advertising on the embedded OTAP Client application The device should show up in the list of scanned devices Touch the device in the scan list to connect to and the application performs service discovery and displays some information shown in the figures below  IoT Toolbox - OTAP Tool Scanning and Discovery     Press the “Open” button and load the srec file to be sent over-the-air Once the file is loaded some information about it is displayed Press the “Upload” button to start the image transfer process A progress bar is shown while the image transfer is ongoing The successful transfer is signaled by the progress bar reaching 100% This is shown in the figures below  IoT Toolbox - OTAP Image Transfer    After the image transfer is complete the OTAP Client triggers the bootloader and resets the MCU The bootloader takes about 30 seconds to flash the image on the board After this time passes the MCU resets again and runs the new image   ",
" Notes on multicore platforms and secured OTAP  The following sections decribe:    Secured OTAP for multicore platforms  Building the image files  Using test tool to perform secured OTAP    ",
" Secured OTAP for multicore  FRDM-K32W042 is a multicore platform equipped with two cores: an Arm Cortex-M4 core and an Arm Cortex-M0+ core The process for performing OTA updates on this platform differs from single core platforms:   Selective OTAP can be performed A single OTA update can include only the M4 image only the M0+ image or both  The image files (* bin or * srec) are encrypted and signed beforehand resulting in a * sbin file   ",
" Building the image files  The image files (* bin or * srec) are obtained as described in section 5 19 4 with few small differences:   When building with IAR EW two image files are obtained one for the *_cm4 project containing only the M4 image and one for the *_cm0p project containing only the M0+ image  When building with MCUXpresso IDE a single image file is obtained containing both the M4 and M0+ images However this image file is not generated by default Refer to section 5 19 4 for how to change the post-build steps to generate a bin or srec file In addition when generating a bin file the arm-none-eabi-objcopy command must include “—gap-fill=0xFF” as an additional argument This reduces the size of the image that ends up being transferred OTA since unused sections filled with 0xFF will be trimmed by Test Tool To recap when generating a bin file the command should look like this: arm-none-eabi-objcopy -v -O binary –gap-fill=0xFF \"${BuildArtifactFileName}\" \"${BuildArtifactFileBaseName} bin\"  When generating a srec file the command should be: arm-none-eabi-objcopy -v -O srec \"${BuildArtifactFileName}\" \"${BuildArtifactFileBaseName} srec\"    ",
" Using the Test Tool to perform secured OTAP   Start the Test Tool application and go to OTA Updates OTAP Bluetooth LE Test Tool application    Click the Browse button and select an image file Select K3S in the Processor Selection dialogue Processor selection    Choose from the dropdown menu on the right side whether the file you selected contains both M4 and M0+ images i e it has been generated by MCUXpresso IDE or only the M4/M0+ image i e it has been generated by IAR EW The start address is the default one for the provided OTAP demos If you have changed the project linker layout pick the correct start address for the image  Select which core images should be updated If the initial selected image contains only the M4 or only the M0+ image but the user wants to update both a second Browse button appears and the user must select the second image file As in the previous step the start address is the default one In this example screenshot a bin file containing the M4 image file has been selected but the user wishes to update both core images therefore they must also select the file containing only the M0+ image K32W032 image information    Only secured OTAP is supported for K32W032 The user can overwrite the 256-bit SBKEK (Secured Boot Key Encryption Key) used to encrypt the image The key is secret and must be shared with the client board which decrypts the image The way to share the key is left to the user In the demos provided the key is hardcoded in Test Tool and in the application residing on the client board After the client application has received the image it will write the pre-shared SBKEK at a known location in flash where it is read by the bootloader after reset  Click OK The user is prompted to save the resulting encrypted and signed image with a sbin extension After saving a dialog box appears with the SBKEK used to encrypt the image and the RHK (Root Hash Key) which is an SHA-256 hash of the RSA public key for the certificate used to sign the image As noted in step 5 the SBKEK must be shared with the client in a secured way The RHK is public and is sent over-the-air as part of the OTAP process It is also not modifiable by the user since it depends on the certificate Security keys   If the user wants to use their own certificate they must overwrite the certificate used by Test Tool specifically the files named cert0_noca der crt (root certificate) and private pem (RSA private key) located in Secured/config inside the folder where Test Tool is installed  The sector bitmap field in the OTAP Bluetooth LE view is used to determine which sectors is erased on the client board before writing the new image By default the entire useful flash is erased The bitmap looks like this: 0x FF FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 The bold bytes above represent the Non-Volatile Memory space in M0+’s flash (8 sectors * 2K for each sector = 16K of NVM) To avoid the NVM being erased after the secured image has been created the user can change FF to 00 The secured image is recreated – the NVM is not erased on the client board This dialog box appears Bitmap file update     Secured image format  After the image files have been selected and the user clicks OK to generate the sbin Test Tool will create the secured image in the background using calls to the elftosb executable For full documentation see the Kinetis elftosb User’s Guide The following figure shows an overview of the sbin file: Secured image format  The sbin file will begin with two plaintext sections the boot image header and the section table The DEK dictionary contains one or more randomly generated keys used to encrypt the useful data These keys are wrapped by the SBKEK chosen by the user as per RFC 3394 Encrypted sections follow and the image authentication code is at the end The only information needed by the bootloader on the client board to successfully authenticate and decrypt the image is the two keys: SBKEK for decryption RHK for authentication  ",
" Hybrid (Dual-Mode) Bluetooth Low Energy Heart Rate Sensor and IEEE 802 15 4 Coordinator Demo Application (KW41 Platform)  ",
" Implemented profile and services  The Bluetooth LE Heart Rate Sensor implements a GATT server and the following profile and services   Heart Rate Profile v1 0  Heart Rate Service v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When the collector configures notifications the sensor starts sending heart rate measurements every second  The IEEE 802 15 4 part of the application is an IEEE 802 15 4 Coordinator running in background in parallel with the Bluetooth LE sensor application  ",
" Supported platforms  The Hybrid (Dual-Mode) Bluetooth Low Energy Heart Rate Sensor and IEEE 802 15 4 Coordinator application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z   ",
" User interface  The IEEE 802 15 4 thread starts automatically at device startup in the role of an IEEE 802 15 4 Coordinator It chooses the channel based on Clear Channel Assesment (CCA) No user interaction is needed  The Bluetooth LE Heart Rate Sensor user interface is identically with the standalone one After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode the CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button pressed for 2-3 seconds The node then re-enters the GAP Discoverable Mode  See details below for hardware references   Hardware references     Platform  ADVSW  CONNLED      FRDM-KW41Z  SW4  LED3      ",
" Testing method  The IEEE 802 15 4 Coordinator is basically a “MyWirelessApp Coordinator” demo (for more information check the 802154MPDAUG document) and responds to requests from other IEEE 802 15 4 devices (Active Scan Association Data Requests) Any IEEE 802 15 4 sniffer can be used to observe the over-the-air activity on the channel that the coordinator started  At the same time the Bluetooth LE Heart Rate Sensor part of the application runs independently based on user interaction The Heart Rate Sensor can be connected to any Bluetooth Smart Ready product available on the market To make the Heart Rate Sensor visible press the ADVSW button to start sending advertisements which causes CONNLED to start flashing The sensor name “NXP_HYBRID_HRS” shows on the device when its scanning is active A solid CONNLED indicates a successful connection between the 2 devices Hold the ADVSW button pressed for 2-3 seconds anytime to get the sensor to initiate disconnect  If configured the sensor notifies the application with heart rate measurements every second Also the battery level and various device information is exposed for reading The Kinetis Bluetooth LE Toolbox can be used to showcase the Heart Rate profile functionality  ",
" Relay Proxy  This section describes the functionality user interactions and testing methods for the Bluetooth LE Relay Proxy Application  ",
" Implemented stack features  The Bluetooth LE Relay Proxy implements a GAP dual-role application that allows 2 simultaneous connections one with a GAP Peripheral and the other with a GAP Central device It also supports both GATT client and server When the two connections are active the device will relay data from the GAP Peripheral to the GAP Central and vice-versa  ",
" Implemented services  The device will discover services on the GAP Peripheral and clone the database locally by using the dynamic GATT database feature The application acts afterwards as a proxy for that device and will respond to service discovery queries made by the remote GAP Central device The application supports all services defined by the Bluetooth SIG Connection with the GAP Peripheral that contains the database to be cloned is made based on the specified service in the following macro from app h: gAppProxySelectService_d By default the application will check for GAP Peripherals that support the Heart Rate Service (0x180D)  ",
" Supported platforms  The Relay Proxy application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080CDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When in GAP Limited Discovery Procedure CONNLED is flashing When the central node connects to the peripheral CONNLED turns solid After service discovery is done and the dynamic GATT database is created the application enters GAP Discoverable Mode and CONNLED starts flashing When the central node connects to the peripheral CONNLED turns back solid To disconnect the node from all connections hold the SCANSW button pressed for 2-3 seconds  See details below for hardware references   Hardware references        Platform  SCANSW  CONNLED      FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The application is built to work with any other two devices that implement a GAP Peripheral and a GAP Central The out of the box example describes the Bluetooth LE Relay Proxy connecting with a Heart Rate Sensor application from the same SDK and a smartphone or a tablet running the Kinetis Bluetooth LE Toolbox application   Download a Heart Rate Sensor application on a supported platform and start it as described in the previous chapter  Press SCANSW on the Bluetooth LE Relay Proxy application The node will connect with the Heart Rate Sensor and do Service Discovery CONNLED is solid After the database is recreated locally the node will start advertising with the same data as the original device CONNLED starts flashing  Start Kinetis Bluetooth LE Toolbox and connect to the Bluetooth LE Relay Proxy application as with a normal Heart Rate Sensor application  All GATT Read and Write operations made by the Kinetis Bluetooth LE Toolbox are relayed by the node to the initial Heart Rate Sensor All GATT Notifications are relayed to the Kinetis Bluetooth LE Toolbox application   ",
" Wireless Power Transfer System Receiving Unit and Transmitting Unit  This section describes the implemented profiles and services user interactions and testing methods for the wireless power transfer receiving unit (WPT PRU) and transmitting unit (WPT PTU)  ",
" Implemented profile and services  The WPT PRU and PTU applications implement a GATT server and a GATT client for the following profile and service:   A4WP Wireless Power Transfer System specification v1 3  Wireless Power Transfer (WPT) Service v1 3   The WPT PRU application behaves as a GAP peripheral node It enters GAP Limited Discoverable Mode using as advertising data the WPT service UUID (0xFFFE) and the ATT database handle corresponding to the service declaration  The WPT PTU application behaves as a GAP central node It scans for PRU devices by looking for the WPT Service UUID it connects to a PRU device performs a procedure known as device registration and allows or disallows the device to start charging The device registration procedure should take less than 500 milliseconds and for this reason the profile uses security mode 1 level 1 and no service discovery is performed All handles are computed using the offset handle found in the advertising data Device charging state and other measurable values are simulated in software using random numbers (except for device temperature included in the dynamic parameters)  Both application use pairing with bonding by default Both applications require a terminal to output application specific information A part of the application information is provided using onboard LED’s All actions are triggered using the push-button events The events have the following meaning:   Short press: pressing a button and releasing it under 1 second  Long press: pressing a button and releasing after 1 second but before 8 seconds are passed  Very long press: pressing a button and releasing it after 8 seconds   ",
" Supported platforms  The Wireless Power Transfer System Receiving Unit application is supported by the following platforms:   FRDM-KW41Z  USB-KW41Z  FRDM-KW36   ",
" User interface  After flashing the boards the PRU device enters a “Null” state and the PTU enters a “Power Save” state A short press on the ADVSW button of the PTU device simulates a device configuration and the presence of a PRU device which requires charging For this reason the PTU device starts a scanning procedure A short press on the ADVSW of the PRU device simulates sufficient power to start the advertising procedure During both scanning and advertising procedures CONNLED will flash If the PRU device does not connect to the PTU for 10 seconds the advertising is stopped and CONNLED turns off In this case the PRU device returns to the “Null” state After the PTU connects to the PRU CONNLED is turned on  After the devices connect the PTU performs device registration and determines if it has sufficient power to charge the PRU If registration is successful the push-buttons events change their meaning as follows:   Short press on the PTU device triggers another scanning procedure in case another device is supported  Short press on the PRU device prints the dynamic parameters in the console  Long press on the PTU device prints information regarding the connected devices and maximum power remaining  Long press on the PRU device simulates a charge complete event After the PRU is considered charged the PTU will disconnect from it After disconnection the PRU device enters in a “Boot” state and requires a very long press event to return to “Null” state  Very long press on the PTU device simulates an error case and disconnects all connected PRU devices  Very long press on the PRU device simulates power removal (taking a device outside the charge area)   If the PRU device is allowed to charge it simulates charging by printing information in the console and by turning CHGLED on  See details below for hardware references   Hardware references         Platform  ADVSW  CONNLED  CHGLED      FRDM-KW41Z  SW4  LED3  LED4    FRDM-KW36  SW2  LED3  LED4-RED      ",
" Usage  The setup requires two or three supported platforms one for PTU device and one or two for PRU devices   Open serial port terminals for all the platforms The start screen is displayed after the board is reset At first the LEDs are flashing on all devices  Press ADVSW on the PTU device and on a PRU device CONNLED should start flashing on both devices until the connection is established or until the PRU device times out  After the registration procedure is finished the PTU device will display a success message and will simulate the procedure for providing power to the PRU  PTU and PRU after connecting registering and enabling charge    Short press ADVSW on the PRU device again to print most recent dynamic parameters  Long press on ADVSW on the PTU device to get system information  PTU information and PRU dynamic parameters display    Long press ADVSW on the PRU device to simulate a charge complete event  PRU device charged    Very long press ADVSW on the PRU device to simulate power removed and return it into a “Null” state  PRU power removed    If a second PRU device is used ADVSW can be short pressed on both the PTU and on the new PRU after step 3 was finished for the previous PRU Also to test the power sharing procedure support the gAdjustPowerCommandSupport_d macro should be defined as TRUE on at least one of the PRU devices before flashing the firmware If the above macro is set to TRUE a scenario is designed so that two PRU devices combined require more power than the PTU device can provide but the PTU device attempts a power sharing procedure so that it can adjust the power draw for at least one of the PRU’s  Power sharing support on one PRU     ",
" Hybrid (Dual-Mode) Bluetooth Low Energy and Generic FSK Advertising Demo Application   ",
" Implementation  The Hybrid Bluetooth LE-GFSK application demonstrates Generic FSK transmission/reception and Bluetooth advertising/scanning/multiple connections coexistence  The Bluetooth part of this demo implements a modified version of the Wireless UART demo application  The GenFSK part can receive/transmit data in the idle periods of the Bluetooth protocol A predefined GFSK data packet is sent on the default channel (gGenFskDefaultChannel_c) at an interval (gGenFskApp_TxInterval_c) If at that time the radio is in use by the Bluetooth protocol the transmission will be postponed until the idle signal is received from the MWS coexistence module  When in scanning mode all received GenFSK packets will be displayed on the console along with all received Bluetooth LE events/data preceded by a string which informs the protocol on which it was received: “BLE:” / “GFSK:”  A device can tart Bluetooth advertising scanning in parallel with GenFSK reception and transmissions All these operations will not overlap  Also multiple Bluetooth connections are supported in both roles (Central and Peripheral) along with all the above Application files      File name  Description       app_preinclude h  main c   Files common to both GenFSK and Bluetooth application     app_config c  gatt_db h  gatt_uuid128 h  wireless_uart c  wireless_uart h   Bluetooth application files     genfsk_adv c  genfsk_adv h   GenericFSK application files      ",
" How it works  When a switch is pressed for the first time the specific protocol application starts The first protocol to start has complete access to the radio (XCVR)  When the other switch is pressed the second protocol stack tries to start by acquiring access to the XCVR If the first protocol is idle access will be granted Else it will be informed when the XVCR is idle and the acquire control  Since the Bluetooth protocol has strict timings the GenFSK should not acquire the XCVR for long periods Instead it should check the inactivity duration of the Bluetooth stack using the MWS_GetInactivityDuration() API and release access to the XCVR before the next Bluetooth event  Also to maximize the GenFSK application activity the MWS idle signal should be monitored The demo application is doing this by registering it’s own callback into the MWS module using: MWS_GetRegisteredCallback() API  The GenFSK link layer also needs to be informed of the MWS events so to achieve this the application will first get the registered callback for the GenFSK protocol using MWS_GetRegisteredCallback() API save this callback and call it in the registered application callback Using this method multiple layers can chain callback to monitor MWS events  By monitoring the MWS idle signal the GenFSK application can start the RX operation asap Also to give the control to the Bluetooth stack in time the GenFSK application starts a timer with an expire time less than the inactivity duration of Bluetooth to release access to the XCVR Upon release the Bluetooth stack will receive an MWS idle signal and the handler will configure the XCVR for Bluetooth mode  The GenFSK TX is done periodically using a timer If when the timer expires the Bluetooth stack has access to the XCVR or there is not enough idle time to perform the GenFSK TX then it will be postponed until the next idle signal is received  Working of GenFSK     ",
" Supported platforms  The Hybrid (Dual-Mode) Bluetooth Low Energy and Generic FSK Advertising application is supported by the following platforms:  • FRDM-KW36  ",
" User interface  By default after power up the application is in idle mode: all LEDs are flashing To control the application the on-board switches are used:  BLESW – Short press this button to start the Bluetooth advertising  BLESW – Long press this button to start the Bluetooth scanning  GFSKSW – Short press this button to start the Generic FSK transmission  GFSKSW – Long press this button to start the Generic FSK reception  CONNLED – If only this LED is flashing the application is in advertising/scanning mode (Bluetooth LE) When the LED turns solid a Bluetooth connection has been established Also a serial console application can be used to track the messages displayed and the received Bluetooth LE/GFSK packets  Hardware references         Platform  BLESW  GFSKSW  CONNLED    FRDM-KW36  SW2  SW3  LED3      ",
" Customization  The steps below will help changing the default settings of this demo  For Bluetooth LE the default advertising config (gAppAdvParams) and data (gAppAdvertisingData) are found in the app_config c file Also the scanning parameters (gScanParams) can be found in this file The default scan interval is 100ms with a scan window of 50ms  The GFSK protocol is active during the inactive periods of the Bluetooth LE protocol Configuring a large scan window in comparison to the scan interval will not leave enough room for the GFSK protocol to work  For GFSK the following defines (self-explanatory) are used by the application and can be found in the “ble_genfsk_advertising h” file:    gGenFSK_AdvAddress_c    gGenFskDefaultSyncAddress_c    gGenFskDefaultTxPowerLevel_c    gGenFskDefaultChannel_c    gGenFskApp_TxInterval_c    The “gGENFSK_MwsControl_c” define controls where the coexistence management should be done:         Value  Description      gGENFSK_NoMwsControl_c  No protocol coexistence management    gGENFSK_LLMwsControl_c  The GenFSK link layer manage the coexistence with Bluetooth protocol In this case the GenFSK will release control to the XCVR for Bluetooth after every sequence (TX/RX)    gGENFSK_AppMwsControl_c  The Application controls when the GenFSK releases the access to the XCVR The GenFSK link layer still need to perform the XCVR configuration when the idle signal is received from the Bluetooth stack        The payload to be transmitted over GFSK is represented by the “message” array used by the “GfskApp_Tx()” function  Other GFSK settings can also be changed but require a more advanced knowledge of the system:  pktConfig – configures the preamble size length field config synch address size  crcConfig – enable/disable the data CRC and the polynomial used  whitenConfig – enable/disable data whitening polynomial used start/end markers  radioConfig – change data rate and modulation  ",
" ANCS Client  This section describes the implemented profiles services user interactions and testing methods for the Bluetooth LE OTAP application  ",
" Implemented profile and services  The ANCS Client application implements an ANCS Client for the custom ANCS Service available on iOS mobile devices  Check the documentation available on the iOS website for details about the ANCS service its characteristics and supported features  The demo application acts as a GAP Peripheral which advertises a service solicitation for the custom ANCS Service It also acts as a GATT Client once connected to a device offering the ANCS Service The application offers some services as GATT Server  Once connected to a mobile device offering the ANCS Service the application displays information about ANCS Notifications received from that device The notifications are received via ATT Notifications for which the ANCS Client must register on the peer ANCS Server The application also retrieves and displays additional information about the received ANCS Notifications This is achieved by writing commands to specified characteristics on the ANCS Server and receiving responses via ATT Notifications from other characteristics All information is displayed to the user using a shell available over a serial communications interface  Accessing the ANCS Service requires Bluetooth LE security to be enabled  ",
" Supported platforms  The ANCS Client application is supported on the following platforms:   FRDM-KW36   ",
" User interface   After flashing the board the device is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When the ANCS Server (Gap Central) connects to the ANCS Client (GAP Peripheral) CONNLED turns solid To disconnect hold the ADVSW for 2-3 seconds The ANCS Client then re-enters the advertising state  For displaying operating information and ANCS Notifications the demo application uses a shell exposed via a serial communication interface  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED    FRDM-KW36  SW2  LED3      ",
" Usage  The ANCS Client demo application is designed to work with a peer mobile device which exposes the ANCS service Also a serial terminal application is required for displaying ANCS Notifications information   Open a serial terminal application on the PC and connect it to the serial port corresponding to the board on which the ANCS Client runs See the details in Section 5 1 3 \"User Interface\" A start screen is displayed immediately after the board is reset All LEDs should be flashing  Press the ADVSW to start advertising This instruction is also displayed in the serial terminal as shown in the screenshot above  The peer device starts scanning for Bluetooth LE devices and connect to the ANCS Client device which is advertising  Once connected to a peer the application it looks for the ANCS Service and its characteristics If they are found the ANCS Client tries to register for receiving notifications  If any security related ATT errors are encountered than the application automatically performs Pairing and Bonding and retries the failed ATT operations Depending on the negotiated Pairing Method user interaction may be needed to complete the Pairing Follow the on-screen instructions provided by both the ANCS Client and the mobile device If a passkey is to be generated by the ANCS Client then the default 999999 passkey is used  After bidirectional communication is established via GATT the ANCS Client will start displaying ANCS Notifications information as shown below   ",
" Bluetooth LE FSCI Black Box  This section describes the functionality user interactions and testing methods for the Bluetooth LE FSCI Black Box demo application  ",
" Description  The Bluetooth LE FSCI Black Box demo application gives access to the Bluetooth LE Host Stack via a serial interface using the FSCI protocol See the FSCI (Framework Serial Communication Interface) manual for the format of the FSCI commands and a full list of supported commands  The demo can be used with the Test Tool for Connectivity Products Command Console application can be downloaded from the NXP website or with a custom application which supports the FSCI protocol and commands  ",
" Supported platforms  The Bluetooth LE FSCI Black Box application is supported on the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080XCDK  FRDM-KW36   ",
" Usage with Test Tool for Connectivity Products  The Bluetooth LE FSCI Black Box demo application is designed to be used via serial interface This can be done using the TEST Tool for Connectivity Products – Command Console application as described below   Download the demo application onto a supported board  Connect the board to a USB port of the PC The UASB COM port drivers must be installed properly and a COM port corresponding to the board should be available  Open the Test Tool application and connect to the serial port corresponding to the board on which the Bluetooth LE FSCI Black Box application runs The serial communication parameters are: baud rate 115200 8N1  Test tool command console serial port selection    Select the appropriate Test Tool XML file from the drop-down list for the release being used and send some commands to the application  FSCI black box command example     ",
" HCI Black Box  This section describes the functionality user interactions and testing methods for the Bluetooth LE HCI Black Box demo application  ",
" Description  The Bluetooth LE HCI Black Box demo application gives access to the Bluetooth LE Controller via a serial interface using the HCI protocol over serial interface See the Bluetooth Specification for the format of HCI commands and events over serial interface and the full list of supported commands and events  The demo can be used with the Test Tool for Connectivity Products Command Console application can be downloaded from the NXP website or with a custom application which supports the HCI protocol and commands and events over serial interface  Note that the HCI protocol encapsulation is dependent on the type of interface it is being used on See the Bluetooth Specification for the HCI message format on each type of supported interface  For instructions using the Bluetooth LE HCI Black Box with a serial terminal application or the hcitool in Linux check this article  ",
" Supported platforms  The HCI Black Box application is supported on the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080XCDK  FRDM-KW36   ",
" Usage with Test Tool for Connectivity Products  The Bluetooth LE HCI Black Box demo application is designed to be used via serial interface This can be achieved using the TEST Tool for Connectivity Products – Command Console application as described below   Download the demo application to a supported board  Connect the board to an USB port of the PC The UASB COM port drivers must be installed properly and a COM port corresponding to the board should be available  Open the Test Tool application and connect to the serial port corresponding to the board on which the Bluetooth LE HCI Black Box application runs The serial communication parameters are: baud rate 115200 8N1  Test tool command console serial port selection    Select the appropriate Test Tool HCI XML file from the drop-down list for the release you are using and send some commands to the application HCI black box command example   ",
" Direct Test Mode  HCI Black Box application can be used to test radio functionality at physical layer through Direct Test Mode (DTM) described in Bluetooth Specification Version 5 0 Vol 6 Part F The testing done so can cover physical layer characteristics such as:  Transmission power and receiver sensitivity  Frequency offset and drift  Modulation characteristics  Packet error rate  Intermodulation performance   DTM supports two interfaces for communication:  Over HCI (enabled by default in HCI Black Box)  Over 2-Wire UART interface  To use DTM over 2-Wire UART it must be enabled setting gEnableDTM_d on TRUE and connecting to the proper pins on the board The default baud rate speed is set to 115200 but it can be changed by configuring gDefaultDTMBaudrate(For 2-Wire UART) or gHcitInterfaceSpeed_d(For HCI); For DTM pin connection refer to Pinout chapter in Reference Manual  ",
" Pulse Oximeter Sensor  This section describes the implemented profiles and services user interactions and testing methods for the Pulse Oximeter Sensor application  ",
" Implemented profile and services  The Pulse Oximeter Sensor application implements a GATT server and the following profiles and services  • Pulse Oximeter Service v1 0  • Battery Service v1 0  • Device Information Service v1 1  The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When a peer device connects and configures notifications or indications the sensor starts sending blood oxygen saturation measurements at regular intervals  ",
" Supported platforms  The Pulse Oximeter Sensor application is supported on the following platforms:   FRDM-KW41Z  USB-KW41Z  QN9080XCDK  FRDM-KW36   ",
" User interface  After flashing the board the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing When a central node connects to the peripheral CONNLED turns solid To disconnect the node hold the ADVSW button for 2-3 seconds The node then re-enters GAP Discoverable Mode  The location and navigation measurement values are generated randomly on the device  See details below for hardware references   Hardware references        Platform  ADVSW  CONNLED    FRDM-KW41Z  SW4  LED3    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The application can be tested against the Profile Tuning Suite (PTS) black-box testing tool from the Bluetooth SIG  ",
" Location and Navigation Server  This section describes the implemented profiles and services user interactions and testing methods for the Location and Navigation Server application  ",
" Implemented profile and services  The Location and Navigation Server application implements a GATT server and the following profiles and services  • ​Location and Navigation Service v1 0  • Battery Service v1 0  • Device Information Service v1 1  The application behaves as a GAP peripheral node It enters GAP General Discoverable Mode and waits for a GAP central node to connect When a peer device connects and configures notifications or indications the server starts sending location and navigation measurements at regular intervals  ",
" Supported platforms  The Location and Navigation Server application is supported on the following platforms:   FRDM-KW36   ",
" User interface  After flashing the board with the server application the sensor is in idle mode (all LEDs flashing) To start advertising press the ADVSW button When in GAP Discoverable Mode CONNLED is flashing After flashing the board with the client application the device is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When scanning CONNLED is flashing When the client and server are connected CONNLED turns solid on both To disconnect the server hold the ADVSW button for 2-3 seconds The node then re-enters GAP discoverable Mode   Hardware references        Platform  ADVSW  CONNLED    FRDM-KW36  SW2  LED3      ",
" Usage  The two applications are tested together Open a serial terminal application on the PC and connect it to the serial port corresponding to the board on which the Client runs  Press ADVSW on the Server  Press SCANSW on the Client  Observe the notifications arriving periodically on the Client Notification arriving periodically     ",
" Location and Navigation Client  This section describes the implemented profiles services user interactions and testing methods for the Location and Navigation Client application  ",
" Implemented profile and services  The Location and Navigation Client application implements a GATT client for the following profiles and services   Location and Navigation Service v1 0  Battery Service v1 0  Device Information Service v1 1   The application behaves as a GAP central node It enters the GAP Limited Discovery procedure and searches for a Location and Navigation server to connect After connecting with the peripheral it configures notifications and monitors the data received through notifications  ",
" Supported platforms  The Location and Navigation Server application is supported on the following platforms:   QN9080XCDK  FRDM-KW36    ",
" User interface  After flashing the board the device is in idle mode (all LEDs flashing) To start scanning press the SCANSW button When in GAP Limited Discovery Procedure CONNLED is flashing When a central node connects to the peripheral CONNLED turns solid To disconnect the node hold the SCANSW button for 2-3 seconds The node then re-enters GAP Limited Discovery Procedure  See details below for hardware references  Hardware references        Platform  SCANSW  CONNLED    QN9080CDK  BUTTON1  D5-RED    FRDM-KW36  SW2  LED3      ",
" Usage  The setup requires two supported platforms one for the location and navigation server and other for the location and navigation client   Open a serial port terminal and connect it to the temperature collector board in the same manner as described in 5 1 3  To start scanning for a server press the SCANSW button  Once connected to a server the client will enable the location and speed characteristic notifications  Monitor the received reports on the client’s console   Location and Navigation Client Demo  ",
" Revision History  This table summarizes revisions to this document   Revision history        Revision number  Date  Substantive changes      0  06/2015  Initial release    1  10/2015  Added new applications    2  04/2016  Added Bluetooth LE Shell App Added KW41Z UI section Updated IPSP section Added interaction with Kinetis Bluetooth LE Toolbox Application Changed OTAP demo application: removed instructions for use with the OTAP Python script for PC added instructions for use with the Test Tool for Connectivity products Bluetooth LE OTAP tool and added instructions for use with the Kinetis Bluetooth LE Toolbox mobile application    3  07/2016  Added Bluetooth LE Relay Proxy application    4  09/2016  Updated for KW41Z    5  06/2017  Updated for QN9080CDK    6  10/2017  Updated for KW36    7  12/2017  Updated for QN9080x    8  03/2018    Added the KW36 platform to the supported platforms lists and the hardware references tables  Added clarifications regarding LED behaviour on demoa pplications which us ethe low power feature  Small corrections to multiple demo applications sections  Added sections in demo applications Section 5 23 “ Hybrid (Dual-Mode) Bluetooth Low Energy and Generic FSK Advertising Demo Application ” Section 5 24 “ ANCS Client ” Section 5 25 “ Bluetooth LE FSCI Black Box ” Section 5 26 “ HCI Black Box ” Section 5 27 “ Pulse Oximeter Sensor ” Section 5 28 “ Location and Navigation Server ”      9  06/2018  Updated for KW35    10  12/2018  Added Section 5 29 “ Location and Navigation Client and updated BLE to Bluetooth LE     11  06/2019  Updated for KW35   12  07/2019  Updated for K32W and QN90xx    13  10/2019  Updated for QN908x    14  11/2019  Updated for KW35 Maintenance Release 3      ",
" Backmatter Body Content            How To Reach Us     Home Page:    nxp com    Web Support:    nxp com/support     Information in this document is provided solely to enable system and software implementers to use NXP products There are no express or implied copyright licenses granted hereunder to design or fabricate any integrated circuits based on the information in this document NXP reserves the right to make changes without further notice to any products herein  NXP makes no warranty representation or guarantee regarding the suitability of its products for any particular purpose nor does NXP assume any liability arising out of the application or use of any product or circuit and specifically disclaims any and all liability including without limitation consequential or incidental damages “Typical” parameters that may be provided in NXP data sheets and/or specifications can and do vary in different applications and actual performance may vary over time All operating parameters including “typicals ” must be validated for each customer application by customer's technical experts NXP does not convey any license under its patent rights nor the rights of others NXP sells products pursuant to standard terms and conditions of sale which can be found at the following address: nxp com/SalesTermsandConditions   While NXP has implemented advanced security features all products may be subject to unidentified vulnerabilities Customers are responsible for the design and operation of their applications and products to reduce the effect of these vulnerabilities on customer’s applications and products and NXP accepts no liability for any vulnerability that is discovered Customers should implement appropriate design and operating safeguards to minimize the risks associated with their applications and products  NXP the NXP logo NXP SECURE CONNECTIONS FOR A SMARTER WORLD COOLFLUX EMBRACE GREENCHIP HITAG I2C BUS ICODE JCOP LIFE VIBES MIFARE MIFARE CLASSIC MIFARE DESFire MIFARE PLUS MIFARE FLEX MANTIS MIFARE ULTRALIGHT MIFARE4MOBILE MIGLO NTAG ROADLINK SMARTLX SMARTMX STARPLUG TOPFET TRENCHMOS UCODE Freescale the Freescale logo AltiVec C‑5 CodeTEST CodeWarrior ColdFire ColdFire+ C‑Ware the Energy Efficient Solutions logo Kinetis Layerscape MagniV mobileGT PEG PowerQUICC Processor Expert QorIQ QorIQ Qonverge Ready Play SafeAssure the SafeAssure logo StarCore Symphony VortiQa Vybrid Airfast BeeKit BeeStack CoreNet Flexis MXC Platform in a Package QUICC Engine SMARTMOS Tower TurboLink UMEMS EdgeScale EdgeLock eIQ and Immersive3D are trademarks of NXP B V All other product or service names are the property of their respective owners   AMBA Arm Arm7 Arm7TDMI Arm9 Arm11 Artisan big LITTLE Cordio CoreLink CoreSight Cortex DesignStart DynamIQ Jazelle Keil Mali Mbed Mbed Enabled NEON POP RealView SecurCore Socrates Thumb TrustZone ULINK ULINK2 ULINK-ME ULINK-PLUS ULINKpro µVision Versatile are trademarks or registered trademarks of Arm Limited (or its subsidiaries) in the US and/or elsewhere The related technology may be protected by any or all of patents copyrights designs and trade secrets All rights reserved Oracle and Java are registered trademarks of Oracle and/or its affiliates The Power Architecture and Power org word marks and the Power and Power org logos and related marks are trademarks and service marks licensed by Power org         "];

