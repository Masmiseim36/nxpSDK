#
# Copyright (c) 2019-2022 Cadence Design Systems, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
ROOTDIR   = ../..
ifeq ($(OS),Windows_NT)
	OSNAME := Windows
else
	OSNAME := $(shell uname)
endif
	

# Tools settings.
ifeq "$(CPU)" "gcc"
	CC       = g++
	AR       = ar
	OBJCOPY  = objcopy
	NOSTRIP  = 0
else
	CC       = xt-clang
	AR       = xt-ar $(XTCORE)
	OBJCOPY  = xt-objcopy $(XTCORE)
endif


ifeq "$(OSNAME)" "Linux"
	LIBDIR = $(ROOTDIR)/lib
	MKPATH = mkdir -p
	CP     = cp -f
	RM1    = $(RM)
	RM_R1  = rm -rf
else
	LIBDIR = $(ROOTDIR)/lib
	MKPATH = mkdir
	CP     = xcopy 
	CP_R   = cmd \/c xcopy 
	RM1    = cmd \/c del /f/q
	RM_R1  = cmd \/c rmdir /s/q
endif


ifeq ($(DEBUG),1)
  OPT_O2 = -O0 -g
  OPT_O3 = -O0 -g
else
  OPT_O2 = -O2
  OPT_O3 = -O3
endif


ifeq "$(CPU)" "gcc"
  CFLAGS  = -m32 -Wno-literal-suffix -Wno-write-strings -Wno-unused-result
  LDFLAGS = -m32
else
  CFLAGS  = -Wall -mlongcalls
  LDFLAGS = 
endif

ifeq ($(TESTBUFF),1)
  CFLAGS  += -DSCRATCH_TRASH_TEST -DOUTPUT_BUF_PING_PONG_TEST -DINPUT_BUF_PING_PONG_TEST -DPRINTDINFO
endif


# Include directory paths added.
CFLAGS += \
	-I$(ROOTDIR)/include \
	-I$(ROOTDIR)/include/lc3_codec \
	-I$(ROOTDIR)/test/include \
	-I$(ROOTDIR)/test/include/lc3_codec \
	$(EXTRA_CFLAGS)
	

ifneq ($(FERRET),1)
  LDFLAGS += $(EXTRA_LDFLAGS)
else
  LDFLAGS += -Wl,-u -Wl,malloc -lferret $(EXTRA_LDFLAGS)
endif


# Variable definitions
ifneq "$(CPU)" "gcc"
  LIB_NAME = xa_lc3_codec.a
  BIN_NAME_DECODER = xa_lc3_dec_test
  LIBDECS = $(ROOTDIR)/lib/$(BIN_NAME_DECODER)
  BIN_NAME_ENCODER = xa_lc3_enc_test
  LIBENCS = $(ROOTDIR)/lib/$(BIN_NAME_ENCODER)
else
  LIB_NAME = xgcc_lc3_codec.a
  BIN_NAME_DECODER = xgcc_lc3_dec_test
  LIBDECS = $(ROOTDIR)/lib/$(BIN_NAME_DECODER)
  BIN_NAME_ENCODER = xgcc_lc3_enc_test
  LIBENCS = $(ROOTDIR)/lib/$(BIN_NAME_ENCODER)
endif

OBJDIR_DECODER = objs_test_decoder
OBJDIR_ENCODER = objs_test_encoder

SRCDIR = \
	$(ROOTDIR)/test/src


vpath %.c  $(SRCDIR)


# List of objs to be generated.
OBJS_DECODER = \
	xa_lc3_decoder_sample_testbench.o \
	xa_lc3_error_handler.o





OBJS_ENCODER = \
	xa_lc3_encoder_sample_testbench.o \
	xa_lc3_error_handler.o
	

OBJSDEC  = $(addprefix $(OBJDIR_DECODER)/,$(OBJS_DECODER))
OBJSENC  = $(addprefix $(OBJDIR_ENCODER)/,$(OBJS_ENCODER))
LIBS  = $(addprefix $(LIBDIR)/,$(LIB_NAME))

# Rules
# Rule for creating testbench app binaries.

all: xa_lc3_codec_test

xa_lc3_codec_test: $(OBJDIR_DECODER) $(OBJDIR_ENCODER) $(BIN_NAME_DECODER) $(BIN_NAME_ENCODER)	

lc3_dec: LIB_NAME = xa_lc3_dec.a
lc3_dec: $(OBJDIR_DECODER) $(OBJSDEC)
	$(CC) -o xa_lc3_dec_test $(OBJSDEC) $(addprefix $(LIBDIR)/,$(LIB_NAME))

lc3_enc: LIB_NAME = xa_lc3_enc.a
lc3_enc: $(OBJDIR_ENCODER) $(OBJSENC)
	$(CC) -o xa_lc3_enc_test $(OBJSENC) $(addprefix $(LIBDIR)/,$(LIB_NAME))


# Create the objs directory if not present.
$(OBJDIR_DECODER):
	-$(MKPATH) $@

$(OBJDIR_ENCODER):
	-$(MKPATH) $@


# Rules for creating obj files.
$(OBJSDEC): $(OBJDIR_DECODER)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<


$(BIN_NAME_DECODER): $(OBJSDEC) $(LIBS)
	$(CC) -o $@ $^ $(LDFLAGS)


$(OBJSENC): $(OBJDIR_ENCODER)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<


$(BIN_NAME_ENCODER): $(OBJSENC) $(LIBS)
	$(CC) -o $@ $^ $(LDFLAGS)


encoder: xa_lc3_encode_test
xa_lc3_encode_test: $(OBJDIR_ENCODER) $(BIN_NAME_ENCODER) 

decoder: xa_lc3_decode_test
xa_lc3_decode_test: $(OBJDIR_DECODER) $(BIN_NAME_DECODER) 


clean_obj:
	-$(RM_R) $(OBJDIR_DECODER) $(OBJDIR_ENCODER)

clean:
	$(RM1) $(BIN_NAME_DECODER)
	-$(RM_R1) $(OBJDIR_DECODER)
	$(RM1) $(BIN_NAME_ENCODER)
	-$(RM_R1) $(OBJDIR_ENCODER)
	-$(RM_R1) $(OBJDIR_DECODER) $(OBJDIR_ENCODER)

run_enc :
	xt-run --turbo xa_lc3_enc_test

run_dec :
	xt-run --turbo xa_lc3_dec_test

run :
	xt-run --turbo xa_lc3_enc_test
	xt-run --turbo xa_lc3_dec_test
