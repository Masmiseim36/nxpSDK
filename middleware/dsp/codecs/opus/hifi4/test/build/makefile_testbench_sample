#
# Copyright (c) 2014-2023 Cadence Design Systems, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
.PHONY: all clean opus opus_codec opus_enc opus_dec opus_silk_codec opus_silk_enc opus_silk_dec opus_celt_codec opus_celt_enc opus_celt_dec 

ROOTDIR = ../..

# Tools settings.
ifeq "$(CPU)" "gcc"
	CC       = g++
	AR       = ar
	OBJCOPY  = objcopy
	RM_R     = rm -rf
	NOSTRIP  = 0
    ISS      =
else
	CC       = xt-clang
	AR       = xt-ar $(XTCORE)
	OBJCOPY  = xt-objcopy $(XTCORE)
	RM_R     = rm -rf
    ISS      = xt-run --turbo
endif

ifeq "$(OSNAME)" "Linux"
	LIBDIR = ../lib
	MKPATH = mkdir -p
	CP     = cp -f
else ifeq "$(OSNAME)" "Darwin"
	LIBDIR = ../lib
	MKPATH = mkdir -p
	CP     = cp -f
else
	LIBDIR = ..\lib
	MKPATH = mkdir
	CP     = xcopy 
endif

ifeq ($(DEBUG),1)
  OPT_O2 = -O0 -g
else
  OPT_O2 = -O2
endif

ifeq "$(CPU)" "gcc"
  CFLAGS  = -m32
  LDFLAGS = -m32
else
  CFLAGS  = -Wall -Werror -mlongcalls
  LDFLAGS = -lm
endif

# OGG Parser support
CFLAGS += -DENABLE_OGG_SUPPORT

# Include directory paths added.
CFLAGS  += $(EXTRA_CFLAGS)
CFLAGS  += -DHAVE_CONFIG_H -DDISABLE_FLOAT_API -DCONFIGURE_MEM_ALLOC
# CFLAGS  += -DSCRATCH_PING_PONG -DINPUT_PING_PONG -DIOUTPUT_PING_PONG

ifeq ($(MAKECMDGOALS),opus_enc)
  CFLAGS += -DOPUS_ENC
else ifeq ($(MAKECMDGOALS),opus_silk_enc)
  CFLAGS += -DOPUS_ENC
else ifeq ($(MAKECMDGOALS),opus_celt_enc)
  CFLAGS += -DOPUS_ENC
else ifeq ($(MAKECMDGOALS),opus_dec)
  CFLAGS += -DOPUS_DEC
else ifeq ($(MAKECMDGOALS),opus_silk_dec)
  CFLAGS += -DOPUS_DEC
else ifeq ($(MAKECMDGOALS),opus_celt_dec)
  CFLAGS += -DOPUS_DEC
else
  CFLAGS += -DOPUS_ENC -DOPUS_DEC
endif

CFLAGS += -I$(ROOTDIR)/include -I$(ROOTDIR)/include/opus_codec -I$(ROOTDIR)/test/include

# -----------------------------------------------------------
# CFLAGS += -DSCRATCH_ANALYSIS
# -----------------------------------------------------------

ifneq ($(MEASURE_STACK),1)
  LDFLAGS += $(EXTRA_LDFLAGS)
else
  LDFLAGS += -Wl,-u -Wl,malloc -lferret $(EXTRA_LDFLAGS)
endif

# Variable definitions
ifneq "$(CPU)" "gcc"
  DEC_BIN_NAME = xa_opus_dec_test
  ENC_BIN_NAME = xa_opus_enc_test
  SILK_DEC_BIN_NAME = xa_opus_silk_dec_test
  SILK_ENC_BIN_NAME = xa_opus_silk_enc_test
  CELT_DEC_BIN_NAME = xa_opus_celt_dec_test
  CELT_ENC_BIN_NAME = xa_opus_celt_enc_test
  ifeq ($(MAKECMDGOALS),opus_enc) 
    LIB_ENC_NAME = xa_opus_enc.a
    SILK_LIB_ENC_NAME = xa_opus_silk_enc.a
    CELT_LIB_ENC_NAME = xa_opus_celt_enc.a
  else ifeq ($(MAKECMDGOALS),opus_silk_enc) 
    LIB_ENC_NAME = xa_opus_enc.a
    SILK_LIB_ENC_NAME = xa_opus_silk_enc.a
    CELT_LIB_ENC_NAME = xa_opus_celt_enc.a
  else ifeq ($(MAKECMDGOALS),opus_celt_enc) 
    LIB_ENC_NAME = xa_opus_enc.a
    SILK_LIB_ENC_NAME = xa_opus_silk_enc.a
    CELT_LIB_ENC_NAME = xa_opus_celt_enc.a
  else ifeq ($(MAKECMDGOALS),opus_dec) 
    LIB_DEC_NAME = xa_opus_dec.a
    SILK_LIB_DEC_NAME = xa_opus_silk_dec.a
    CELT_LIB_DEC_NAME = xa_opus_celt_dec.a
  else ifeq ($(MAKECMDGOALS),opus_silk_dec) 
    LIB_DEC_NAME = xa_opus_dec.a
    SILK_LIB_DEC_NAME = xa_opus_silk_dec.a
    CELT_LIB_DEC_NAME = xa_opus_celt_dec.a
  else ifeq ($(MAKECMDGOALS),opus_celt_dec) 
    LIB_DEC_NAME = xa_opus_dec.a
    SILK_LIB_DEC_NAME = xa_opus_silk_dec.a
    CELT_LIB_DEC_NAME = xa_opus_celt_dec.a
  else
    LIB_DEC_NAME = xa_opus_codec.a
    LIB_ENC_NAME = xa_opus_codec.a
    SILK_LIB_DEC_NAME = xa_opus_silk_codec.a
    SILK_LIB_ENC_NAME = xa_opus_silk_codec.a
    CELT_LIB_DEC_NAME = xa_opus_celt_codec.a
    CELT_LIB_ENC_NAME = xa_opus_celt_codec.a
  endif  
else
  DEC_BIN_NAME = xgcc_opus_dec_test
  ENC_BIN_NAME = xgcc_opus_enc_test
  SILK_DEC_BIN_NAME = xgcc_opus_silk_dec_test
  SILK_ENC_BIN_NAME = xgcc_opus_silk_enc_test
  CELT_DEC_BIN_NAME = xgcc_opus_celt_dec_test
  CELT_ENC_BIN_NAME = xgcc_opus_celt_enc_test
  ifeq ($(MAKECMDGOALS),opus_enc) 
    LIB_ENC_NAME = xagcc__opus_enc.a
    SILK_LIB_ENC_NAME = xagcc__opus_silk_enc.a
    CELT_LIB_ENC_NAME = xagcc__opus_celt_enc.a
  else ifeq ($(MAKECMDGOALS),opus_silk_enc) 
    LIB_ENC_NAME = xagcc__opus_enc.a
    SILK_LIB_ENC_NAME = xagcc__opus_silk_enc.a
    CELT_LIB_ENC_NAME = xagcc__opus_celt_enc.a
  else ifeq ($(MAKECMDGOALS),opus_celt_enc) 
    LIB_ENC_NAME = xagcc__opus_enc.a
    SILK_LIB_ENC_NAME = xagcc__opus_silk_enc.a
    CELT_LIB_ENC_NAME = xagcc__opus_celt_enc.a
  else ifeq ($(MAKECMDGOALS),opus_dec) 
    LIB_DEC_NAME = xagcc__opus_dec.a
    SILK_LIB_DEC_NAME = xagcc__opus_silk_dec.a
    CELT_LIB_DEC_NAME = xagcc__opus_celt_dec.a
  else ifeq ($(MAKECMDGOALS),opus_silk_dec) 
    LIB_DEC_NAME = xagcc__opus_dec.a
    SILK_LIB_DEC_NAME = xagcc__opus_silk_dec.a
    CELT_LIB_DEC_NAME = xagcc__opus_celt_dec.a
  else ifeq ($(MAKECMDGOALS),opus_celt_dec) 
    LIB_DEC_NAME = xagcc__opus_dec.a
    SILK_LIB_DEC_NAME = xagcc__opus_silk_dec.a
    CELT_LIB_DEC_NAME = xagcc__opus_celt_dec.a
  else
    LIB_DEC_NAME = xagcc__opus_codec.a
    LIB_ENC_NAME = xagcc__opus_codec.a
    SILK_LIB_DEC_NAME = xagcc__opus_silk_codec.a
    SILK_LIB_ENC_NAME = xagcc__opus_silk_codec.a
    CELT_LIB_DEC_NAME = xagcc__opus_celt_codec.a
    CELT_LIB_ENC_NAME = xagcc__opus_celt_codec.a
  endif 
endif

SRCDIR = $(ROOTDIR)/test/src
OBJDIRDEC = objsDec
OBJDIRENC = objsEnc
SILK_OBJDIRDEC = objsDec_silk
SILK_OBJDIRENC = objsEnc_silk
CELT_OBJDIRDEC = objsDec_celt
CELT_OBJDIRENC = objsEnc_celt
LIBDIR = $(ROOTDIR)/lib

# List of objs to be generated.
ENCODER_O = xa_opus_encoder_sample_testbench.o xa_opus_codec_error_handler.o xa_common_error_handler.o
DECODER_O = xa_opus_decoder_sample_testbench.o xa_opus_codec_error_handler.o xa_common_error_handler.o xa_ogg_lib_error_handler.o opus_header.o 

ENCODER_OBJS = $(addprefix $(OBJDIRENC)/,$(ENCODER_O))
DECODER_OBJS = $(addprefix $(OBJDIRDEC)/,$(DECODER_O))
LIB_DEC	     = $(addprefix $(LIBDIR)/,$(LIB_DEC_NAME))
LIB_ENC	     = $(addprefix $(LIBDIR)/,$(LIB_ENC_NAME))
SILK_ENCODER_OBJS = $(addprefix $(SILK_OBJDIRENC)/,$(ENCODER_O))
SILK_DECODER_OBJS = $(addprefix $(SILK_OBJDIRDEC)/,$(DECODER_O))
SILK_LIB_DEC	     = $(addprefix $(LIBDIR)/,$(SILK_LIB_DEC_NAME))
SILK_LIB_ENC	     = $(addprefix $(LIBDIR)/,$(SILK_LIB_ENC_NAME))
CELT_ENCODER_OBJS = $(addprefix $(CELT_OBJDIRENC)/,$(ENCODER_O))
CELT_DECODER_OBJS = $(addprefix $(CELT_OBJDIRDEC)/,$(DECODER_O))
CELT_LIB_DEC	     = $(addprefix $(LIBDIR)/,$(CELT_LIB_DEC_NAME))
CELT_LIB_ENC	     = $(addprefix $(LIBDIR)/,$(CELT_LIB_ENC_NAME))

# Rules
opus:all
xa_opus_codec_test:all

# Rule for creating testbench app binaries.
all:	opus_codec opus_silk_codec opus_celt_codec
opus_codec: $(OBJDIRDEC) $(OBJDIRENC) $(ENC_BIN_NAME) $(DEC_BIN_NAME)
opus_dec:  $(OBJDIRDEC) $(DEC_BIN_NAME)
opus_enc:  $(OBJDIRENC) $(ENC_BIN_NAME)
opus_silk_codec: CFLAGS += -DSILK_ONLY
opus_silk_codec: $(SILK_OBJDIRDEC) $(SILK_OBJDIRENC) $(SILK_ENC_BIN_NAME) $(SILK_DEC_BIN_NAME)
opus_silk_dec:   CFLAGS += -DSILK_ONLY
opus_silk_dec:   $(SILK_OBJDIRDEC) $(SILK_DEC_BIN_NAME)
opus_silk_enc:   CFLAGS += -DSILK_ONLY
opus_silk_enc:   $(SILK_OBJDIRENC) $(SILK_ENC_BIN_NAME)
opus_celt_codec: CFLAGS += -DCELT_ONLY
opus_celt_codec: $(CELT_OBJDIRDEC) $(CELT_OBJDIRENC) $(CELT_ENC_BIN_NAME) $(CELT_DEC_BIN_NAME)
opus_celt_dec:   CFLAGS += -DCELT_ONLY
opus_celt_dec:   $(CELT_OBJDIRDEC) $(CELT_DEC_BIN_NAME)
opus_celt_enc:   CFLAGS += -DCELT_ONLY
opus_celt_enc:   $(CELT_OBJDIRENC) $(CELT_ENC_BIN_NAME)


# Create the objs directory if not present.
$(OBJDIRDEC):
	-$(MKPATH) $@

$(OBJDIRENC):
	-$(MKPATH) $@

$(SILK_OBJDIRDEC):
	-$(MKPATH) $@

$(SILK_OBJDIRENC):
	-$(MKPATH) $@

$(CELT_OBJDIRDEC):
	-$(MKPATH) $@

$(CELT_OBJDIRENC):
	-$(MKPATH) $@

# Rules for creating encoder/decoder obj files.
$(ENCODER_OBJS): $(OBJDIRENC)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<

$(DECODER_OBJS): $(OBJDIRDEC)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<

$(SILK_ENCODER_OBJS): $(SILK_OBJDIRENC)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<

$(SILK_DECODER_OBJS): $(SILK_OBJDIRDEC)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<

$(CELT_ENCODER_OBJS): $(CELT_OBJDIRENC)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<

$(CELT_DECODER_OBJS): $(CELT_OBJDIRDEC)/%.o: $(SRCDIR)/%.c
	$(CC) -c $(OPT_O2) $(CFLAGS) -o $@ $<

$(ENC_BIN_NAME): $(ENCODER_OBJS) $(LIB_ENC)
	$(CC) -o $(ENC_BIN_NAME) $(ENCODER_OBJS) $(LIB_ENC) $(LDFLAGS)

$(DEC_BIN_NAME): $(DECODER_OBJS) $(LIB_DEC)
	$(CC) -o $(DEC_BIN_NAME) $(DECODER_OBJS) $(LIB_DEC) $(LDFLAGS)

$(SILK_ENC_BIN_NAME): $(SILK_ENCODER_OBJS) $(SILK_LIB_ENC)
	$(CC) -o $(SILK_ENC_BIN_NAME) $(SILK_ENCODER_OBJS) $(SILK_LIB_ENC) $(LDFLAGS)

$(SILK_DEC_BIN_NAME): $(SILK_DECODER_OBJS) $(SILK_LIB_DEC)
	$(CC) -o $(SILK_DEC_BIN_NAME) $(SILK_DECODER_OBJS) $(SILK_LIB_DEC) $(LDFLAGS)

$(CELT_ENC_BIN_NAME): $(CELT_ENCODER_OBJS) $(CELT_LIB_ENC)
	$(CC) -o $(CELT_ENC_BIN_NAME) $(CELT_ENCODER_OBJS) $(CELT_LIB_ENC) $(LDFLAGS)

$(CELT_DEC_BIN_NAME): $(CELT_DECODER_OBJS) $(CELT_LIB_DEC)
	$(CC) -o $(CELT_DEC_BIN_NAME) $(CELT_DECODER_OBJS) $(CELT_LIB_DEC) $(LDFLAGS)

run:
	$(ISS) ./$(DEC_BIN_NAME)
	$(ISS) ./$(ENC_BIN_NAME)
	$(ISS) ./$(SILK_DEC_BIN_NAME)
	$(ISS) ./$(SILK_ENC_BIN_NAME)
	$(ISS) ./$(CELT_DEC_BIN_NAME)
	$(ISS) ./$(CELT_ENC_BIN_NAME)

run_opus:
	$(ISS) ./$(DEC_BIN_NAME)
	$(ISS) ./$(ENC_BIN_NAME)

run_opus_dec:
	$(ISS) ./$(DEC_BIN_NAME)

run_opus_enc:
	$(ISS) ./$(ENC_BIN_NAME)
    
run_opus_silk:
	$(ISS) ./$(SILK_DEC_BIN_NAME)
	$(ISS) ./$(SILK_ENC_BIN_NAME)

run_opus_silk_dec:
	$(ISS) ./$(SILK_DEC_BIN_NAME)

run_opus_silk_enc:
	$(ISS) ./$(SILK_ENC_BIN_NAME)

run_opus_celt:
	$(ISS) ./$(CELT_DEC_BIN_NAME)
	$(ISS) ./$(CELT_ENC_BIN_NAME)

run_opus_celt_dec:
	$(ISS) ./$(CELT_DEC_BIN_NAME)

run_opus_celt_enc:
	$(ISS) ./$(CELT_ENC_BIN_NAME)

clean:
	$(RM) $(ENC_BIN_NAME) $(DEC_BIN_NAME) $(SILK_ENC_BIN_NAME) $(SILK_DEC_BIN_NAME) $(CELT_ENC_BIN_NAME) $(CELT_DEC_BIN_NAME) 
	-$(RM_R) $(OBJDIRENC) $(OBJDIRDEC) $(SILK_OBJDIRENC) $(SILK_OBJDIRDEC) $(CELT_OBJDIRENC) $(CELT_OBJDIRDEC)
