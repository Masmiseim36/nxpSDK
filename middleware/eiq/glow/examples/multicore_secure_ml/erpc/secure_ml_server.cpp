/*
 * Generated by erpcgen 1.8.1 on Wed May 26 08:57:10 2021.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "secure_ml_server.h"
#include <new>
#include "erpc_port.h"
#include "erpc_manually_constructed.hpp"

#if 10801 != ERPC_VERSION_NUMBER && 0
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

static ManuallyConstructed<SecureMLService_service> s_SecureMLService_service;



// Call the correct server shim based on method unique ID.
erpc_status_t SecureMLService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport *transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case kSecureMLService_inference_id:
        {
            erpcStatus = inference_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for inference of SecureMLService interface.
erpc_status_t SecureMLService_service::inference_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t ifm;
    int32_t ofm;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(ifm);

    codec->read(ofm);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = inference(ifm, ofm);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, kSecureMLService_service_id, kSecureMLService_inference_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

erpc_service_t create_SecureMLService_service()
{
    s_SecureMLService_service.construct();
    return s_SecureMLService_service.get();
}

void destroy_SecureMLService_service()
{
    s_SecureMLService_service.destroy();
}
