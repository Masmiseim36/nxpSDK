Overview
========

This basic example shows how to use the library to create a
simple camera preview pipeline.
This example also shows how to stop and re-start the pipeline after 3 seconds.

Pipelines Description
=====================

The pipeline created by the application is:

+-------------+      +-------------+      +-------------+
|             |      |             |      |             |
|    camera   | -->  |  2D convert | -->  |    Display  |
|             |      |             |      |             |
+-------------+      +-------------+      +-------------+

Camera element is configured for a specific pixel format and resolution (board dependent)
Display element is configured for a specific pixel format and resolution (board dependent)
2D convert is configured to perform:
  - color space conversion from the camera pixel format to the display pixel format
  - rotation depending on the camera vs display orientation


Running the demo
================

EXPECTED OUTPUTS:
The expected outputs of the example are:
- The images captured by the camera should be displayed on the screen

Important notes
===============

This project embeds TensorFlow Lite Micro framework by default.
TensorFLow Lite Micro framework is an optional component of MPP.
It has some dependencies on the operations that must be built to support a specific TensorFlow Lite model.
This dependency must be resolved by the definition of a function called:

tflite::MicroOpResolver &MODEL_GetOpsResolver(tflite::ErrorReporter* errorReporter)

The example uses a dummy TFLite operations resolver by setting the flag TFLITE_CUSTOM_OPS_DUMMY_RESOLVER.
If this example is modified to use TensorFlow Inference Element, the flag TFLITE_CUSTOM_OPS_DUMMY_RESOLVER must be removed.
Then the user may either set the flag TFLITE_ALL_OPS_RESOLVER,
or implement its own function MODEL_GetOpsResolver for smaller memory footprint.
