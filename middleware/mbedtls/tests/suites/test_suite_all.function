/* BEGIN_HEADER */
#include "mbedtls/aes.h"
#include "mbedtls/des.h"
#include "mbedtls/sha1.h"
#include "mbedtls/sha256.h"
#include "mbedtls/sha512.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_AES_C
 * depends_on:MBEDTLS_DES_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void aes_encrypt_ecb( data_t * key_str, data_t * src_str,
                      data_t * hex_dst_string, int setkey_result )
{

    TEST_ASSERT( board_aes_encrypt_ecb( key_str, src_str, hex_dst_string, setkey_result) == 0 );

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void aes_decrypt_ecb( data_t * key_str, data_t * src_str,
                      data_t * hex_dst_string, int setkey_result )
{


    TEST_ASSERT( board_aes_decrypt_ecb( key_str, src_str, hex_dst_string, setkey_result) == 0 );

exit:
   asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void aes_encrypt_cbc( data_t * key_str, data_t * iv_str,
                      data_t * src_str, data_t * hex_dst_string,
                      int cbc_result )
{

    TEST_ASSERT( board_aes_encrypt_cbc( key_str, iv_str, src_str, hex_dst_string, cbc_result) == 0 );

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void aes_decrypt_cbc( data_t * key_str, data_t * iv_str,
                      data_t * src_str, data_t * hex_dst_string,
                      int cbc_result )
{

    TEST_ASSERT( board_aes_decrypt_cbc( key_str, iv_str, src_str, hex_dst_string, cbc_result) == 0 );

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_XTS */
void aes_encrypt_xts( char *hex_key_string, char *hex_data_unit_string,
                      char *hex_src_string, char *hex_dst_string )
{

    //TEST_ASSERT( board_aes_encrypt_xts( hex_key_string, hex_data_unit_string, hex_src_string, hex_dst_string) == 0 );


exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_XTS */
void aes_decrypt_xts( char *hex_key_string, char *hex_data_unit_string,
                      char *hex_dst_string, char *hex_src_string )
{
  
   // TEST_ASSERT( board_aes_decrypt_xts( hex_key_string, hex_data_unit_string, hex_dst_string, hex_src_string) == 0 );

exit:
   asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_XTS */
void aes_crypt_xts_size( int size, int retval )
{

	//TEST_ASSERT( board_aes_crypt_xts_size( size, retval) == 0 );
   
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_XTS */
void aes_crypt_xts_keysize( int size, int retval )
{

	//TEST_ASSERT( board_aes_crypt_xts_keysize( size, retval) == 0 );

exit:
   asm("nop");
}
/* END_CASE */


/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_encrypt_cfb128( data_t * key_str, data_t * iv_str,
                         data_t * src_str, data_t * hex_dst_string )
{

    TEST_ASSERT( board_aes_encrypt_cfb128( key_str, iv_str, src_str, hex_dst_string) == 0 );

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_decrypt_cfb128( data_t * key_str, data_t * iv_str,
                         data_t * src_str, data_t * hex_dst_string )
{
   
   TEST_ASSERT( board_aes_decrypt_cfb128( key_str, iv_str, src_str, hex_dst_string) == 0 );

exit:
   asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_encrypt_cfb8( data_t * key_str, data_t * iv_str,
                       data_t * src_str, data_t * hex_dst_string )
{
   TEST_ASSERT( board_aes_encrypt_cfb8( key_str, iv_str, src_str, hex_dst_string) == 0 );

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void aes_decrypt_cfb8( data_t * key_str, data_t * iv_str,
                       data_t * src_str, data_t * hex_dst_string )
{

   TEST_ASSERT( board_aes_decrypt_cfb8( key_str, iv_str, src_str, hex_dst_string) == 0 );

exit:
   asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_OFB */
void aes_encrypt_ofb( int fragment_size, char *hex_key_string,
                      char *hex_iv_string, char *hex_src_string,
                      char *hex_dst_string )
{

//	TEST_ASSERT( board_aes_encrypt_ofb( fragment_size, hex_key_string, hex_iv_string, hex_src_string, hex_dst_string) == 0 );

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SELF_TEST */
void aes_selftest(  )
{
    TEST_ASSERT( board_mbedtls_aes_self_test( 0 ) == 0 );
}
/* END_CASE */

/* BEGIN_CASE */
void des_check_weak( data_t * key, int ret )
{
	TEST_ASSERT(board_des_check_weak(key, ret) == EXIT_SUCCESS);
}
/* END_CASE */

/* BEGIN_CASE */
void des_encrypt_ecb( data_t * key_str, data_t * src_str,
                      data_t * hex_dst_string )
{

	TEST_ASSERT(board_des_encrypt_ecb(key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des_decrypt_ecb( data_t * key_str, data_t * src_str,
                      data_t * hex_dst_string )
{

	TEST_ASSERT(board_des_decrypt_ecb(key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des_encrypt_cbc( data_t * key_str, data_t * iv_str,
                      data_t * src_str, data_t * hex_dst_string,
                      int cbc_result )
{

	TEST_ASSERT(board_des_encrypt_cbc(key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des_decrypt_cbc( data_t * key_str, data_t * iv_str,
                      data_t * src_str, data_t * hex_dst_string,
                      int cbc_result )
{

	TEST_ASSERT(board_des_decrypt_cbc(key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des3_encrypt_ecb( int key_count, data_t * key_str,
                       data_t * src_str, data_t * hex_dst_string )
{

	TEST_ASSERT(board_des3_encrypt_ecb(key_count, key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des3_decrypt_ecb( int key_count, data_t * key_str,
                       data_t * src_str, data_t * hex_dst_string )
{

	TEST_ASSERT(board_des3_decrypt_ecb(key_count, key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des3_encrypt_cbc( int key_count, data_t * key_str,
                       data_t * iv_str, data_t * src_str,
                       data_t * hex_dst_string, int cbc_result )
{

	TEST_ASSERT(board_des3_encrypt_cbc(key_count, key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des3_decrypt_cbc( int key_count, data_t * key_str,
                       data_t * iv_str, data_t * src_str,
                       data_t * hex_dst_string, int cbc_result )
{

	TEST_ASSERT(board_des3_decrypt_cbc(key_count, key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des_key_parity_run(  )
{

	TEST_ASSERT(board_des_key_parity_run() == EXIT_SUCCESS);

}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SELF_TEST */
void des_selftest(  )
{
    TEST_ASSERT( board_mbedtls_des_self_test( 0 ) == 0 );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SHA1_C */
void mbedtls_sha1( data_t * src_str, data_t * hex_hash_string )
{

    TEST_ASSERT(board_mbedtls_sha1( src_str, hex_hash_string ) == EXIT_SUCCESS);
}
/* END_CASE */


/* BEGIN_CASE depends_on:MBEDTLS_SHA256_C */
void sha224( data_t * src_str, data_t * hex_hash_string )
{

 //   TEST_ASSERT(board_sha224( src_str, hex_hash_string ) == EXIT_SUCCESS);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SHA256_C */
void mbedtls_sha256( data_t * src_str, data_t * hex_hash_string )
{

    TEST_ASSERT(board_mbedtls_sha256( src_str, hex_hash_string ) == EXIT_SUCCESS);
}
/* END_CASE */


/* BEGIN_CASE depends_on:MBEDTLS_SHA512_C */
void sha384( data_t * src_str, data_t * hex_hash_string )
{

    TEST_ASSERT(board_sha384( src_str, hex_hash_string ) == EXIT_SUCCESS);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SHA512_C */
void mbedtls_sha512( data_t * src_str, data_t * hex_hash_string )
{

    TEST_ASSERT(board_mbedtls_sha512( src_str, hex_hash_string ) == EXIT_SUCCESS);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SHA1_C:MBEDTLS_SELF_TEST */
void sha1_selftest(  )
{
    TEST_ASSERT( board_sha1_selftest( 0 ) == 0 );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SHA256_C:MBEDTLS_SELF_TEST */
void sha256_selftest(  )
{
    TEST_ASSERT( board_sha256_selftest( 0 ) == 0 );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SHA512_C:MBEDTLS_SELF_TEST */
void sha512_selftest(  )
{
    TEST_ASSERT( board_sha512_selftest( 0 ) == 0 );
}
/* END_CASE */
