/* BEGIN_HEADER */
#include "mbedtls/des.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_DES_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void des_check_weak( data_t * key, int ret )
{
	TEST_ASSERT(board_des_check_weak(key, ret) == EXIT_SUCCESS);
}
/* END_CASE */

/* BEGIN_CASE */
void des_encrypt_ecb( data_t * key_str, data_t * src_str,
                      data_t * hex_dst_string )
{

	TEST_ASSERT(board_des_encrypt_ecb(key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des_decrypt_ecb( data_t * key_str, data_t * src_str,
                      data_t * hex_dst_string )
{

	TEST_ASSERT(board_des_decrypt_ecb(key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des_encrypt_cbc( data_t * key_str, data_t * iv_str,
                      data_t * src_str, data_t * hex_dst_string,
                      int cbc_result )
{

	TEST_ASSERT(board_des_encrypt_cbc(key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des_decrypt_cbc( data_t * key_str, data_t * iv_str,
                      data_t * src_str, data_t * hex_dst_string,
                      int cbc_result )
{

	TEST_ASSERT(board_des_decrypt_cbc(key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des3_encrypt_ecb( int key_count, data_t * key_str,
                       data_t * src_str, data_t * hex_dst_string )
{

	TEST_ASSERT(board_des3_encrypt_ecb(key_count, key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des3_decrypt_ecb( int key_count, data_t * key_str,
                       data_t * src_str, data_t * hex_dst_string )
{

	TEST_ASSERT(board_des3_decrypt_ecb(key_count, key_str, src_str, hex_dst_string) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des3_encrypt_cbc( int key_count, data_t * key_str,
                       data_t * iv_str, data_t * src_str,
                       data_t * hex_dst_string, int cbc_result )
{

	TEST_ASSERT(board_des3_encrypt_cbc(key_count, key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void des3_decrypt_cbc( int key_count, data_t * key_str,
                       data_t * iv_str, data_t * src_str,
                       data_t * hex_dst_string, int cbc_result )
{

	TEST_ASSERT(board_des3_decrypt_cbc(key_count, key_str, iv_str, src_str, hex_dst_string, cbc_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void des_key_parity_run(  )
{

	TEST_ASSERT(board_des_key_parity_run() == EXIT_SUCCESS);

}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SELF_TEST */
void des_selftest(  )
{
    TEST_ASSERT( board_mbedtls_des_self_test( 0 ) == 0 );
}
/* END_CASE */
