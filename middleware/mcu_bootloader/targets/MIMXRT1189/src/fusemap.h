/*
 * Copyright 2022 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

#ifndef __FUSEMAP_H__
#define __FUSEMAP_H__

#include "fsl_device_registers.h"

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
#define FSB_FUSE_BASE (0x57518000u)

#define FUSE_BANK_OFFSET(n) ((n)*0x20)
#define FUSE_WORD_OFFSET(n) ((n)*0x4)

#define FSB_TEST_CFG_OFFSET (FUSE_BANK_OFFSET(2) + FUSE_WORD_OFFSET(0))
#define FSB_TEST_CFG_REG_ADDR(n) (FSB_FUSE_BASE + FSB_TEST_CFG_OFFSET + ((n)*0x4))
#define FSB_TEST_CFG_REG_RD(n) (*(volatile uint32_t *)FSB_TEST_CFG_REG_ADDR(n))

#define FSB_HW_CFG_OFFSET (FUSE_BANK_OFFSET(2) + FUSE_WORD_OFFSET(2))
#define FSB_HW_CFG_REG_ADDR(n) (FSB_FUSE_BASE + FSB_HW_CFG_OFFSET + ((n)*0x4))
#define FSB_HW_CFG_REG_RD(n) (*(volatile uint32_t *)FSB_HW_CFG_REG_ADDR(n))

#define FSB_BOOT_CFG_OFFSET (FUSE_BANK_OFFSET(3) + FUSE_WORD_OFFSET(0))
#define FSB_BOOT_CFG_REG_ADDR(n) (FSB_FUSE_BASE + FSB_BOOT_CFG_OFFSET + ((n)*0x4))
#define FSB_BOOT_CFG_REG_RD(n) (*(volatile uint32_t *)FSB_BOOT_CFG_REG_ADDR(n))

#define FSB_UNIQ_ID_CFG_OFFSET (FUSE_BANK_OFFSET(6) + FUSE_WORD_OFFSET(0))
#define FSB_UNIQ_ID_CFG_REG_ADDR(n) (FSB_FUSE_BASE + FSB_UNIQ_ID_CFG_OFFSET + ((n)*0x4))
#define FSB_UNIQ_ID_CFG_REG_RD(n) (*(volatile uint32_t *)FSB_UNIQ_ID_CFG_REG_ADDR(n))

#define FSB_DEVICE_ID_CFG_OFFSET (FUSE_BANK_OFFSET(39) + FUSE_WORD_OFFSET(0))
#define FSB_DEVICE_ID_CFG_REG_ADDR(n) (FSB_FUSE_BASE + FSB_DEVICE_ID_CFG_OFFSET + ((n)*0x4))
#define FSB_DEVICE_ID_CFG_REG_RD(n) (*(volatile uint32_t *)FSB_DEVICE_ID_CFG_REG_ADDR(n))

#define FSB_OEM_SW_CFG_OFFSET (FUSE_BANK_OFFSET(40) + FUSE_WORD_OFFSET(7))
#define FSB_OEM_SW_CFG_REG_ADDR(n) (FSB_FUSE_BASE + FSB_OEM_SW_CFG_OFFSET + ((n)*0x4))
#define FSB_OEM_SW_CFG_REG_RD(n) (*(volatile uint32_t *)FSB_OEM_SW_CFG_REG_ADDR(n))

#define FSB_ROM_PATCH_OFFSET (FUSE_BANK_OFFSET(41) + FUSE_WORD_OFFSET(0))
#define FSB_ROM_PATCH_REG_ADDR(n) (FSB_FUSE_BASE + FSB_ROM_PATCH_OFFSET + ((n)*0x4))
#define FSB_ROM_PATCH_REG_RD(n) (*(volatile uint32_t *)FSB_ROM_PATCH_REG_ADDR(n))

#define MASK_WIDTH(n) (((1u << ((n)-1u)) << 1u) - 1u) // 0<n<=32

/* ======================== Hardware Configuration ========================= */
/* Disable OCRAM1 */
#define FUSE_OCRAM1_DISABLE_SHIFT ((uint8_t)12)
#define FUSE_OCRAM1_DISABLE_MASK ((uint32_t)(0x1u << FUSE_OCRAM1_DISABLE_SHIFT))
#define FUSE_OCRAM1_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x1) & FUSE_OCRAM1_DISABLE_MASK) >> FUSE_OCRAM1_DISABLE_SHIFT)

/* Disable OCRAM2 */
#define FUSE_OCRAM2_DISABLE_SHIFT ((uint8_t)13)
#define FUSE_OCRAM2_DISABLE_MASK ((uint32_t)(0x1u << FUSE_OCRAM2_DISABLE_SHIFT))
#define FUSE_OCRAM2_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x1) & FUSE_OCRAM2_DISABLE_MASK) >> FUSE_OCRAM2_DISABLE_SHIFT)

/* Disable USDHC2 */
#define FUSE_USDHC2_DISABLE_SHIFT ((uint8_t)17)
#define FUSE_USDHC2_DISABLE_MASK ((uint32_t)(0x1u << FUSE_USDHC2_DISABLE_SHIFT))
#define FUSE_USDHC2_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x1) & FUSE_USDHC2_DISABLE_MASK) >> FUSE_USDHC2_DISABLE_SHIFT)

/* Disable M7 */
#define FUSE_M7_DISABLE_SHIFT ((uint8_t)22)
#define FUSE_M7_DISABLE_MASK ((uint32_t)(0x1u << FUSE_M7_DISABLE_SHIFT))
#define FUSE_M7_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x1) & FUSE_M7_DISABLE_MASK) >> FUSE_M7_DISABLE_SHIFT)

/* Disable OTFAD1 */
#define FUSE_OTFAD1_DISABLE_SHIFT ((uint8_t)1)
#define FUSE_OTFAD1_DISABLE_MASK ((uint32_t)(0x1u << FUSE_OTFAD1_DISABLE_SHIFT))
#define FUSE_OTFAD1_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x2) & FUSE_OTFAD1_DISABLE_MASK) >> FUSE_OTFAD1_DISABLE_SHIFT)

/* Disable OTFAD2 */
#define FUSE_OTFAD2_DISABLE_SHIFT ((uint8_t)2)
#define FUSE_OTFAD2_DISABLE_MASK ((uint32_t)(0x1u << FUSE_OTFAD2_DISABLE_SHIFT))
#define FUSE_OTFAD2_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x2) & FUSE_OTFAD2_DISABLE_MASK) >> FUSE_OTFAD2_DISABLE_SHIFT)

/* Disable USB1 */
#define FUSE_USB1_DISABLE_SHIFT ((uint8_t)3)
#define FUSE_USB1_DISABLE_MASK ((uint32_t)(0x1u << FUSE_USB1_DISABLE_SHIFT))
#define FUSE_USB1_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x2) & FUSE_USB1_DISABLE_MASK) >> FUSE_USB1_DISABLE_SHIFT)

/* Disable USB2 */
#define FUSE_USB2_DISABLE_SHIFT ((uint8_t)4)
#define FUSE_USB2_DISABLE_MASK ((uint32_t)(0x1u << FUSE_USB2_DISABLE_SHIFT))
#define FUSE_USB2_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x2) & FUSE_USB2_DISABLE_MASK) >> FUSE_USB2_DISABLE_SHIFT)

/* Disable SEMC */
#define FUSE_SEMC_DISABLE_SHIFT ((uint8_t)13)
#define FUSE_SEMC_DISABLE_MASK ((uint32_t)(0x1u << FUSE_SEMC_DISABLE_SHIFT))
#define FUSE_SEMC_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x2) & FUSE_SEMC_DISABLE_MASK) >> FUSE_SEMC_DISABLE_SHIFT)

/* Disable USDHC1 */
#define FUSE_USDHC1_DISABLE_SHIFT ((uint8_t)19)
#define FUSE_USDHC1_DISABLE_MASK ((uint32_t)(0x1u << FUSE_USDHC1_DISABLE_SHIFT))
#define FUSE_USDHC1_DISABLE_VALUE ((FSB_HW_CFG_REG_RD(0x2) & FUSE_USDHC1_DISABLE_MASK) >> FUSE_USDHC1_DISABLE_SHIFT)

/* ======================== Unique ID Configuration ========================= */
/* Device unique ID word3 */
#define FUSE_UNIQ_ID3_SHIFT ((uint8_t)0)
#define FUSE_UNIQ_ID3_MASK ((uint32_t)(0xFFFFFFFFu << FUSE_UNIQ_ID3_SHIFT))
#define FUSE_UNIQ_ID3_VALUE ((FSB_UNIQ_ID_CFG_REG_RD(0x0) & FUSE_UNIQ_ID3_MASK) >> FUSE_UNIQ_ID3_SHIFT)

/* Device unique ID word2 */
#define FUSE_UNIQ_ID2_SHIFT ((uint8_t)0)
#define FUSE_UNIQ_ID2_MASK ((uint32_t)(0xFFFFFFFFu << FUSE_UNIQ_ID2_SHIFT))
#define FUSE_UNIQ_ID2_VALUE ((FSB_UNIQ_ID_CFG_REG_RD(0x1) & FUSE_UNIQ_ID2_MASK) >> FUSE_UNIQ_ID2_SHIFT)

/* Device unique ID word1 */
#define FUSE_UNIQ_ID1_SHIFT ((uint8_t)0)
#define FUSE_UNIQ_ID1_MASK ((uint32_t)(0xFFFFFFFFu << FUSE_UNIQ_ID1_SHIFT))
#define FUSE_UNIQ_ID1_VALUE ((FSB_UNIQ_ID_CFG_REG_RD(0x2) & FUSE_UNIQ_ID1_MASK) >> FUSE_UNIQ_ID1_SHIFT)

/* Device unique ID word0 */
#define FUSE_UNIQ_ID0_SHIFT ((uint8_t)0)
#define FUSE_UNIQ_ID0_MASK ((uint32_t)(0xFFFFFFFFu << FUSE_UNIQ_ID0_SHIFT))
#define FUSE_UNIQ_ID0_VALUE ((FSB_UNIQ_ID_CFG_REG_RD(0x3) & FUSE_UNIQ_ID0_MASK) >> FUSE_UNIQ_ID0_SHIFT)

/* ======================== Common Device ID Configuration ========================= */
/* USB VID */
#define FUSE_USB_VID_SHIFT ((uint8_t)0)
#define FUSE_USB_VID_MASK ((uint32_t)(0xFFFFu << FUSE_USB_VID_SHIFT))
#define FUSE_USB_VID_VALUE ((FSB_DEVICE_ID_CFG_REG_RD(0x0) & FUSE_USB_VID_MASK) >> FUSE_USB_VID_SHIFT)

/* USB1 PID */
#define FUSE_USB1_PID_SHIFT ((uint8_t)16)
#define FUSE_USB1_PID_MASK ((uint32_t)(0xFFFFu << FUSE_USB1_PID_SHIFT))
#define FUSE_USB1_PID_VALUE ((FSB_DEVICE_ID_CFG_REG_RD(0x0) & FUSE_USB1_PID_MASK) >> FUSE_USB1_PID_SHIFT)

/* ======================== OEM Software Configuration ========================= */
/* CM33 TCM configuration */
#define FUSE_CM33_TCM_CFG_SHIFT ((uint8_t)2)
#define FUSE_CM33_TCM_CFG_MASK ((uint32_t)(0x3u << FUSE_CM33_TCM_CFG_SHIFT))
#define FUSE_CM33_TCM_CFG_VALUE ((FSB_OEM_SW_CFG_REG_RD(0x0) & FUSE_CM33_TCM_CFG_MASK) >> FUSE_CM33_TCM_CFG_SHIFT)

enum
{
    kCM33_TCM_CFG_128CTCM_128STCM = 0,
    kCM33_TCM_CFG_256CTCM = 1,
    kCM33_TCM_CFG_256STCM = 2,
    kCM33_TCM_CFG_Reseved0_128CTCM_128STCM = 3,
};

/* CM7 TCM configuration */
#define FUSE_CM7_TCM_CFG_SHIFT ((uint8_t)4)
#define FUSE_CM7_TCM_CFG_MASK ((uint32_t)(0x7u << FUSE_CM7_TCM_CFG_SHIFT))
#define FUSE_CM7_TCM_CFG_VALUE ((FSB_OEM_SW_CFG_REG_RD(0x0) & FUSE_CM7_TCM_CFG_MASK) >> FUSE_CM7_TCM_CFG_SHIFT)

enum
{
    kCM7_TCM_CFG_256ITCM_256DTCM = 0,
    kCM7_TCM_CFG_512ITCM = 1,
    kCM7_TCM_CFG_512DTCM = 2,
    kCM7_TCM_CFG_Reserved0_256ITCM_256DTCM = 3,
    kCM7_TCM_CFG_128ITCM_384DTCM = 4,
    kCM7_TCM_CFG_384ITCM_128DTCM = 5,
    kCM7_TCM_CFG_Reserved1_256ITCM_256DTCM = 6,
    kCM7_TCM_CFG_Reserved2_256ITCM_256DTCM = 7,
};

/* ======================== Boot Mode ================================= */
/* Force to get boot mode from fuse */
#define FUSE_FORCE_BOOT_FROM_FUSE_SHIFT ((uint8_t)7)
#define FUSE_FORCE_BOOT_FROM_FUSE_MASK ((uint32_t)(0x1u << FUSE_FORCE_BOOT_FROM_FUSE_SHIFT))
#define FUSE_FORCE_BOOT_FROM_FUSE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_FORCE_BOOT_FROM_FUSE_MASK) >> FUSE_FORCE_BOOT_FROM_FUSE_SHIFT)

/* Force to get boot mode from fuse */
#define FUSE_BT_FUSE_SEL_SHIFT ((uint8_t)6)
#define FUSE_BT_FUSE_SEL_MASK ((uint32_t)(0x1u << FUSE_BT_FUSE_SEL_SHIFT))
#define FUSE_BT_FUSE_SEL_VALUE ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_BT_FUSE_SEL_MASK) >> FUSE_BT_FUSE_SEL_SHIFT)

/* Boot mode specified by fuse */
#define FUSE_BOOT_MODE_FUSE_SHIFT ((uint8_t)0)
#define FUSE_BOOT_MODE_FUSE_MASK ((uint32_t)(0x7u << FUSE_BOOT_MODE_FUSE_SHIFT))
#define FUSE_BOOT_MODE_FUSE_VALUE ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_BOOT_MODE_FUSE_MASK) >> FUSE_BOOT_MODE_FUSE_SHIFT)

enum
{
    kBootMode_Fuse_FlexSPINOR = 0,
    kBootMode_Fuse_FlexSPINAND = 1,
    kBootMode_Fuse_eMMC = 2,
    kBootMode_Fuse_SD = 3,
    kBootMode_Fuse_SEMCNAND = 4,
    kBootMode_Fuse_Serial = 5,
};

/* Boot mode specified by boot pin */
#define FUSE_BOOT_MODE_PIN_SHIFT ((uint8_t)24)
#define FUSE_BOOT_MODE_PIN_MASK ((uint32_t)(0x3Fu << FUSE_BOOT_MODE_PIN_SHIFT))
#define FUSE_BOOT_MODE_PIN_VALUE ((SRC_GENERAL_REG->SBMR2 & FUSE_BOOT_MODE_PIN_MASK) >> FUSE_BOOT_MODE_PIN_SHIFT)

enum
{
    /*
     *  boot_mode[5:4] = 2'b0,
     *  boot_mode[3] = 1'b1,
     *  boot_mode[2:0] = boot_mode_pin[2:0],
     */
    kBootMode_Pin_Fuse = 0x8,
    kBootMode_Pin_Serial = 0x9,
    kBootMode_Pin_eMMC = 0xA,
    kBootMode_Pin_SD = 0xB,
    kBootMode_Pin_FlexSPINOR = 0xC,
    kBootMode_Pin_FlexSPINAND = 0xD,
    kBootMode_Pin_InfiniteLoop = 0xE,
    kBootMode_Pin_Test = 0xF,
};

/* ======================== Boot ROM Configuration ================================= */
/* Boot frequency select. */
#define FUSE_BOOT_FREQ_SHIFT ((uint8_t)19)
#define FUSE_BOOT_FREQ_MASK ((uint32_t)(0x1u << FUSE_BOOT_FREQ_SHIFT))
#define FUSE_BOOT_FREQ_VALUE ((FSB_BOOT_CFG_REG_RD(0x7) & FUSE_BOOT_FREQ_MASK) >> FUSE_BOOT_FREQ_SHIFT)

enum
{
    kBootFreq_RC400M = 0,
    kBootFreq_PLL480M = 1,
};

/* ================================== MMC boot ================================== */
/* MMC instance selection */
#define FUSE_MMC_PORT_SEL_SHIFT ((uint8_t)0)
#define FUSE_MMC_PORT_SEL_MASK ((uint32_t)(0x1 << FUSE_MMC_PORT_SEL_SHIFT))
#define FUSE_MMC_PORT_SEL_VALUE ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_PORT_SEL_MASK) >> FUSE_MMC_PORT_SEL_SHIFT)

/* MMC speed selection */
#define FUSE_MMC_SPEED_SHIFT ((uint8_t)8)
#define FUSE_MMC_SPEED_MASK ((uint32_t)(0x1 << FUSE_MMC_SPEED_SHIFT))
#define FUSE_MMC_SPEED_VALUE ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_SPEED_MASK) >> FUSE_MMC_SPEED_SHIFT)

/* MMC bs width selection */
#define FUSE_MMC_BUS_WIDTH_SHIFT ((uint8_t)12)
#define FUSE_MMC_BUS_WIDTH_MASK ((uint32_t)(0x3 << FUSE_MMC_BUS_WIDTH_SHIFT))
#define FUSE_MMC_BUS_WIDTH_VALUE ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_BUS_WIDTH_MASK) >> FUSE_MMC_BUS_WIDTH_SHIFT)

/* MMC/eMMC fast boot enable */
#define FUSE_MMC_FAST_BOOT_SHIFT ((uint8_t)14)
#define FUSE_MMC_FAST_BOOT_MASK ((uint32_t)(0x1 << FUSE_MMC_FAST_BOOT_SHIFT))
#define FUSE_MMC_FAST_BOOT_VALUE ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_FAST_BOOT_MASK) >> FUSE_MMC_FAST_BOOT_SHIFT)

/* MMC/eMMC fast boot ACK enable */
#define FUSE_MMC_FAST_BOOT_ACK_SHIFT ((uint8_t)15)
#define FUSE_MMC_FAST_BOOT_ACK_MASK ((uint32_t)(0x1 << FUSE_MMC_FAST_BOOT_ACK_SHIFT))
#define FUSE_MMC_FAST_BOOT_ACK_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_FAST_BOOT_ACK_MASK) >> FUSE_MMC_FAST_BOOT_ACK_SHIFT)

/* eMMC fast boot pre-idle reset mode fuse */
#define FUSE_MMC_RESET_PREIDLE_STATE_SHIFT ((uint8_t)9)
#define FUSE_MMC_RESET_PREIDLE_STATE_MASK ((uint32_t)(0x1 << FUSE_MMC_RESET_PREIDLE_STATE_SHIFT))
#define FUSE_MMC_RESET_PREIDLE_STATE() \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_RESET_PREIDLE_STATE_MASK) >> FUSE_MMC_RESET_PREIDLE_STATE_SHIFT)

/* MMC1 voltage selection */
#define FUSE_MMC1_VOLTAGE_SELECTION_SHIFT ((uint8_t)10)
#define FUSE_MMC1_VOLTAGE_SELECTION_MASK ((uint32_t)(0x1 << FUSE_MMC1_VOLTAGE_SELECTION_SHIFT))
#define FUSE_MMC1_VOLTAGE_SELECTION_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC1_VOLTAGE_SELECTION_MASK) >> FUSE_MMC1_VOLTAGE_SELECTION_SHIFT)

/* MMC2 voltage selection */
#define FUSE_MMC2_VOLTAGE_SELECTION_SHIFT ((uint8_t)11)
#define FUSE_MMC2_VOLTAGE_SELECTION_MASK ((uint32_t)(0x1 << FUSE_MMC2_VOLTAGE_SELECTION_SHIFT))
#define FUSE_MMC2_VOLTAGE_SELECTION_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC2_VOLTAGE_SELECTION_MASK) >> FUSE_MMC2_VOLTAGE_SELECTION_SHIFT)

/* MMC1 reset polarity */
#define FUSE_MMC1_RST_ACTIVE_POLARITY_SHIFT ((uint8_t)2)
#define FUSE_MMC1_RST_ACTIVE_POLARITY_MASK ((uint32_t)(0x1 << FUSE_MMC1_RST_ACTIVE_POLARITY_SHIFT))
#define FUSE_MMC1_RST_ACTIVE_POLARITY_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC1_RST_ACTIVE_POLARITY_MASK) >> FUSE_MMC1_RST_ACTIVE_POLARITY_SHIFT)

/* MMC2 reset polarity */
#define FUSE_MMC2_RST_ACTIVE_POLARITY_SHIFT ((uint8_t)3)
#define FUSE_MMC2_RST_ACTIVE_POLARITY_MASK ((uint32_t)(0x1 << FUSE_MMC2_RST_ACTIVE_POLARITY_SHIFT))
#define FUSE_MMC2_RST_ACTIVE_POLARITY_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC2_RST_ACTIVE_POLARITY_MASK) >> FUSE_MMC2_RST_ACTIVE_POLARITY_SHIFT)

/* MMC power cycle enable */
#define FUSE_MMC_POWER_CYCLE_ENABLE_SHIFT ((uint8_t)6)
#define FUSE_MMC_POWER_CYCLE_ENABLE_MASK ((uint32_t)(0x1 << FUSE_MMC_POWER_CYCLE_ENABLE_SHIFT))
#define FUSE_MMC_POWER_CYCLE_ENABLE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_POWER_CYCLE_ENABLE_MASK) >> FUSE_MMC_POWER_CYCLE_ENABLE_SHIFT)

/* MMC power cycle selection */
#define FUSE_MMC_PWR_CYCLE_SEL_SHIFT ((uint8_t)4)
#define FUSE_MMC_PWR_CYCLE_SEL_MASK ((uint32_t)(0x3 << FUSE_MMC_PWR_CYCLE_SEL_SHIFT))
#define FUSE_MMC_PWR_CYCLE_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_PWR_CYCLE_SEL_MASK) >> FUSE_MMC_PWR_CYCLE_SEL_SHIFT)

/* MMC power stable cycle selection */
#define FUSE_MMC_PWR_STABLE_CYCLE_SEL_SHIFT ((uint8_t)7)
#define FUSE_MMC_PWR_STABLE_CYCLE_SEL_MASK ((uint32_t)(0x1 << FUSE_MMC_PWR_STABLE_CYCLE_SEL_SHIFT))
#define FUSE_MMC_PWR_STABLE_CYCLE_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_PWR_STABLE_CYCLE_SEL_MASK) >> FUSE_MMC_PWR_STABLE_CYCLE_SEL_SHIFT)

/* MMC IOMUX SION Disable */
#define FUSE_MMC_IOMUX_SION_DISABLE_SHIFT ((uint8_t)1)
#define FUSE_MMC_IOMUX_SION_DISABLE_MASK ((uint32_t)(0x1 << FUSE_MMC_IOMUX_SION_DISABLE_SHIFT))
#define FUSE_MMC_IOMUX_SION_DISABLE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x4) & FUSE_MMC_IOMUX_SION_DISABLE_MASK) >> FUSE_MMC_IOMUX_SION_DISABLE_SHIFT)

/* ========================== SD boot======================================= */
/* SD instance */
#define FUSE_SD_PORT_SEL_SHIFT ((uint8_t)0)
#define FUSE_SD_PORT_SEL_MASK ((uint32_t)(0x1 << FUSE_SD_PORT_SEL_SHIFT))
#define FUSE_SD_PORT_SEL_VALUE ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_PORT_SEL_MASK) >> FUSE_SD_PORT_SEL_SHIFT)

/* SD speed */
#define FUSE_SD_SPEED_SHIFT ((uint8_t)8)
#define FUSE_SD_SPEED_MASK ((uint32_t)(0x3 << FUSE_SD_SPEED_SHIFT))
#define FUSE_SD_SPEED_VALUE ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_SPEED_MASK) >> FUSE_SD_SPEED_SHIFT)

/* SD bus width */
#define FUSE_SD_BUS_WIDTH_SHIFT ((uint8_t)10)
#define FUSE_SD_BUS_WIDTH_MASK ((uint32_t)(0x1 << FUSE_SD_BUS_WIDTH_SHIFT))
#define FUSE_SD_BUS_WIDTH_VALUE ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_BUS_WIDTH_MASK) >> FUSE_SD_BUS_WIDTH_SHIFT)

/* DLL override enable for SD */
#define FUSE_SD_DLL_OVERRIDE_ENABLE_SHIFT ((uint8_t)31)
#define FUSE_SD_DLL_OVERRIDE_ENABLE_MASK ((uint32_t)(0x1 << FUSE_SD_DLL_OVERRIDE_ENABLE_SHIFT))
#define FUSE_SD_DLL_OVERRIDE_ENABLE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_DLL_OVERRIDE_ENABLE_MASK) >> FUSE_SD_DLL_OVERRIDE_ENABLE_SHIFT)

/* DLL delay */
#define FUSE_SD_DLL_DLY_SHIFT ((uint8_t)24)
#define FUSE_SD_DLL_DLY_MASK ((uint32_t)(0x7Fu << FUSE_SD_DLL_DLY_SHIFT))
#define FUSE_SD_DLL_DLY_VALUE ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_DLL_DLY_MASK) >> FUSE_SD_DLL_DLY_SHIFT)

/* SD_Calibration Step  */
#define FUSE_SD_CAL_STEP_SHIFT ((uint8_t)22)
#define FUSE_SD_CAL_STEP_MASK ((uint32_t)(0x3 << FUSE_SD_CAL_STEP_SHIFT))
#define FUSE_SD_CAL_STEP_VALUE ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_CAL_STEP_MASK) >> FUSE_SD_CAL_STEP_SHIFT)

/* SD1 reset polarity */
#define FUSE_SD1_RST_ACTIVE_POLARITY_SHIFT ((uint8_t)2)
#define FUSE_SD1_RST_ACTIVE_POLARITY_MASK ((uint32_t)(0x1 << FUSE_SD1_RST_ACTIVE_POLARITY_SHIFT))
#define FUSE_SD1_RST_ACTIVE_POLARITY_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD1_RST_ACTIVE_POLARITY_MASK) >> FUSE_SD1_RST_ACTIVE_POLARITY_SHIFT)

/* SD2 reset polarity */
#define FUSE_SD2_RST_ACTIVE_POLARITY_SHIFT ((uint8_t)3)
#define FUSE_SD2_RST_ACTIVE_POLARITY_MASK ((uint32_t)(0x1 << FUSE_SD2_RST_ACTIVE_POLARITY_SHIFT))
#define FUSE_SD2_RST_ACTIVE_POLARITY_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD2_RST_ACTIVE_POLARITY_MASK) >> FUSE_SD2_RST_ACTIVE_POLARITY_SHIFT)

/* SD power cycle enable */
#define FUSE_SD_POWER_CYCLE_ENABLE_SHIFT ((uint8_t)6)
#define FUSE_SD_POWER_CYCLE_ENABLE_MASK ((uint32_t)(0x1 << FUSE_SD_POWER_CYCLE_ENABLE_SHIFT))
#define FUSE_SD_POWER_CYCLE_ENABLE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_POWER_CYCLE_ENABLE_MASK) >> FUSE_SD_POWER_CYCLE_ENABLE_SHIFT)

/* SD power cycle selection */
#define FUSE_SD_PWR_CYCLE_SEL_SHIFT ((uint8_t)4)
#define FUSE_SD_PWR_CYCLE_SEL_MASK ((uint32_t)(0x3 << FUSE_SD_PWR_CYCLE_SEL_SHIFT))
#define FUSE_SD_PWR_CYCLE_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_PWR_CYCLE_SEL_MASK) >> FUSE_SD_PWR_CYCLE_SEL_SHIFT)

/* SD power stable cycle selection */
#define FUSE_SD_PWR_STABLE_CYCLE_SEL_SHIFT ((uint8_t)7)
#define FUSE_SD_PWR_STABLE_CYCLE_SEL_MASK ((uint32_t)(0x1 << FUSE_SD_PWR_STABLE_CYCLE_SEL_SHIFT))
#define FUSE_SD_PWR_STABLE_CYCLE_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_PWR_STABLE_CYCLE_SEL_MASK) >> FUSE_SD_PWR_STABLE_CYCLE_SEL_SHIFT)

/* SD IOMUX SION Disable */
#define FUSE_SD_IOMUX_SION_DISABLE_SHIFT ((uint8_t)1)
#define FUSE_SD_IOMUX_SION_DISABLE_MASK ((uint32_t)(0x1 << FUSE_SD_IOMUX_SION_DISABLE_SHIFT))
#define FUSE_SD_IOMUX_SION_DISABLE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x6) & FUSE_SD_IOMUX_SION_DISABLE_MASK) >> FUSE_SD_IOMUX_SION_DISABLE_SHIFT)

/* ========================== Recovery boot ======================================= */
/* SPI instance selection */
#define FUSE_SPI_PORT_SEL_SHIFT ((uint8_t)16)
#define FUSE_SPI_PORT_SEL_MASK ((uint32_t)(0x3 << FUSE_SPI_PORT_SEL_SHIFT))
#define FUSE_SPI_PORT_SEL_VALUE ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_SPI_PORT_SEL_MASK) >> FUSE_SPI_PORT_SEL_SHIFT)

/* SPI speed selection */
#define FUSE_SPI_SPEED_SHIFT ((uint8_t)18)
#define FUSE_SPI_SPEED_MASK ((uint32_t)(0x3 << FUSE_SPI_SPEED_SHIFT))
#define FUSE_SPI_SPEED_VALUE ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_SPI_SPEED_MASK) >> FUSE_SPI_SPEED_SHIFT)

/* SPI dummy selection - for extended SPI (dual/quad) only */
#define FUSE_SPI_DUMMY_BYTES_SHIFT ((uint8_t)20)
#define FUSE_SPI_DUMMY_BYTES_MASK ((uint32_t)(0x7 << FUSE_SPI_DUMMY_BYTES_SHIFT))
#define FUSE_SPI_DUMMY_BYTES_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_SPI_DUMMY_BYTES_MASK) >> FUSE_SPI_DUMMY_BYTES_SHIFT)

/* SPI dummy selection - for extended SPI (dual/quad) only */
#define FUSE_SPI_INTERN_PULL_SHIFT (23U)
#define FUSE_SPI_INTERN_PULL_MASK (MASK_WIDTH(1u) << FUSE_SPI_INTERN_PULL_SHIFT)
#define FUSE_SPI_INTERN_PULL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x0) & FUSE_SPI_INTERN_PULL_MASK) >> FUSE_SPI_INTERN_PULL_SHIFT)

/* ======================== FlexSPI NOR Boot ================================= */
/* XSPI NOR auto probe type */
#define FUSE_XSPI_NOR_PROBE_TYPE_SHIFT (0u)
#define FUSE_XSPI_NOR_PROBE_TYPE_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NOR_PROBE_TYPE_SHIFT)
#define FUSE_XSPI_NOR_PROBE_TYPE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_PROBE_TYPE_MASK) >> FUSE_XSPI_NOR_PROBE_TYPE_SHIFT)

/* XSPI NOR hold time */
#define FUSE_XSPI_NOR_HOLD_TIME_SHIFT (2u)
#define FUSE_XSPI_NOR_HOLD_TIME_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NOR_HOLD_TIME_SHIFT)
#define FUSE_XSPI_NOR_HOLD_TIME_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_HOLD_TIME_MASK) >> FUSE_XSPI_NOR_HOLD_TIME_SHIFT)

/* XSPI NOR frequency (speed) */
#define FUSE_XSPI_NOR_FREQ_SHIFT (4u)
#define FUSE_XSPI_NOR_FREQ_MASK (MASK_WIDTH(3u) << FUSE_XSPI_NOR_FREQ_SHIFT)
#define FUSE_XSPI_NOR_FREQ_VALUE ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_FREQ_MASK) >> FUSE_XSPI_NOR_FREQ_SHIFT)

/* XSPI NOR connection sel */
#define FUSE_XSPI_NOR_CONN_SEL_SHIFT (7u)
#define FUSE_XSPI_NOR_CONN_SEL_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NOR_CONN_SEL_SHIFT)
#define FUSE_XSPI_NOR_CONN_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_CONN_SEL_MASK) >> FUSE_XSPI_NOR_CONN_SEL_SHIFT)

/* XSPI NOR type */
#define FUSE_XSPI_NOR_TYPE_SHIFT (8u)
#define FUSE_XSPI_NOR_TYPE_MASK (MASK_WIDTH(3u) << FUSE_XSPI_NOR_TYPE_SHIFT)
#define FUSE_XSPI_NOR_TYPE_VALUE ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_TYPE_MASK) >> FUSE_XSPI_NOR_TYPE_SHIFT)

/* XSPI NOR reset required after boot failure */
#define FUSE_XSPI_NOR_RST_RQD_SHIFT (11u)
#define FUSE_XSPI_NOR_RST_RQD_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NOR_RST_RQD_SHIFT)
#define FUSE_XSPI_NOR_RST_RQD_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_RST_RQD_MASK) >> FUSE_XSPI_NOR_RST_RQD_SHIFT)

/* XSPI NOR reset type */
#define FUSE_XSPI_NOR_RESET_TYPE_SHIFT (12u)
#define FUSE_XSPI_NOR_RESET_TYPE_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NOR_RESET_TYPE_SHIFT)
#define FUSE_XSPI_NOR_RESET_TYPE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_RESET_TYPE_MASK) >> FUSE_XSPI_NOR_RESET_TYPE_SHIFT)

/* XSPI NOR encrypt xip enablement */
#define FUSE_XSPI_NOR_ENC_XIP_EN_SHIFT (16u)
#define FUSE_XSPI_NOR_ENC_XIP_EN_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NOR_ENC_XIP_EN_SHIFT)
#define FUSE_XSPI_NOR_ENC_XIP_EN_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_ENC_XIP_EN_MASK) >> FUSE_XSPI_NOR_ENC_XIP_EN_SHIFT)

/* XSPI NOR encrypt xip engine sel */
#define FUSE_XSPI_NOR_ENC_XIP_ENG_SHIFT (17u)
#define FUSE_XSPI_NOR_ENC_XIP_ENG_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NOR_ENC_XIP_ENG_SHIFT)
#define FUSE_XSPI_NOR_ENC_XIP_ENG_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_ENC_XIP_ENG_MASK) >> FUSE_XSPI_NOR_ENC_XIP_ENG_SHIFT)

/* XSPI NOR disable flash config block */
#define FUSE_XSPI_NOR_DIS_FCB_SHIFT (20u)
#define FUSE_XSPI_NOR_DIS_FCB_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NOR_DIS_FCB_SHIFT)
#define FUSE_XSPI_NOR_DIS_FCB_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_DIS_FCB_MASK) >> FUSE_XSPI_NOR_DIS_FCB_SHIFT)

/* XSPI NOR force dual read */
#define FUSE_XSPI_NOR_FORCE_DUAL_READ_SHIFT (21u)
#define FUSE_XSPI_NOR_FORCE_DUAL_READ_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NOR_FORCE_DUAL_READ_SHIFT)
#define FUSE_XSPI_NOR_FORCE_DUAL_READ_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_FORCE_DUAL_READ_MASK) >> FUSE_XSPI_NOR_FORCE_DUAL_READ_SHIFT)

/* XSPI NOR fail-safe read command */
#define FUSE_XSPI_NOR_FAILSAFE_READ_SHIFT (22u)
#define FUSE_XSPI_NOR_FAILSAFE_READ_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NOR_FAILSAFE_READ_SHIFT)
#define FUSE_XSPI_NOR_FAILSAFE_READ_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_FAILSAFE_READ_MASK) >> FUSE_XSPI_NOR_FAILSAFE_READ_SHIFT)

/* XSPI NOR dummy cycle */
#define FUSE_XSPI_NOR_DUMMY_CYCLE_SHIFT (24u)
#define FUSE_XSPI_NOR_DUMMY_CYCLE_MASK (MASK_WIDTH(5u) << FUSE_XSPI_NOR_DUMMY_CYCLE_SHIFT)
#define FUSE_XSPI_NOR_DUMMY_CYCLE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(1u) & FUSE_XSPI_NOR_DUMMY_CYCLE_MASK) >> FUSE_XSPI_NOR_DUMMY_CYCLE_SHIFT)

/* ======================== Secondary (dual) image settings ================================= */
/* Physical 2nd image offset */
#define FUSE_2ND_IMG_OFFSET_SHIFT (0u)
#define FUSE_2ND_IMG_OFFSET_MASK (MASK_WIDTH(6u) << FUSE_2ND_IMG_OFFSET_SHIFT)
#define FUSE_2ND_IMG_OFFSET_VALUE ((FSB_BOOT_CFG_REG_RD(7u) & FUSE_2ND_IMG_OFFSET_MASK) >> FUSE_2ND_IMG_OFFSET_SHIFT)

/* Physical 2nd image size/offset unit */
#define FUSE_2ND_IMG_SIZE_UNIT_SHIFT (6u)
#define FUSE_2ND_IMG_SIZE_UNIT_MASK (MASK_WIDTH(2u) << FUSE_2ND_IMG_SIZE_UNIT_SHIFT)
#define FUSE_2ND_IMG_SIZE_UNIT_VALUE \
    ((FSB_BOOT_CFG_REG_RD(7u) & FUSE_2ND_IMG_SIZE_UNIT_MASK) >> FUSE_2ND_IMG_SIZE_UNIT_SHIFT)

/* ======================== FlexSPI Common ================================= */
/* XSPI flash pad setting to override */
#define FUSE_XSPI_PAD_SETTING_OVERRIDE_SHIFT (0u)
#define FUSE_XSPI_PAD_SETTING_OVERRIDE_MASK (MASK_WIDTH(3u) << FUSE_XSPI_PAD_SETTING_OVERRIDE_SHIFT)
#define FUSE_XSPI_PAD_SETTING_OVERRIDE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_PAD_SETTING_OVERRIDE_MASK) >> FUSE_XSPI_PAD_SETTING_OVERRIDE_SHIFT)

/* XSPI flash pad setting override enablement */
#define FUSE_XSPI_PAD_SETTING_OVERRIDE_EN_SHIFT (3u)
#define FUSE_XSPI_PAD_SETTING_OVERRIDE_EN_MASK (MASK_WIDTH(1u) << FUSE_XSPI_PAD_SETTING_OVERRIDE_EN_SHIFT)
#define FUSE_XSPI_PAD_SETTING_OVERRIDE_EN_VALUE \
    ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_PAD_SETTING_OVERRIDE_EN_MASK) >> FUSE_XSPI_PAD_SETTING_OVERRIDE_EN_SHIFT)

/* XSPI flash reset pin sel */
#define FUSE_XSPI_RESET_PIN_SEL_SHIFT (4u)
#define FUSE_XSPI_RESET_PIN_SEL_MASK (MASK_WIDTH(1u) << FUSE_XSPI_RESET_PIN_SEL_SHIFT)
#define FUSE_XSPI_RESET_PIN_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_RESET_PIN_SEL_MASK) >> FUSE_XSPI_RESET_PIN_SEL_SHIFT)

/* XSPI flash DQS pin sel */
#define FUSE_XSPI_LOOPBACK_DQS_PIN_SEL_SHIFT (5u)
#define FUSE_XSPI_LOOPBACK_DQS_PIN_SEL_MASK (MASK_WIDTH(1u) << FUSE_XSPI_LOOPBACK_DQS_PIN_SEL_SHIFT)
#define FUSE_XSPI_LOOPBACK_DQS_PIN_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_LOOPBACK_DQS_PIN_SEL_MASK) >> FUSE_XSPI_LOOPBACK_DQS_PIN_SEL_SHIFT)

/* XSPI flash pin group sel */
#define FUSE_XSPI_PIN_GROUP_SHIFT (6u)
#define FUSE_XSPI_PIN_GROUP_MASK (MASK_WIDTH(1u) << FUSE_XSPI_PIN_GROUP_SHIFT)
#define FUSE_XSPI_PIN_GROUP_VALUE ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_PIN_GROUP_MASK) >> FUSE_XSPI_PIN_GROUP_SHIFT)

/* XSPI instance sel */
#define FUSE_XSPI_INSTANCE_SHIFT (7u)
#define FUSE_XSPI_INSTANCE_MASK (MASK_WIDTH(1u) << FUSE_XSPI_INSTANCE_SHIFT)
#define FUSE_XSPI_INSTANCE_VALUE ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_INSTANCE_MASK) >> FUSE_XSPI_INSTANCE_SHIFT)

/* XSPI delay cell num */
#define FUSE_XSPI_DELAY_CELL_NUM_SHIFT (8u)
#define FUSE_XSPI_DELAY_CELL_NUM_MASK (MASK_WIDTH(5u) << FUSE_XSPI_DELAY_CELL_NUM_SHIFT)
#define FUSE_XSPI_DELAY_CELL_NUM_VALUE \
    ((FSB_BOOT_CFG_REG_RD(2u) & FUSE_XSPI_DELAY_CELL_NUM_MASK) >> FUSE_XSPI_DELAY_CELL_NUM_SHIFT)

/* ======================== FlexSPI NAND Boot ================================= */
/* XSPI NAND search count */
#define FUSE_XSPI_NAND_SEARCH_CNT_SHIFT (0u)
#define FUSE_XSPI_NAND_SEARCH_CNT_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_SEARCH_CNT_SHIFT)
#define FUSE_XSPI_NAND_SEARCH_CNT_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_SEARCH_CNT_MASK) >> FUSE_XSPI_NAND_SEARCH_CNT_SHIFT)

/* XSPI NAND column addr width */
#define FUSE_XSPI_NAND_COL_ADDR_WIDTH_SHIFT (1u)
#define FUSE_XSPI_NAND_COL_ADDR_WIDTH_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_COL_ADDR_WIDTH_SHIFT)
#define FUSE_XSPI_NAND_COL_ADDR_WIDTH_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_COL_ADDR_WIDTH_MASK) >> FUSE_XSPI_NAND_COL_ADDR_WIDTH_SHIFT)

/* XSPI NAND CS interval */
#define FUSE_XSPI_NAND_CS_INTERVAL_SHIFT (2u)
#define FUSE_XSPI_NAND_CS_INTERVAL_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NAND_CS_INTERVAL_SHIFT)
#define FUSE_XSPI_NAND_CS_INTERVAL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_CS_INTERVAL_MASK) >> FUSE_XSPI_NAND_CS_INTERVAL_SHIFT)

/* XSPI NAND search stride */
#define FUSE_XSPI_NAND_SEARCH_STRIDE_SHIFT (4u)
#define FUSE_XSPI_NAND_SEARCH_STRIDE_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NAND_SEARCH_STRIDE_SHIFT)
#define FUSE_XSPI_NAND_SEARCH_STRIDE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_SEARCH_STRIDE_MASK) >> FUSE_XSPI_NAND_SEARCH_STRIDE_SHIFT)

/* XSPI NAND hold time */
#define FUSE_XSPI_NAND_HOLD_TIME_SHIFT (6u)
#define FUSE_XSPI_NAND_HOLD_TIME_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NAND_HOLD_TIME_SHIFT)
#define FUSE_XSPI_NAND_HOLD_TIME_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_HOLD_TIME_MASK) >> FUSE_XSPI_NAND_HOLD_TIME_SHIFT)

/* XSPI NAND whether has dual planes */
#define FUSE_XSPI_NAND_HAS_DUAL_PLANES_SHIFT (8u)
#define FUSE_XSPI_NAND_HAS_DUAL_PLANES_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_HAS_DUAL_PLANES_SHIFT)
#define FUSE_XSPI_NAND_HAS_DUAL_PLANES_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_HAS_DUAL_PLANES_MASK) >> FUSE_XSPI_NAND_HAS_DUAL_PLANES_SHIFT)

/* XSPI NAND whether is Lybra flash */
#define FUSE_XSPI_NAND_IS_LYBRAFLASH_SHIFT (9u)
#define FUSE_XSPI_NAND_IS_LYBRAFLASH_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_IS_LYBRAFLASH_SHIFT)
#define FUSE_XSPI_NAND_IS_LYBRAFLASH_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_IS_LYBRAFLASH_MASK) >> FUSE_XSPI_NAND_IS_LYBRAFLASH_SHIFT)

/* XSPI NAND reset type */
#define FUSE_XSPI_NAND_RESET_TYPE_SHIFT (10u)
#define FUSE_XSPI_NAND_RESET_TYPE_MASK (MASK_WIDTH(2u) << FUSE_XSPI_NAND_RESET_TYPE_SHIFT)
#define FUSE_XSPI_NAND_RESET_TYPE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_RESET_TYPE_MASK) >> FUSE_XSPI_NAND_RESET_TYPE_SHIFT)

/* XSPI NAND connection sel */
#define FUSE_XSPI_NAND_CONN_SEL_SHIFT (12u)
#define FUSE_XSPI_NAND_CONN_SEL_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_CONN_SEL_SHIFT)
#define FUSE_XSPI_NAND_CONN_SEL_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_CONN_SEL_MASK) >> FUSE_XSPI_NAND_CONN_SEL_SHIFT)

/* XSPI NAND disable FCB */
#define FUSE_XSPI_NAND_DIS_FCB_SHIFT (13u)
#define FUSE_XSPI_NAND_DIS_FCB_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_DIS_FCB_SHIFT)
#define FUSE_XSPI_NAND_DIS_FCB_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_DIS_FCB_MASK) >> FUSE_XSPI_NAND_DIS_FCB_SHIFT)

/* XSPI NAND type */
#define FUSE_XSPI_NAND_TYPE_SHIFT (14u)
#define FUSE_XSPI_NAND_TYPE_MASK (MASK_WIDTH(1u) << FUSE_XSPI_NAND_TYPE_SHIFT)
#define FUSE_XSPI_NAND_TYPE_VALUE ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_TYPE_MASK) >> FUSE_XSPI_NAND_TYPE_SHIFT)

/* XSPI NAND freq */
#define FUSE_XSPI_NAND_SAFE_FREQ_SHIFT (16u)
#define FUSE_XSPI_NAND_SAFE_FREQ_MASK (MASK_WIDTH(3u) << FUSE_XSPI_NAND_SAFE_FREQ_SHIFT)
#define FUSE_XSPI_NAND_SAFE_FREQ_VALUE \
    ((FSB_BOOT_CFG_REG_RD(3u) & FUSE_XSPI_NAND_SAFE_FREQ_MASK) >> FUSE_XSPI_NAND_SAFE_FREQ_SHIFT)

/* ========================== Boot Failure Indicator Pin ====================== */
/* Enable_Boot_Failure_Indicator pin */
#define FUSE_BOOT_FAIL_IND_EN_SHIFT (31u)
#define FUSE_BOOT_FAIL_IND_EN_MASK (MASK_WIDTH(1u) << FUSE_BOOT_FAIL_IND_EN_SHIFT)
#define FUSE_BOOT_FAIL_IND_EN_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0u) & FUSE_BOOT_FAIL_IND_EN_MASK) >> FUSE_BOOT_FAIL_IND_EN_SHIFT)

#define FUSE_BOOT_FAIL_IND_PIN_SHIFT (24u)
#define FUSE_BOOT_FAIL_IND_PIN_MASK (MASK_WIDTH(4u) << FUSE_BOOT_FAIL_IND_PIN_SHIFT)
#define FUSE_BOOT_FAIL_IND_PIN_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0u) & FUSE_BOOT_FAIL_IND_PIN_MASK) >> FUSE_BOOT_FAIL_IND_PIN_SHIFT)

/* ======================== SEMC NAND Boot ================================= */
/* Boot_Search_Count */
#define FUSE_SEMC_NAND_SEARCH_COUNT_SHIFT ((uint8_t)0)
#define FUSE_SEMC_NAND_SEARCH_COUNT_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_SEARCH_COUNT_SHIFT))
#define FUSE_SEMC_NAND_SEARCH_COUNT_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_SEARCH_COUNT_MASK) >> FUSE_SEMC_NAND_SEARCH_COUNT_SHIFT)

/* I/O Port_width */
#define FUSE_SEMC_NAND_IO_PORT_WIDTH_SHIFT ((uint8_t)1)
#define FUSE_SEMC_NAND_IO_PORT_WIDTH_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_IO_PORT_WIDTH_SHIFT))
#define FUSE_SEMC_NAND_IO_PORT_WIDTH_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_IO_PORT_WIDTH_MASK) >> FUSE_SEMC_NAND_IO_PORT_WIDTH_SHIFT)

/* ECC Type -- ECC_SEL */
#define FUSE_SEMC_NAND_ECC_TYPE_SHIFT ((uint8_t)2)
#define FUSE_SEMC_NAND_ECC_TYPE_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_ECC_TYPE_SHIFT))
#define FUSE_SEMC_NAND_ECC_TYPE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_ECC_TYPE_MASK) >> FUSE_SEMC_NAND_ECC_TYPE_SHIFT)

/* ECC Mode */
#define FUSE_SEMC_NAND_ECC_MODE_SHIFT ((uint8_t)3)
#define FUSE_SEMC_NAND_ECC_MODE_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_ECC_MODE_SHIFT))
#define FUSE_SEMC_NAND_ECC_MODE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_ECC_MODE_MASK) >> FUSE_SEMC_NAND_ECC_MODE_SHIFT)

/* EDO mode */
#define FUSE_SEMC_NAND_EDO_MODE_SHIFT ((uint8_t)4)
#define FUSE_SEMC_NAND_EDO_MODE_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_EDO_MODE_SHIFT))
#define FUSE_SEMC_NAND_EDO_MODE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_EDO_MODE_MASK) >> FUSE_SEMC_NAND_EDO_MODE_SHIFT)

/* Memory Access Command */
#define FUSE_SEMC_NAND_ACCESS_COMMAND_SHIFT ((uint8_t)5)
#define FUSE_SEMC_NAND_ACCESS_COMMAND_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_ACCESS_COMMAND_SHIFT))
#define FUSE_SEMC_NAND_ACCESS_COMMAND_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_ACCESS_COMMAND_MASK) >> FUSE_SEMC_NAND_ACCESS_COMMAND_SHIFT)

/* RDY Polarity */
#define FUSE_SEMC_NAND_RDY_POLARITY_SHIFT ((uint8_t)6)
#define FUSE_SEMC_NAND_RDY_POLARITY_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_RDY_POLARITY_SHIFT))
#define FUSE_SEMC_NAND_RDY_POLARITY_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_RDY_POLARITY_MASK) >> FUSE_SEMC_NAND_RDY_POLARITY_SHIFT)

/* Ready Check type */
#define FUSE_SEMC_NAND_READY_CHECK_TYPE_SHIFT ((uint8_t)7)
#define FUSE_SEMC_NAND_READY_CHECK_TYPE_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_READY_CHECK_TYPE_SHIFT))
#define FUSE_SEMC_NAND_READY_CHECK_TYPE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_READY_CHECK_TYPE_MASK) >> FUSE_SEMC_NAND_READY_CHECK_TYPE_SHIFT)

/* ONFI Timing mode */
#define FUSE_SEMC_NAND_TIMING_MODE_SHIFT ((uint8_t)8)
#define FUSE_SEMC_NAND_TIMING_MODE_MASK ((uint32_t)(0x07u << FUSE_SEMC_NAND_TIMING_MODE_SHIFT))
#define FUSE_SEMC_NAND_TIMING_MODE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_TIMING_MODE_MASK) >> FUSE_SEMC_NAND_TIMING_MODE_SHIFT)

/* PCS selection */
#define FUSE_SEMC_NAND_PCS_SELECTION_SHIFT ((uint8_t)12)
#define FUSE_SEMC_NAND_PCS_SELECTION_MASK ((uint32_t)(0x07 << FUSE_SEMC_NAND_PCS_SELECTION_SHIFT))
#define FUSE_SEMC_NAND_PCS_SELECTION_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_PCS_SELECTION_MASK) >> FUSE_SEMC_NAND_PCS_SELECTION_SHIFT)

/* Boot_Search_Stride  */
#define FUSE_SEMC_NAND_SEARCH_STRIDE_SHIFT ((uint8_t)16)
#define FUSE_SEMC_NAND_SEARCH_STRIDE_MASK ((uint32_t)(0xFu << FUSE_SEMC_NAND_SEARCH_STRIDE_SHIFT))
#define FUSE_SEMC_NAND_SEARCH_STRIDE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_SEARCH_STRIDE_MASK) >> FUSE_SEMC_NAND_SEARCH_STRIDE_SHIFT)

/* Row Column address mode */
#define FUSE_SEMC_NAND_ROW_COL_ADDR_MODE_SHIFT ((uint8_t)20)
#define FUSE_SEMC_NAND_ROW_COL_ADDR_MODE_MASK ((uint32_t)(0x07u << FUSE_SEMC_NAND_ROW_COL_ADDR_MODE_SHIFT))
#define FUSE_SEMC_NAND_ROW_COL_ADDR_MODE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_ROW_COL_ADDR_MODE_MASK) >> FUSE_SEMC_NAND_ROW_COL_ADDR_MODE_SHIFT)

/* Status Command Type */
#define FUSE_SEMC_NAND_STATUS_CMD_TYPE_SHIFT ((uint8_t)23)
#define FUSE_SEMC_NAND_STATUS_CMD_TYPE_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_STATUS_CMD_TYPE_SHIFT))
#define FUSE_SEMC_NAND_STATUS_CMD_TYPE_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_STATUS_CMD_TYPE_MASK) >> FUSE_SEMC_NAND_STATUS_CMD_TYPE_SHIFT)

/* COL_Address_width */
#define FUSE_SEMC_NAND_COL_ADDRESS_WIDTH_SHIFT ((uint8_t)24)
#define FUSE_SEMC_NAND_COL_ADDRESS_WIDTH_MASK ((uint32_t)(0x7u << FUSE_SEMC_NAND_COL_ADDRESS_WIDTH_SHIFT))
#define FUSE_SEMC_NAND_COL_ADDRESS_WIDTH_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_COL_ADDRESS_WIDTH_MASK) >> FUSE_SEMC_NAND_COL_ADDRESS_WIDTH_SHIFT)

/* Device ECC initial status */
#define FUSE_SEMC_NAND_DEVICE_ECC_STATUS_SHIFT ((uint8_t)27)
#define FUSE_SEMC_NAND_DEVICE_ECC_STATUS_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_DEVICE_ECC_STATUS_SHIFT))
#define FUSE_SEMC_NAND_DEVICE_ECC_STATUS_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_DEVICE_ECC_STATUS_MASK) >> FUSE_SEMC_NAND_DEVICE_ECC_STATUS_SHIFT)

/* Pages in block */
#define FUSE_SEMC_NAND_PAGES_IN_BLOCK_SHIFT ((uint8_t)28)
#define FUSE_SEMC_NAND_PAGES_IN_BLOCK_MASK ((uint32_t)(0x07 << FUSE_SEMC_NAND_PAGES_IN_BLOCK_SHIFT))
#define FUSE_SEMC_NAND_PAGES_IN_BLOCK_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_PAGES_IN_BLOCK_MASK) >> FUSE_SEMC_NAND_PAGES_IN_BLOCK_SHIFT)

/* ONFI compliant */
#define FUSE_SEMC_NAND_ONFI_COMPLIANT_SHIFT ((uint8_t)31)
#define FUSE_SEMC_NAND_ONFI_COMPLIANT_MASK ((uint32_t)(1u << FUSE_SEMC_NAND_ONFI_COMPLIANT_SHIFT))
#define FUSE_SEMC_NAND_ONFI_COMPLIANT_VALUE \
    ((FSB_BOOT_CFG_REG_RD(0x5) & FUSE_SEMC_NAND_ONFI_COMPLIANT_MASK) >> FUSE_SEMC_NAND_ONFI_COMPLIANT_SHIFT)

#endif /* __FUSEMAP_H__*/
