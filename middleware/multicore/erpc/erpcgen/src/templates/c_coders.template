{% def decodeBuiltinType(info) --------------- BuiltinType %}
{% if info.builtinType == "kStringType" %}
uint32_t {$info.stringLocalName}_len;
char * {$info.stringLocalName}_local;
{$infraErrVar}codec->readString(&{$info.stringLocalName}_len, &{$info.stringLocalName}_local);
{$> addInfraErrorChecksBegin("") }
{%  if source == "client" && not info.withoutAlloc %}
{$infraErrIndents}{$info.name} = (char *) erpc_malloc(({$info.stringAllocSize} + 1) * sizeof(char));
{% if generateAllocErrorChecks %}
{$infraErrIndents}if ({$info.name} == NULL)
{$infraErrIndents}{
{$infraErrIndents}    {$allocErrVar}kErpcStatus_MemoryError;
{$infraErrIndents}}
{$infraErrIndents}else
{$infraErrIndents}{
{%  endif %}
{%  elif source == "server" %}
{$infraErrIndents}{$info.name} = (char *) erpc_malloc(({$info.stringAllocSize} + 1) * sizeof(char));
{% if generateAllocErrorChecks %}
{$infraErrIndents}if ({$info.name} == NULL)
{$infraErrIndents}{
{$infraErrIndents}    {$allocErrVar}kErpcStatus_MemoryError;
{$infraErrIndents}}
{$infraErrIndents}else
{$infraErrIndents}{
{%  endif %}
{%  endif -- withoutAlloc %}
{$infraErrIndents}{%  if source == "client" && not info.withoutAlloc %}{$allocErrIndents}{%  elif source == "server" %}{$allocErrIndents}{%  endif -- withoutAlloc %}memcpy({$info.name}, {$info.stringLocalName}_local, {$info.stringLocalName}_len);
{$infraErrIndents}{%  if source == "client" && not info.withoutAlloc %}{$allocErrIndents}{%  elif source == "server" %}{$allocErrIndents}{%  endif -- withoutAlloc %}({$info.name})[{$info.stringLocalName}_len] = 0;
{%  if source == "client" && not info.withoutAlloc %}
{% if generateAllocErrorChecks %}
{$infraErrIndents}}
{%  endif %}
{%  elif source == "server" %}
{% if generateAllocErrorChecks %}
{$infraErrIndents}}
{%  endif %}
{%  endif -- withoutAlloc %}
{$> addInfraErrorChecksEnd("") }
{% else %}
{%  if source == "client" && info.pointerScalarTypes %}
{$infraErrVar}codec->read({$info.name});
{%  else %}
{$infraErrVar}codec->read(&{$info.name});
{%  endif -- pointerScalarTypes %}
{% endif -- builtinType %}
{% enddef ------------------------------- BuiltinType %}

{% def decodeBinaryType(info) --------------- BinaryType %}
{% if info.hasLengthVariable %}
uint32_t {$info.sizeTemp};
{% endif %}
uint8_t * {$info.dataTemp};
{$infraErrVar}codec->readBinary(&{$info.sizeTemp}, &{$info.dataTemp});
{% if info.hasLengthVariable && not info.constantVariable %}
{% if info.pointerScalarTypes && source == "client" %}*{% endif %}{$info.size} = {$info.sizeTemp};
{% endif %}
{$> addInfraErrorChecksBegin("") }
{$infraErrIndents}if ({$info.sizeTemp} > 0 {% if info.maxSize != info.sizeTemp %}&& {$info.sizeTemp} <= {$info.maxSize}{% endif %})
{$infraErrIndents}{
{% if source == "server" || info.useMallocOnClientSide %}
{$infraErrIndents}    {$info.name} = (uint8_t *) erpc_malloc({$info.maxSize} * sizeof(uint8_t));
{% if generateAllocErrorChecks %}
{$infraErrIndents}    if ({$info.name} == NULL)
{$infraErrIndents}    {
{$infraErrIndents}        {$allocErrVar}kErpcStatus_MemoryError;
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{% endif %}
{% endif %}
{$infraErrIndents}    {% if source == "server" || info.useMallocOnClientSide %}{$allocErrIndents}{% endif %}memcpy({$info.name}, {$info.dataTemp}, {$info.sizeTemp});
{% if source == "server" || info.useMallocOnClientSide %}
{% if generateAllocErrorChecks %}
{$infraErrIndents}    }
{% endif %}
{% endif %}
{$infraErrIndents}}
{$infraErrIndents}else
{$infraErrIndents}{
{$infraErrIndents}    {$info.name} = NULL;
{$infraErrIndents}}
{$> addInfraErrorChecksEnd("") }
{% enddef ------------------------------- BinaryType %}

{% def decodeEnumType(info) ---------------- EnumType %}
{$infraErrVar}codec->read(&_tmp_local);
{$> addInfraErrorChecksBegin("") }
{% if source == "client" && info.pointerScalarTypes %}
{$infraErrIndents}*{$info.name} = static_cast<{$info.enumName}>(_tmp_local);
{% else %}
{$infraErrIndents}{$info.name} = static_cast<{$info.enumName}>(_tmp_local);
{% endif -- pointerScalarTypes %}
{$> addInfraErrorChecksEnd("") }
{% enddef ---------------------------------- EnumType %}

{% def decodeListType(info) ------------------- ListType %}
{% if info.useBinaryCoder %}
{$decodeBinaryType(info)}
{% else %}
{%  if info.hasLengthVariable %}
uint32_t {$info.sizeTemp};
{%  endif %}
{$infraErrVar}codec->startReadList(&{$info.sizeTemp});
{%  if info.hasLengthVariable && not info.constantVariable %}
{%   if info.pointerScalarTypes && source == "client" %}*{% endif %}{$info.size} = {$info.sizeTemp};
{%  endif %}
{$> addInfraErrorChecksBegin("") }
{%  if info.isNullable %}
{$infraErrIndents}{$infraErrVar}codec->readNullFlag(&isNull);
{$> addInfraErrorChecksBegin("") }
{%  endif --info.isNullable %}
{$infraErrIndents}if ({$info.sizeTemp} > 0{%  if info.isNullable %} && !isNull{%  endif --info.isNullable %})
{$infraErrIndents}{
{%   if source == "server" || info.useMallocOnClientSide %}
{$infraErrIndents}    {$info.name} = ({$info.mallocType}) erpc_malloc({$info.maxSize} * sizeof({$info.mallocSizeType}));
{%    if generateAllocErrorChecks %}
{$infraErrIndents}    if ({$info.name} == NULL)
{$infraErrIndents}    {
{$infraErrIndents}        {$allocErrVar}kErpcStatus_MemoryError;
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{%    endif %}
{$addIndent(infraErrIndents & allocErrIndents & "        ", decodeArrayType(info))}
{%    if generateAllocErrorChecks %}
{$infraErrIndents}    }
{%    endif %}
{%   else %}
{$addIndent(infraErrIndents & "    ", decodeArrayType(info))}
{%   endif %}
{$infraErrIndents}}
{$infraErrIndents}else
{$infraErrIndents}{
{$infraErrIndents}    {$info.name} = NULL;
{$infraErrIndents}}
{%  if info.isNullable %}
{$> addInfraErrorChecksEnd("") }
{%  endif --info.isNullable %}
{$> addInfraErrorChecksEnd("") }
{$> addInfraErrorChecksBegin("") }
{$infraErrIndents}{$infraErrVar}codec->endReadList();
{$> addInfraErrorChecksEnd("") }
{% endif %}
{% enddef ------------------------------------- ListType %}

{% def decodeArrayType(info) -------------- ArrayType %}
for (uint32_t {$info.forLoopCount} = 0; {$info.forLoopCount} < {$info.sizeTemp}; ++{$info.forLoopCount})
{
{% if info.isElementArrayType %}
{$addIndent("    ", info.protoNext.decode(info.protoNext))}
{% else %}
{$> addInfraErrorChecksBegin("    ") }
{$addIndent(infraErrIndents & "    ", info.protoNext.decode(info.protoNext))}
{$> addInfraErrorChecksEnd("    ") }
{$>addIndent("    ", addInfraErrorChecksElse())}
{% endif %}
}
{% enddef ----------------------------------- ArrayType %}

{% def decodeStructType(info) --------------- StructType %}
{% if info.inDataContainer %}
{$infraErrVar}read_{$info.typeName}_struct(codec, &({$info.name}));
{% else -- not inDataContainer %}
{$infraErrVar}read_{$info.typeName}_struct(codec, {$info.name});
{% endif -- inDataContainer %}
{% enddef -------------------------- StructType %}

{% def decodeUnionParamType(info) --------------- UnionParamType %}
{% if info.inDataContainer %}
{%  if info.castDiscriminator %}
{$infraErrVar}read_{$info.typeName}_union(codec, &_tmp_local, &{$info.name});
{%   if !info.isConstant %}
{$info.dataLiteral}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%   endif %}
{%  else %}
{$infraErrVar}read_{$info.typeName}_union(codec, &{$info.dataLiteral}{$info.discriminatorName}, &{$info.name});
{%  endif -- castDiscriminator%}
{% else -- not inDataContainer %}
{%  if info.castDiscriminator %}
{$infraErrVar}read_{$info.typeName}_union(codec, &_tmp_local, {$info.name});
{%   if !info.isConstant %}
{%    if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%   endif %}
{%  else %}
{$infraErrVar}read_{$info.typeName}_union(codec, {% if info.discrimPtr == false || source != "client" %}&{% endif %}{$info.discriminatorName}, {$info.name});
{%  endif  -- castDiscriminator%}
{% endif -- inDataContainer %}
{% enddef -------------------------- UnionParamType %}

{% def decodeUnionType(info) ---------------- %}
{$infraErrVar}codec->startReadUnion({% if info.castDiscriminator %}{% if info.dataLiteral != "" %}&{% endif %}_tmp_local{% else %}{% if info.dataLiteral != "" %}&{$info.dataLiteral}{% endif %}{$info.discriminatorName}{% endif %});
{% if info.castDiscriminator %}
{$info.dataLiteral}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{% endif -- info.castDiscriminator %}
switch ({% if info.dataLiteral != "" %}{$info.dataLiteral}{% else %}*{% endif %}{$info.discriminatorName})
{
{% for case in info.cases %}
{%  if case.name == "default" %}
{$addIndent("    ", "default:")}
{%  else %}
{$addIndent("    ", "case ")}{% if case.name != "" %}{$case.name}{% else %}{$case.value}{%  endif %}:
{%  endif -- default or case %}
    {
{%  for member in case.members %}
{% if source == "server" && !empty(member.coderCall.memberAllocation) %}
{$addIndent("        ", member.coderCall.memberAllocation)}
{% endif %}
{$addInfraErrorChecks("        ", member.coderCall.decode(member.coderCall))}
{%  endfor -- members %}
{$addIndent("        ", "break;")}
    }
{% endfor -- cases %}
}
{$infraErrVar}codec->endReadUnion();
{% enddef -------------------------- UnionType %}

{% def decodeFunctionType(info) %}
{% if !empty(info.tableName) %}
{$infraErrVar}codec->read(&_tmp_local);
{$> addInfraErrorChecksBegin("") }
{%  if infraErrVar != "" %}
    if (_tmp_local < {$info.tableSize})
    {
{%  endif %}
{$infraErrIndents}{$infraErrIndents}{$info.name} = {$info.tableName}[_tmp_local];
{%  if infraErrVar != "" %}
    }
    else
    {
        {$infraErrVar}kErpcStatus_UnknownCallback;
    }
{%  endif %}
{$> addInfraErrorChecksEnd("") }
{% else %}
/* When are defined less than 2 callback functions, eRPC don't need serialize any code. */
{$info.name} = {$info.callbackName};
{% endif%}
{% enddef -------------------------- FunctionType %}

{% def decodeSharedType(info) %}
{$infraErrVar}codec->readPtr(reinterpret_cast<uintptr_t *>({% if not ((info.funcParam == true && info.InoutOutDirection == true) && source == "client") %}&{%  endif %}{$info.name}));
{% if info.sharedType != "" %}
{%  if info.sharedType == "struct" %}
{%   if info.inDataContainer %}
{$infraErrVar}read_{$info.sharedType}_struct_shared(codec, &({$info.name}));
{%   else -- not inDataContainer %}
{$infraErrVar}read_{$info.sharedType}_struct_shared(codec, {$info.name});
{%   endif -- inDataContainer %}
{%  else %}
{%   if info.inDataContainer %}
{%    if info.castDiscriminator %}
{$infraErrVar}read_{$info.sharedType}_union_shared(codec, &_tmp_local, &{$info.name});
{$info.dataLiteral}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%    else %}
{$infraErrVar}read_{$info.sharedType}_union_shared(codec, &{$info.dataLiteral}{$info.discriminatorName}, &{$info.name});
{%    endif -- castDiscriminator%}
{%   else -- not inDataContainer %}
{%    if info.castDiscriminator %}
{$infraErrVar}read_{$info.sharedType}_union_shared(codec, &_tmp_local, {$info.name});
{%     if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%    else %}
{$infraErrVar}read_{$info.sharedType}_union_shared(codec, {% if info.discrimPtr == false || source != "client" %}&{% endif %}{$info.discriminatorName}, {$info.name});
{%    endif  -- castDiscriminator%}
{%   endif -- inDataContainer %}
{%  endif%}
{% endif%}
{% enddef -------------------------- SharedType %}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#}


{# Encode sending data #}
{% def encodeBuiltinType(info) -----------------  %}
{% if info.builtinType == "kStringType" %}
{% if source == "client" || info.inDataContainer %}
if ({$info.name})
{
    {$infraErrVar}codec->writeString(strlen({$info.name}), {$info.name});
}
{% if generateInfraErrorChecks %}
else
{
    {$infraErrVar}kErpcStatus_Fail;
}
{% endif %}
{% else %}
{$infraErrVar}codec->writeString(strlen({$info.name}), {$info.name});
{% endif %}
{% else %}
{%  if source == "client" && info.pointerScalarTypes %}
{$infraErrVar}codec->write(*{$info.name});
{%  else %}
{$infraErrVar}codec->write({$info.name});
{%  endif -- pointerScalarTypes %}
{% endif -- builtinType %}
{% enddef --------------------------------------- BuiltinType %}

{% def encodeBinaryType(info) -----------------  %}
{$infraErrVar}codec->writeBinary({% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size}, {$info.name});
{% enddef --------------------------------------- BinaryType %}

{% def encodeEnumType(info) ---------------------%}
{% if source == "client" && info.pointerScalarTypes %}
{$infraErrVar}codec->write(static_cast<int32_t>(*{$info.name}));
{% else %}
{$infraErrVar}codec->write(static_cast<int32_t>({$info.name}));
{% endif -- pointerScalarTypes %}
{% enddef --------------------------------------- Enum %}

{% def encodeListType(info) ---------------------------%}
{% if info.useBinaryCoder %}
{$encodeBinaryType(info)}
{% else %}
if ({% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size} > 0)
{
    {$infraErrVar}codec->startWriteList({% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size});
{%  if info.isNullable %}
    if ({$info.name} == NULL)
    {
        {$infraErrVar}codec->writeNullFlag(true);
    }
    else
    {
        {$infraErrVar}codec->writeNullFlag(false);
{$addIndent("        ", encodeArrayType(info))}
    }
{%  else %}
{$addIndent("    ", encodeArrayType(info))}
{%  endif --info.isNullable %}
}
else
{
    {$infraErrVar}codec->startWriteList(0);
}
{$> addInfraErrorChecksBegin("") }
{$infraErrIndents}{$infraErrVar}codec->endWriteList();
{$> addInfraErrorChecksEnd("") }
{% endif %}
{% enddef ------------------------------------ ListType %}

{% def encodeArrayType(info) --------------------- %}
for (uint32_t {$info.forLoopCount} = 0; {$info.forLoopCount} < {% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size}; ++{$info.forLoopCount})
{
{% if info.isElementArrayType %}
{$addIndent("    ", info.protoNext.encode(info.protoNext))}
{% else %}
{$> addInfraErrorChecksBegin("    ") }
{$addIndent(infraErrIndents & "    ", info.protoNext.encode(info.protoNext))}
{$> addInfraErrorChecksEnd("    ") }
{$>addIndent("    ", addInfraErrorChecksElse())}
{% endif %}
}
{% enddef --------------------------------------- ArrayType %}

{% def encodeStructType(info) -------------------%}
{% if info.inDataContainer %}
{$infraErrVar}write_{$info.typeName}_struct(codec, &({$info.name}));
{% else -- not inDataContainer %}
{$infraErrVar}write_{$info.typeName}_struct(codec, {$info.name});
{% endif -- inDataContainer %}
{% enddef --------------------------------------- StructType %}

{% def encodeUnionParamType(info) --------------- UnionParamType %}
{% if info.inDataContainer %}
{$infraErrVar}write_{$info.typeName}_union(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{$info.dataLiteral}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, &{$info.name});
{% else -- not inDataContainer %}
{$infraErrVar}write_{$info.typeName}_union(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{% if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, {$info.name});
{% endif -- inDataContainer %}
{% enddef -------------------------- UnionParamType %}

{% def encodeUnionType(info) ---------------- %}
{$infraErrVar}codec->startWriteUnion({% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{$info.dataLiteral}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %});
switch ({$info.dataLiteral}{$info.discriminatorName})
{
{% for case in info.cases %}
{% if case.name == "default" %}{$addIndent("    ", "default:")}
{% else %}{$addIndent("    ", "case ")}{% if case.name != "" %}{$case.name}{% else %}{$case.value}{% endif %}:
{% endif -- default or case %}
    {
{% for member in case.members %}
{$addInfraErrorChecks("        ", member.coderCall.encode(member.coderCall))}
{% endfor -- members %}
{$addIndent("        ", "break;")}
    }
{% endfor -- cases %}
}
{$infraErrVar}codec->endWriteUnion();
{% enddef -------------------------- UnionType %}

{% def encodeFunctionType(info) %}
{% if !empty(info.tableName) %}
for(int32_t i{$info.tableName} = 0; i{$info.tableName} < {$info.tableSize}; ++i{$info.tableName})
{
    if ({$info.tableName}[i{$info.tableName}] == {$info.name})
    {
        {$infraErrVar}codec->write(i{$info.tableName});
        break;
    }
{%  if infraErrVar != "" %}
    if (i{$info.tableName} + 1 == {$info.tableSize})
    {
        {$infraErrVar}kErpcStatus_UnknownCallback;
    }
{%  endif %}
}
{% else %}
/* When are defined less than 2 callback functions, eRPC don't need serialize any code. */
{%  if infraErrVar != "" %}
if ({$info.name} != {$info.callbackName})
{
    {$infraErrVar}kErpcStatus_UnknownCallback;
}
{%  endif %}
{% endif%}
{% enddef -------------------------- FunctionType %}

{% def encodeSharedType(info) %}
{% if sharedMemBeginAddr != "" %}
if ({$info.name} >= ERPC_SHARED_MEMORY_BEGIN && {$info.name} <= ERPC_SHARED_MEMORY_END)
{
    {$infraErrVar}codec->write(static_cast<int32_t>({$info.name}));
}
else
{
    {$infraErrVar}kErpcStatus_MemoryError;
}
{% else %}
{$infraErrVar}codec->writePtr(reinterpret_cast<uintptr_t>({%if source == "client" && info.InoutOutDirection %}*{%endif%}{$info.name}));
{% endif %}
{% if info.sharedType != "" %}
{%  if info.sharedType == "struct" %}
{%   if info.inDataContainer %}
{$infraErrVar}write_{$info.typeName}_struct(codec, &({$info.name}));
{%   else -- not inDataContainer %}
{$infraErrVar}write_{$info.typeName}_struct(codec, {$info.name});
{%   endif -- inDataContainer %}
{%  else %}
{%   if info.inDataContainer %}
{$infraErrVar}write_{$info.typeName}_union_shared(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{$info.dataLiteral}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, &{$info.name});
{%   else -- not inDataContainer %}
{$infraErrVar}write_{$info.typeName}_union_shared(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{% if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, {$info.name});
{%   endif -- inDataContainer %}
{%  endif%}
{% endif%}
{% enddef -------------------------- SharedType %}

