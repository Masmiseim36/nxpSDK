{# Variables #}
{% if generateInfraErrorChecks %}
{%   set infraErrIndents = "    " %}
{%   set infraErrVar = "err = " %}
{% else %}
{%   set infraErrIndents = "" %}
{%   set infraErrVar = "" %}
{% endif %}
{% if generateAllocErrorChecks %}
{%   set allocErrIndents = "    " %}
{%   set allocErrVar = "err = " %}
{% else %}
{%   set allocErrIndents = "" %}
{%   set allocErrVar = "" %}
{% endif %}
{% if generateInfraErrorChecks or generateAllocErrorChecks %}
{%   set errVar = "err = " %}
{% else %}
{%   set errVar = "" %}
{% endif %}

{# Code #}
{%   set s_performRequest = infraErrVar & "g_client->performRequest(request);" %}
{%   set s_performNestedRequest = infraErrVar & "g_client->performNestedRequest(request);" %}
{%   set s_endWriteMessage = infraErrVar & "codec->endWriteMessage();" %}
{%   set s_startReadStruct = infraErrVar & "codec->startReadStruct();" %}
{%   set s_endReadStruct = infraErrVar & "codec->endReadStruct();" %}
{%   set s_endReadMessage = infraErrVar & "codec->endReadMessage();" %}
{%   set s_prepareServerBufferForSend = infraErrVar & "messageFactory->prepareServerBufferForSend(codec->getBuffer());" %}

{% def f_clientEncode(iface, fn) %}
{$addInfraErrorChecks("    ", f_clientStartWriteMessage(fn.isReturnValue, iface.name, fn.name))}
{%   if fn.isSendValue %}
{%    for param in fn.parametersToServer if !param.serializedBothDirection %}
{%     if param.isNullable %}
{$ addInfraErrorChecks("    ", f_paramIsNullableEncode(param))}{$loop.addNewLineIfNotLast}
{%     else -- isNullable %}
{$addInfraErrorChecks("    ", param.coderCall.encode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- fn parametersToServer %}
{%   endif -- isSendValue %}

{$addInfraErrorChecks("    ", s_endWriteMessage)}

    // Send message to server
{% if fn.nestedCall %}
{$addInfraErrorChecks("    ", s_performNestedRequest)}
{% else  -- fn.nestedCall %}
{$addInfraErrorChecks("    ", s_performRequest)}
{% endif  -- fn.nestedCall %}
{% enddef %}

{% def f_clientDecode(iface, fn) %}
{%    for param in fn.parametersToClient if not param.serializedViaMember %}
{%     if param.isNullable %}
    if ({$param.nullableName} != NULL)
    {
{$addInfraErrorChecks("        ", param.coderCall.decode(param.coderCall))}{$loop.addNewLineIfNotLast}
    }
{%     else -- notNullable %}
{$addInfraErrorChecks("    ", param.coderCall.decode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- fn parametersToClient %}
{%    if fn.returnValue.type.isNotVoid %}
{%     if count(fn.parametersToClient) > 0 %}
{# need empty line for this case #}

{%     endif %}
{%     if fn.returnValue.isNullable %}
    bool isNull;
{$addInfraErrorChecks("    ", f_paramIsNullableDecode(fn.returnValue))}
{%     else -- isNullable %}
{$> addIndent("    ", fn.returnValue.firstAlloc)}
{$addInfraErrorChecks("    ", fn.returnValue.coderCall.decode(fn.returnValue.coderCall))}
{%     endif -- isNullable %}
{%    endif -- isNotVoid %}

{$addInfraErrorChecks("    ", s_endReadMessage)}
{% enddef %}

{% def f_clientStartWriteMessage(isReturnValue, interfaceName, functionName) %}
{$infraErrVar}codec->startWriteMessage({% if not isReturnValue %}kOnewayMessage{%else%}kInvocationMessage{%endif%}, k{$interfaceName}_service_id, k{$interfaceName}_{$functionName}_id, request.getSequence());
{% enddef %}

{% def f_serverStartWriteMessage(interfaceName, functionName) %}
{$infraErrVar}codec->startWriteMessage(kReplyMessage, k{$interfaceName}_service_id, k{$interfaceName}_{$functionName}_id, sequence);
{% enddef %}

{% def f_paramIsNullableEncode(param) %}
if ({$param.nullableName} == NULL)
{
    {$infraErrVar}codec->writeNullFlag(true);
}
else
{
    {$infraErrVar}codec->writeNullFlag(false);
{$addInfraErrorChecks("    ", param.coderCall.encode(param.coderCall))}
}
{% enddef %}

{% def f_paramIsNullableDecode(param) %}
{$infraErrVar}codec->readNullFlag(&isNull);
if (!isNull)
{
{% if source == "server" %}
{%  if param.allocateToServer %}
{$> addIndent("    ", param.mallocServer)}
{%  endif -- allocateToServer %}
{% endif %}
{$> addIndent("    ", param.firstAlloc)}
{$addInfraErrorChecks("    ",param.coderCall.decode(param.coderCall))}
}
else
{
    {$param.nullableName} = NULL;
}
{% enddef %}

{% def f_startReadStruct()%}
// Decode reply. startReadMessage has already been called for us by performRequest.
{$infraErrVar}codec->startReadStruct();
{% enddef %}
