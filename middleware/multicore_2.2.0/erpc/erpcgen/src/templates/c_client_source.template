/*
 * Generated by erpcgen {$erpcgenVersion} on {$todaysDate}.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

#include "{$commonHeaderName}"
#include "client_manager.h"
#include "erpc_port.h"

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif

extern ClientManager *g_client;
{$ constantsDefinitions(consts)}{$ structSerialHeader(structsTo2Core)}{$ structSerialSource(structsTo2Core)}{$ structDeserialHeader(structsTo1Core)}{$ structDeserialSource(structsTo1Core)}
{% for iface in interfaces %}
{%  for fn in iface.functions %}

// {$iface.name} interface {$fn.name} function client shim.
{$fn.prototype}
{
{%   if errVar != ""  %}
    erpc_status_t {$errVar}kErpcStatus_Success;

{%   endif %}
    // Get a new request.
{%   if !fn.isReturnValue %}
    RequestContext request = g_client->createRequest(true);
{%   else %}
    RequestContext request = g_client->createRequest(false);
{%   endif -- isReturnValue %}

    // Encode the request.
    Codec * codec = request.getCodec();
{%   if generateAllocErrorChecks %}
    if (codec == NULL)
    {
        {$allocErrVar}kErpcStatus_MemoryError;
    }
{%    if not generateInfraErrorChecks %}
    else
    {
{$addIndent("    ", f_clientEncode(iface, fn))}
    }
{%    endif %}
{%   endif %}
{%   if generateInfraErrorChecks or not generateAllocErrorChecks %}

{$f_clientEncode(iface, fn)}
{%   endif %}
{%   if fn.isReturnValue %}
{%    if fn.needEnumTmpClient %}
    int32_t enum_tmp_local;
{%    endif %}
{%    if fn.returnValue.type.isNotVoid %}
    {$fn.returnValue.resultVariable};
{% endif %}
{%    if generateAllocErrorChecks && not generateInfraErrorChecks %}
    if (!err)
    {
{$addIndent("    ", f_clientDecode(iface, fn))}
    }
{% else %}
{$f_clientDecode(iface, fn)}
{% endif %}
{%   endif -- isReturnValue %}
    // Dispose of the request.
    g_client->releaseRequest(request);
{%   if errVar != ""  %}
{# Handle error #}

    if (err)
    {
        client_error_handler_t errorHandler = g_client->getErrorHandler();
        if (errorHandler != NULL)
        {
            (*errorHandler)(err);
        }
        {% if fn.returnValue.type.isNotVoid %}return {$fn.returnValue.errorReturnValue};{% endif -- isNotVoid %}
    }
{%   endif %}

    return{% if fn.returnValue.type.isNotVoid %} result{% endif -- isNotVoid %};
}
{%  endfor -- fn %}
{% endfor -- iface %}
