/*
 * Generated by erpcgen {$erpcgenVersion} on {$todaysDate}.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

{# ---------------- constantsDefinitions ---------------- #}
{% def constantsDefinitions(consts) %}
{% if not empty(consts) %}

// Constant variable definitions
{%  for c in consts %}
const {$c.typeAndName} = {$c.value};
{%  endfor -- consts %}
{% endif %}
{% enddef -- constantsDefinitions %}

{# ---------------- structDeserialHeader ---------------- #}
{% def structDeserialHeader(structs) %}
{% if structs %}
{%  for st in structs %}

//! @brief Function to read struct {$st.name}
static int32_t read_{$st.name}_struct(erpc::Codec * codec, {$st.name} * data);
{%  endfor -- structs %}
{% endif %}
{% enddef -- structDeserialHeader %}

{# ---------------- structSerialHeader ---------------- #}
{% def structSerialHeader(structs) %}
{% if structs %}
{%  for st in structs %}

//! @brief Function to write struct {$st.name}
{#int32_t write_{$st.name}_struct(erpc::Codec * out, const {$st.name} * data{% if st.isNeedIfDealloc %}, bool needDealloc{% endif %});#}
static int32_t write_{$st.name}_struct(erpc::Codec * codec, const {$st.name} * data);
{%  endfor -- structs %}
{% endif %}
{% enddef  -- structSerialHeader %}

{# ---------------- structDeserialSource ---------------- #}
{% def structDeserialSource(structs) %}
{% if structs %}
{%  for st in structs %}

// Read struct {$st.name} function implementation
static int32_t read_{$st.name}_struct(erpc::Codec * codec, {$st.name} * data)
{
{%   if st.hasNullableMember %}
    bool isNull;
{%   endif -- hasNullableMember %}
{%   if st.genStructWrapperF %}
{%    if st.needEnumTmp %}
    int32_t enum_tmp_local;
{%    endif %}
    {%    if errVar != ""  %}erpc_status_t {$errVar}{%    endif %}codec->startReadStruct();
{%   else %}
{%    if errVar != "" %}
    erpc_status_t {$errVar}kErpcStatus_Success;
{%    endif %}
{%   endif %}
{%   for mem in st.members if not mem.lengthForMember %}
{%    if mem.isNullable %}
{$> addInfraErrorChecksBegin("    ")}
{$infraErrIndents}    {$infraErrVar}codec->readNullFlag(&isNull);
{$infraErrIndents}    if (!isNull)
{$infraErrIndents}    {
{$addInfraErrorChecks(infraErrIndents & "        ", mem.coderCall.decode(mem.coderCall))}
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{$infraErrIndents}        {$mem.coderCall.name}{$mem.structElements} = NULL;
{$infraErrIndents}        {$mem.coderCall.name}{$mem.structElementsCount} = 0;
{$infraErrIndents}    }
{$> addInfraErrorChecksEnd("    ") }{$loop.addNewLineIfNotLast}
{%    else -- notNullable %}
{$addInfraErrorChecks("    ", mem.coderCall.decode(mem.coderCall))}{$loop.addNewLineIfNotLast}
{%    endif -- notNullable %}
{%   endfor -- st.members %}
{%   if st.genStructWrapperF %}

{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}codec->endReadStruct();
{$> addInfraErrorChecksEnd("    ") }
{%   endif %}
{%   if errVar != ""  %}
    return err;
{%   else %}
    return kErpcStatus_Success;
{%   endif %}
}
{%  endfor -- structs %}
{% endif %}
{% enddef -- structDeserialSource %}

{# ---------------- structSerialSource ---------------- #}
{% def structSerialSource(structs) %}
{% if structs %}
{%  for st in structs %}

// Write struct {$st.name} function implementation
{#int32_t write_{$st.name}_struct(erpc::Codec * out, const {$st.name} * data{% if st.isNeedIfDealloc %}, bool needDealloc{% endif %})#}
static int32_t write_{$st.name}_struct(erpc::Codec * codec, const {$st.name} * data)
{
{%   if st.genStructWrapperF %}
    {%    if errVar != ""  %}erpc_status_t {$errVar}{%    endif %}codec->startWriteStruct();
{%   else %}
{%    if errVar != "" %}
    erpc_status_t {$errVar}kErpcStatus_Success;
{%    endif %}
{%   endif %}
{%   for mem in st.members if not mem.lengthForMember %}
{%    if mem.isNullable %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    if ({$mem.coderCall.name}{$mem.structElements} == NULL)
{$infraErrIndents}    {
{$infraErrIndents}        {$infraErrVar}codec->writeNullFlag(true);
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{$infraErrIndents}        {$infraErrVar}codec->writeNullFlag(false);
{$addInfraErrorChecks(infraErrIndents & "        ", mem.coderCall.encode(mem.coderCall))}
{$infraErrIndents}    }
{$> addInfraErrorChecksEnd("    ") }{$loop.addNewLineIfNotLast}
{%    else -- notNullable %}
{$addInfraErrorChecks("    ", mem.coderCall.encode(mem.coderCall))}{$loop.addNewLineIfNotLast}
{%    endif -- notNullable %}
{%   endfor -- st.members %}
{%   if st.genStructWrapperF %}

{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}codec->endWriteStruct();
{$> addInfraErrorChecksEnd("    ") }
{%   endif %}
{%   if errVar != ""  %}
    return err;
{%   else %}
    return kErpcStatus_Success;
{%   endif %}
}
{%  endfor -- structs %}
{% endif %}
{% enddef -- structSerialSource %}

{# ---------------- structFreeSpaceHeader ---------------- #}
{% def structFreeSpaceHeader(structs) %}
{% if structs %}
{%  for st in structs %}

//! @brief Function to free space allocated inside struct {$st.name}
static void free_{$st.name}_struct({$st.name} * data);
{%  endfor -- structs %}
{% endif %}
{% enddef  -- structDeSerialHeader %}

{# ---------------- structFreeSpaceSource ---------------- #}
{% def structFreeSpaceSource(structs) %}
{% if structs %}
{%  for st in structs %}

// Free space allocated inside struct {$st.name} function implementation
static void free_{$st.name}_struct({$st.name} * data)
{
{%   for mem in st.membersToFree %}
{$addIndent("    ", mem.coderCall.freeingCall(mem.coderCall))}{$loop.addNewLineIfNotLast}
{%   endfor -- st.members %}
}
{%  endfor -- structs %}
{% endif %}
{% enddef -- structSerialSource %}

{# ---------------- freeData ---------------- #}
{% def freeData(info) %}
if ({$info.name})
{
    erpc_free({$info.name});
}
{% enddef ------------------------------- freeData %}

{# ---------------- freeStruct ---------------- #}
{% def freeStruct(info) %}
{% if info.inDataContainer %}
free_{$info.typeName}_struct(&{$info.name});
{% else -- not inDataContainer %}
if ({$info.name})
{
    free_{$info.typeName}_struct({$info.name});
}
{% endif -- inDataContainer %}
{% enddef ------------------------------- freeStruct %}

{# ---------------- freeList ---------------- #}
{% def freeList(info) %}
{% if info.needFreeingCall == true %}
{$freeArray(info)}
{% endif %}
if ({$info.name})
{
    erpc_free({$info.name});
}
{% enddef ------------------------------- freeList %}

{# ---------------- freeArray ---------------- #}
{% def freeArray(info) %}
for (uint32_t {$info.forLoopCount} = 0; {$info.forLoopCount} < {$info.size}; ++{$info.forLoopCount})
{
{$addIndent("    ", info.protoNext.freeingCall(info.protoNext))}
}
{% enddef ------------------------------- freeArray %}

{# ---------------- freeUnion ---------------- #}
{% def freeUnion(info) %}
switch ({$info.dataLiteral}->{$info.discriminatorName})
{
{% for case in info.cases %}
{%  if case.needCaseFreeingCall == true %}
{%   if case.name == "default" %}
{$addIndent("    ", "default:")}
{%   else %}
{$addIndent("    ", "case ")}{% if case.name != "" %}{$case.name}{% else %}{$case.value}{% endif %}:
{%   endif -- default or case %}
    {
{%   for member in case.members %}
{%    if member.isNeedFreeingCall %}
{$addIndent("        ", member.coderCall.freeingCall(member.coderCall))}
{%    endif %}
{%   endfor -- members %}
{$addIndent("        ", "break;")}
    }
{%  endif %}
{% endfor -- cases %}
}
{% enddef ------------------------------- freeUnion %}

{# ---------------- addInfraErrorChecks---------------- #}
{#{% def addInfraErrorChecks(info, coderType) %}
{$> addInfraErrorChecksBegin("")}
{% if coderType == "encode" %}{$addIndent(infraErrIndents, info.encode(info))}{% else %}{$addIndent(infraErrIndents, info.decode(info))}{% endif%}
{$> addInfraErrorChecksEnd("")}
{% enddef ------------------------------- addInfraErrorChecks %}#}

{% def addInfraErrorChecks(indent, code) %}
{% if generateInfraErrorChecks %}
{$ indent}if (!err)
{$ indent}{
{$addIndent(indent & "    ", code)}
{$ indent}}{% else %}
{$addIndent(indent, code)}{% endif >%}
{% enddef ------------------------------- addInfraErrorChecks %}

{% def addErrorChecks(indent, code) %}
{% if generateInfraErrorChecks or generateAllocErrorChecks %}
{$ indent}if (!err)
{$ indent}{
{$addIndent(indent & "    ", code)}
{$ indent}}{% else %}
{$addIndent(indent, code)}{% endif >%}
{% enddef ------------------------------- addInfraErrorChecks %}

{# ---------------- addInfraErrorChecksBegin---------------- #}
{% def addInfraErrorChecksBegin(indent) %}
{% if generateInfraErrorChecks %}{$ indent}if (!err)
{$ indent}{{% endif >%}
{% enddef ------------------------------- addInfraErrorChecksBegin %}

{# ---------------- addInfraErrorChecksEnd---------------- #}
{% def addInfraErrorChecksEnd(indent) %}
{% if generateInfraErrorChecks %}{$ indent}}{% endif >%}
{% enddef ------------------------------- addInfraErrorChecksEnd %}

{# ---------------- addInfraErrorChecksElse---------------- #}
{% def addInfraErrorChecksElse() %}
{% if generateInfraErrorChecks %}else
{
    break;
}{% endif >%}
{% enddef ------------------------------- addInfraErrorChecksElse %}
