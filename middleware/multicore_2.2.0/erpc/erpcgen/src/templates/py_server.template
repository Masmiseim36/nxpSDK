#
# Generated by erpcgen {$erpcgenVersion} on {$todaysDate}.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

{% for iface in interfaces %}
# Client for {$iface.name}
class {$iface.name}Service(erpc.server.Service):
    def __init__(self, handler):
        super({$iface.name}Service, self).__init__(interface.I{$iface.name}.SERVICE_ID)
        self._handler = handler
        self._methods = {
{% for fn in iface.functions %}
                interface.I{$iface.name}.{$upper(fn.name)}_ID: self._handle_{$fn.name},
{% endfor -- fn %}
            }

{% for fn in iface.functions %}
    def _handle_{$fn.name}(self, sequence, codec):
{% if fn.outParameters %}
        # Create reference objects to pass into handler for out/inout parameters.
{%  for p in fn.outParameters if not p.lengthForMember %}
        {$p.name} = erpc.Reference()
{%  endfor -- outParams %}

{% endif -- outParams %}
        # Read incoming parameters.
{% for p in fn.inParameters if not p.lengthForMember %}
{%  if p.direction == "in" %}
{%   set p_name = p.name %}
{%  elif p.direction == "inout" %}
{%   set p_name = p.name & ".value" %}
{%  endif -- dir %}
{%  if p.isNullable %}
        if not codec.read_null_flag():
            {$decodeValue(p.type, p_name, "common.", "codec", "            ", 0)}
        else:
            {$p.name if p.direction == "in" else p.name & ".value"} = None
{%  else -- isNullable %}
        {$decodeValue(p.type, p_name, "common.", "codec", "        ", 0)}
{%  endif -- isNullable %}
{% endfor -- inParams %}
        codec.end_read_message()

        # Invoke user implementation of remote function.
        {% if fn.returnValue.type.type != "void" %}_result = {% endif %}self._handler.{$fn.name}({% for p in fn.parameters if not p.lengthForMember %}{$p.name}{% if not loop.last %}, {% endif %}{% endfor %})
{% if not fn.isOneway %}

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.I{$iface.name}.SERVICE_ID,
            request=interface.I{$iface.name}.{$upper(fn.name)}_ID,
            sequence=sequence))
{% for p in fn.outParameters if not p.lengthForMember %}
{%  if p.isNullable %}
        if {$p.name}.value is None:
            codec.write_null_flag(True)
        else:
            codec.write_null_flag(False)
            {$encodeValue(p.type, p.name & ".value", "codec", "            ", 0)}
{%  else -- isNullable %}
        if {$p.name}.value is None:
            raise ValueError("{$p.name} is None")
        {$encodeValue(p.type, p.name & ".value", "codec", "        ", 0)}
{%  endif -- isNullable %}
{% endfor -- outParams %}
{% if fn.isReturnValue && fn.returnValue.type.type != "void" %}
        {$encodeValue(fn.returnValue.type, "_result", "codec", "        ", 0)}
{% endif -- isReturnValue %}
        codec.end_write_message()
{% endif -- isOneway %}

{% endfor -- fn %}

{% endfor -- iface %}
