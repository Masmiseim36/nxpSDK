/* Copyright 2021 NXP
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.4 at Thu Mar 11 17:03:43 2021. */

#ifndef PB_NXP_IOT_DATASTORE_PB_H_INCLUDED
#define PB_NXP_IOT_DATASTORE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _nxp_iot_DatastoreOperation {
    nxp_iot_DatastoreOperation_ALLOCATE = 1,
    nxp_iot_DatastoreOperation_READ = 2,
    nxp_iot_DatastoreOperation_WRITE = 3,
    nxp_iot_DatastoreOperation_COMMIT = 4
} nxp_iot_DatastoreOperation;
#define _nxp_iot_DatastoreOperation_MIN nxp_iot_DatastoreOperation_ALLOCATE
#define _nxp_iot_DatastoreOperation_MAX nxp_iot_DatastoreOperation_COMMIT
#define _nxp_iot_DatastoreOperation_ARRAYSIZE ((nxp_iot_DatastoreOperation)(nxp_iot_DatastoreOperation_COMMIT+1))

typedef enum _nxp_iot_DatastoreStatus {
    nxp_iot_DatastoreStatus_OK = 1,
    nxp_iot_DatastoreStatus_ERROR = 2
} nxp_iot_DatastoreStatus;
#define _nxp_iot_DatastoreStatus_MIN nxp_iot_DatastoreStatus_OK
#define _nxp_iot_DatastoreStatus_MAX nxp_iot_DatastoreStatus_ERROR
#define _nxp_iot_DatastoreStatus_ARRAYSIZE ((nxp_iot_DatastoreStatus)(nxp_iot_DatastoreStatus_ERROR+1))

typedef enum _nxp_iot_DatastoreIdentifiers {
    nxp_iot_DatastoreIdentifiers_DATASTORE_EDGELOCK2GO_ID = 1879048192
} nxp_iot_DatastoreIdentifiers;
#define _nxp_iot_DatastoreIdentifiers_MIN nxp_iot_DatastoreIdentifiers_DATASTORE_EDGELOCK2GO_ID
#define _nxp_iot_DatastoreIdentifiers_MAX nxp_iot_DatastoreIdentifiers_DATASTORE_EDGELOCK2GO_ID
#define _nxp_iot_DatastoreIdentifiers_ARRAYSIZE ((nxp_iot_DatastoreIdentifiers)(nxp_iot_DatastoreIdentifiers_DATASTORE_EDGELOCK2GO_ID+1))

/* Struct definitions */
typedef struct _nxp_iot_DatastoreAdditionalData {
    bool has_supportsTransactions;
    bool supportsTransactions;
/* @@protoc_insertion_point(struct:nxp_iot_DatastoreAdditionalData) */
} nxp_iot_DatastoreAdditionalData;

typedef struct _nxp_iot_DatastoreRequest {
    bool has_operation;
    nxp_iot_DatastoreOperation operation;
    bool has_offset;
    int32_t offset;
    bool has_length;
    int32_t length;
    pb_callback_t data;
/* @@protoc_insertion_point(struct:nxp_iot_DatastoreRequest) */
} nxp_iot_DatastoreRequest;

typedef struct _nxp_iot_DatastoreResponse {
    bool has_status;
    nxp_iot_DatastoreStatus status;
    bool has_length;
    int32_t length;
    pb_callback_t data;
/* @@protoc_insertion_point(struct:nxp_iot_DatastoreResponse) */
} nxp_iot_DatastoreResponse;

/* Default values for struct fields */

/* Initializer values for message structs */
#define nxp_iot_DatastoreAdditionalData_init_default {false, 0}
#define nxp_iot_DatastoreRequest_init_default    {false, _nxp_iot_DatastoreOperation_MIN, false, 0, false, 0, {{NULL}, NULL}}
#define nxp_iot_DatastoreResponse_init_default   {false, _nxp_iot_DatastoreStatus_MIN, false, 0, {{NULL}, NULL}}
#define nxp_iot_DatastoreAdditionalData_init_zero {false, 0}
#define nxp_iot_DatastoreRequest_init_zero       {false, _nxp_iot_DatastoreOperation_MIN, false, 0, false, 0, {{NULL}, NULL}}
#define nxp_iot_DatastoreResponse_init_zero      {false, _nxp_iot_DatastoreStatus_MIN, false, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define nxp_iot_DatastoreAdditionalData_supportsTransactions_tag 1
#define nxp_iot_DatastoreRequest_operation_tag   1
#define nxp_iot_DatastoreRequest_offset_tag      2
#define nxp_iot_DatastoreRequest_length_tag      3
#define nxp_iot_DatastoreRequest_data_tag        10
#define nxp_iot_DatastoreResponse_status_tag     1
#define nxp_iot_DatastoreResponse_length_tag     2
#define nxp_iot_DatastoreResponse_data_tag       10

/* Struct field encoding specification for nanopb */
extern const pb_field_t nxp_iot_DatastoreAdditionalData_fields[2];
extern const pb_field_t nxp_iot_DatastoreRequest_fields[5];
extern const pb_field_t nxp_iot_DatastoreResponse_fields[4];

/* Maximum encoded size of messages (where known) */
#define nxp_iot_DatastoreAdditionalData_size     2
/* nxp_iot_DatastoreRequest_size depends on runtime parameters */
/* nxp_iot_DatastoreResponse_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DATASTORE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
