/* Copyright 2021 NXP
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.4 at Thu Mar 11 17:03:43 2021. */

#ifndef PB_NXP_IOT_DISPATCHER_PB_H_INCLUDED
#define PB_NXP_IOT_DISPATCHER_PB_H_INCLUDED
#include <pb.h>

#include "Types.pb.h"

#include "Agent.pb.h"

#include "Apdu.pb.h"

#include "Datastore.pb.h"

#include "RPC.pb.h"

#include "Hostcmd.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _nxp_iot_EndpointRequests {
    pb_callback_t requests;
/* @@protoc_insertion_point(struct:nxp_iot_EndpointRequests) */
} nxp_iot_EndpointRequests;

typedef struct _nxp_iot_Requests {
    pb_callback_t payload;
/* @@protoc_insertion_point(struct:nxp_iot_Requests) */
} nxp_iot_Requests;

typedef struct _nxp_iot_Responses {
    pb_callback_t responses;
/* @@protoc_insertion_point(struct:nxp_iot_Responses) */
} nxp_iot_Responses;

typedef struct _nxp_iot_EndpointRequest {
    bool has_type;
    nxp_iot_EndpointType type;
    bool has_endpointId;
    uint32_t endpointId;
    pb_callback_t payload;
/* @@protoc_insertion_point(struct:nxp_iot_EndpointRequest) */
} nxp_iot_EndpointRequest;

typedef struct _nxp_iot_RequestPayload {
    pb_size_t which_payload;
    union {
        nxp_iot_AgentHelloRequest hello;
        nxp_iot_AgentGoodbyeRequest goodbye;
        nxp_iot_AgentCrlRequest crl;
        nxp_iot_ApduRequest apdu;
        nxp_iot_DatastoreRequest datastore;
        nxp_iot_RpcRequest rpc;
        nxp_iot_HostControlCmdRequest hostCmd;
    } payload;
/* @@protoc_insertion_point(struct:nxp_iot_RequestPayload) */
} nxp_iot_RequestPayload;

typedef struct _nxp_iot_ResponsePayload {
    pb_size_t which_message;
    union {
        nxp_iot_AgentHelloResponse hello;
        nxp_iot_AgentCrlResponse crl;
        nxp_iot_ApduResponse apdu;
        nxp_iot_DatastoreResponse datastore;
        nxp_iot_RpcResponse rpc;
    } message;
/* @@protoc_insertion_point(struct:nxp_iot_ResponsePayload) */
} nxp_iot_ResponsePayload;

/* Default values for struct fields */

/* Initializer values for message structs */
#define nxp_iot_RequestPayload_init_default      {0, {nxp_iot_AgentHelloRequest_init_default}}
#define nxp_iot_ResponsePayload_init_default     {0, {nxp_iot_AgentHelloResponse_init_default}}
#define nxp_iot_EndpointRequest_init_default     {false, _nxp_iot_EndpointType_MIN, false, 0, {{NULL}, NULL}}
#define nxp_iot_EndpointRequests_init_default    {{{NULL}, NULL}}
#define nxp_iot_Requests_init_default            {{{NULL}, NULL}}
#define nxp_iot_Responses_init_default           {{{NULL}, NULL}}
#define nxp_iot_RequestPayload_init_zero         {0, {nxp_iot_AgentHelloRequest_init_zero}}
#define nxp_iot_ResponsePayload_init_zero        {0, {nxp_iot_AgentHelloResponse_init_zero}}
#define nxp_iot_EndpointRequest_init_zero        {false, _nxp_iot_EndpointType_MIN, false, 0, {{NULL}, NULL}}
#define nxp_iot_EndpointRequests_init_zero       {{{NULL}, NULL}}
#define nxp_iot_Requests_init_zero               {{{NULL}, NULL}}
#define nxp_iot_Responses_init_zero              {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define nxp_iot_EndpointRequests_requests_tag    1
#define nxp_iot_Requests_payload_tag             1
#define nxp_iot_Responses_responses_tag          1
#define nxp_iot_EndpointRequest_type_tag         1
#define nxp_iot_EndpointRequest_endpointId_tag   2
#define nxp_iot_EndpointRequest_payload_tag      100
#define nxp_iot_RequestPayload_hello_tag         1
#define nxp_iot_RequestPayload_goodbye_tag       2
#define nxp_iot_RequestPayload_crl_tag           3
#define nxp_iot_RequestPayload_apdu_tag          20
#define nxp_iot_RequestPayload_datastore_tag     30
#define nxp_iot_RequestPayload_rpc_tag           40
#define nxp_iot_RequestPayload_hostCmd_tag       50
#define nxp_iot_ResponsePayload_hello_tag        1
#define nxp_iot_ResponsePayload_crl_tag          3
#define nxp_iot_ResponsePayload_apdu_tag         20
#define nxp_iot_ResponsePayload_datastore_tag    30
#define nxp_iot_ResponsePayload_rpc_tag          40

/* Struct field encoding specification for nanopb */
extern const pb_field_t nxp_iot_RequestPayload_fields[8];
extern const pb_field_t nxp_iot_ResponsePayload_fields[6];
extern const pb_field_t nxp_iot_EndpointRequest_fields[4];
extern const pb_field_t nxp_iot_EndpointRequests_fields[2];
extern const pb_field_t nxp_iot_Requests_fields[2];
extern const pb_field_t nxp_iot_Responses_fields[2];

/* Maximum encoded size of messages (where known) */
#define nxp_iot_RequestPayload_size              (5 + sizeof(union{char f0[6279]; char f2[nxp_iot_AgentGoodbyeRequest_size]; char f3[nxp_iot_AgentCrlRequest_size]; char f20[nxp_iot_ApduRequest_size]; char f30[nxp_iot_DatastoreRequest_size];}))
#define nxp_iot_ResponsePayload_size             (5 + sizeof(union{char f0[6279]; char f20[nxp_iot_ApduResponse_size]; char f30[nxp_iot_DatastoreResponse_size];}))
/* nxp_iot_EndpointRequest_size depends on runtime parameters */
/* nxp_iot_EndpointRequests_size depends on runtime parameters */
/* nxp_iot_Requests_size depends on runtime parameters */
/* nxp_iot_Responses_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DISPATCHER_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
