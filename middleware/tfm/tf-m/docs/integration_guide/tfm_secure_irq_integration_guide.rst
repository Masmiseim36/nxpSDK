##################################
Secure Interrupt Integration Guide
##################################

************
Introduction
************

This document describes how to enable an interrupt in TF-M. The target audiences
are mainly platform integrators and Secure Partition developers.

This document assumes that you have read the PSA Firmware Framework (FF-M) v1.0
[1]_ and the FF-M v1.1 extensions [2]_ thus have knowlege on the terminologies
such as Secure Partitions and manifests.

************************
Interrupt Handling Model
************************

TF-M supports the two interrupt handling model defined by FF-M:

- First-Level Interrupt Handling (FLIH)

  In this model, the interrupt handling is carried out immediately when the
  interrupt exception happens.

  The interrupt handling can optionally set an interrupt signal for the Secure
  Partition Thread to have further data processing.

- Second-Level Interrupt Handling (SLIH)

  In this model, the interrupt handling is deferred after the interrupt
  exception. The handling occurs in the Secure Partition Thread thus is subject
  to scheduling.

The FLIH supports handling an interrupt in a bounded time, but very limited APIs
are allowed in the FLIH handling because the handling occurs in an special
exception context.

The SLIH is deferred and subject to scheduling but all Secure Partition APIs are
allowed as the SLIH handling is in the Secure Partition Thread.

Both the FLIH and the SLIH can be used by Secure Partitions which conform to
Firmware Framework v1.1.

While the SLIH is the only supported model for Secure Partitions which conform
to Firmware Framework v1.0.

Please refer to chapter 6.2 of FF-M v1.1 [1]_ for more details on the interrupt
handling models.

*********************
Enabling an Interrupt
*********************

To enable an interrupt, you need to do the following:

- Binding the interrupt to a Secure Partition.
- Granting the Secure Partition access permissions to the device of the
  interrupt.
- Configurating the interrupt.
- Integrating the interrupt handling function

TF-M has two Test Partitions as good examples for both FLIH [3]_ and SLIH [4]_.
See also `Enabling the Interrupt Tests`_ on how to integrate them to platforms.

Binding an Interrupt to a Secure Partition
==========================================

To bind an interrupt to a Secure Partition, you need to add an item to the
``irqs`` attribute of the Secure Partition manifest.
``irqs`` is a list of Interrupt Request (IRQ) assigned to the Secure Partition.

Secure Partitions are not allowed to share IRQs with other Secure Partitions.

Different Firmware Framework versions have different definitions of manifest.

FF-M v1.0
---------

Here is an example manifest of Secure Partitions conform to Firmware Framework
version 1.0:

.. code-block:: yaml

  {
    "irqs": [
      {
        "source": "5",
        "signal": "DUAL_TIMER_SIGNAL"
      },
      {
        "source": "TIMER_1_SOURCE",
        "signal": "TIMER_1_SIGNAL"
      }
    ]
  }

- source

  Required, Unique.

  The ``source`` is a string that identifies the interrupt source.
  It can be a valid exception number or a symbolic name defined in platform codes.

- signal

  Required, Unique.

  The ``signal`` attribute is a symbolic name used by TF-M to identify which
  interrupt is asserted.
  It is also used by the Secure Partition to receive the interrupt signal by
  calling ``psa_wait`` for interrupt handling.

  It is defined in the Secure Partition header file
  ``<psa_manifest/manifestfilename.h>`` generated by TF-M:

  .. code-block:: c

    #define signal VALUE

The interrupt handling model is SLIH by default as it is the only supported one
for FF-M v1.0.

FF-M v1.1
---------

Here is an example manifest of Secure Partitions conform to Firmware Framework
version 1.1:

.. code-block:: yaml

  {
    "irqs": [
      {
        "source"  : "TIMER_1_SOURCE",
        "name"    : "TIMER_1",
        "handling": "FLIH"
      },
      {
        "source"  : "5",
        "name"    : "DUAL_TIMER",
        "handling": "SLIH"
      }
    ]
  }

- source

  The ``source`` is the same as the one in Firmware Framework Version 1.0.

- name

  Required, Unique.

  The ``name`` is used to construct the following two elements:

  - the interrupt signal symbol: ``{{name}}_SIGNAL``, the equivalent of
    ``signal`` in FF-M v1.0
  - the FLIH Function for handling ``FLIH`` IRQs provided by Secure Partition:

    ``psa_flih_result_t {{name}}_flih(void);``

    It is also declared in ``<psa_manifest/manifestfilename.h>``.

- handling

  Required.

  The ``handling`` attribute specifies the interrupt handling model and must
  have one of the following values:

  - ``FLIH`` - First-Level Interrupt Handling
  - ``SLIH`` - Second-Level Interrupt Handling

Granting Permissions to Devices for Secure Partitions
=====================================================

A secure partition shall be granted two parts of permissions to access a device.
One is the Memory Maped I/O (MMIO) region of the device. The other is the driver
codes to access the device.

The MMIO Regions
----------------

You need to declare the MMIO region in the ``mmio_regions`` attributes in the
Secure Partition manifest, to enable the Secure Partition to access it.

An MMIO region can be described as either ``numbered_region`` or
``named_region``.
A numbered region consists of a ``base`` address and a ``size``.
A named region consists of a string ``name`` to describe the region.

Here is an example of named region:

.. code-block:: yaml

  {
    "mmio_regions": [
      {
        "name": "TFM_PERIPHERAL_TIMER0",
        "permission": "READ-WRITE"
      }
    ]
  }

- name

  Required.

  The ``name`` attribute is a symbolic name defined by platforms.
  It is a pointer to structure instance that usually includes the base address
  and size of the region and some other platform specific attributes that are
  required to set up permissions to the MMIO region.

  The structure is defined by platforms and the name must be
  ``struct platform_data_t``.

  TF-M provides a HAL API for platforms to set up permissions:

  .. code-block:: c

    enum tfm_plat_err_t tfm_spm_hal_configure_default_isolation(
                                  bool priviledged,
                                  const struct platform_data_t *platform_data);

- permission

  Required.

  The ``permission`` attribute must have one of the following values:

  - ``READ-ONLY``
  - ``READ-WRITE``

The Device Drivers
------------------

To give permissions of devices drivers to Secure Partitions, it is recommanded
to put the driver codes to the Partition's CMake library:

.. code-block:: bash

  target_sources(some_partition_lib
      PRIVATE
          some_driver_code.c
  )

Configurating the Interrupts
============================

Setting up configurations for an interrupt mainly includes setting the priority
and targetting the interrupt to Secure State.

Setting Priority
----------------

TF-M provides a HAL API for platforms to set priorities for interrupts:

.. code-block:: c

  enum tfm_plat_err_t tfm_spm_hal_set_secure_irq_priority(IRQn_Type irq_line);

The priority value must be less than the value of ``PendSV`` (0x80) and greater
than the value of ``SVC`` (0x0).

Platforms have the fexibilities on how to assign the priorities to interrupts
and how to get the priority for the given ``irq_line`` in the HAL API.
For example, platforms can define a static map between the ``irq_line`` and
priorities for the API to search in.

Targeting Interrupts to Secure
------------------------------

TF-M provides another HAL API for platforms to target interrupts to Secure
State.

.. code-block:: c

  enum irq_target_state_t tfm_spm_hal_set_irq_target_state(
                                          IRQn_Type irq_line,
                                          enum irq_target_state_t target_state);

The ``target_state`` is ``TFM_IRQ_TARGET_STATE_SECURE`` for Secure IRQs.

Integrating the Interrupt Handling Function
===========================================

TF-M automatically generates interrupt handling functions for each interrupt
assigned to Secure Partitions during building.
The format of the handling functions is:

.. code-block:: c

  void irq_{{source}}_Handler(void)

if ``source`` of the IRQ in manifest is a number.

.. code-block:: c

  void {{irq.source}}_Handler(void)

if ``source`` of the IRQ in manifest is a symbolic name.

Platforms should integrate the handling functions in their own manner.
For example, they can put the functions to Vector Table directly or have a
integration layer where the handlers in Vector Table calls the functions
generated by TF-M.

Please check ``startup_cmsdk_mps2_an521_s`` for example of the former approach.

****************************
Enabling the Interrupt Tests
****************************

TF-M provides test suites for FLIH and SLIH interrupts respectively.
They are disabled by default. The configurations are:

- TEST_NS_FLIH_IRQ
- TEST_NS_SLIH_IRQ

The tests share the same timer ``TFM_TIMER0_IRQ`` thus cannot be enabled at the
same time.

To enable the tests, please follow steps in the previous sections.
In addition, you need to implement the following APIs of timer control:

- ``void tfm_plat_test_secure_timer_start(void)``
- ``void tfm_plat_test_secure_timer_clear_intr(void)``
- ``void tfm_plat_test_secure_timer_stop(void)``

************************************
Migrating to Firmware Framework v1.1
************************************

Please refer to ``Migrating Secure Partitions to version 1.1`` of FF-M v1.1 [1]_
.

**********
References
**********

.. [1] `FF-M v1.0 Specification <https://developer.arm.com/-/media/Files/pdf/PlatformSecurityArchitecture/Architect/DEN0063-PSA_Firmware_Framework-1.0.0-2.pdf?revision=2d1429fa-4b5b-461a-a60e-4ef3d8f7f4b4>`__

.. [2] `FF-M v1.1 Extention <https://documentation-service.arm.com/static/600067c09b9c2d1bb22cd1c5?token=>`__

.. [3] https://git.trustedfirmware.org/TF-M/tf-m-tests.git/tree/test/test_services/tfm_flih_test_service

.. [4] https://git.trustedfirmware.org/TF-M/tf-m-tests.git/tree/test/test_services/tfm_slih_test_service

--------------

*Copyright (c) 2021, Arm Limited. All rights reserved.*
